
hello_world2.elf:     file format elf32-littlenios2
hello_world2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000194

Program Header:
    LOAD off    0x00001020 vaddr 0x08104020 paddr 0x04000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x04000194 paddr 0x04000194 align 2**12
         filesz 0x00005468 memsz 0x00005468 flags r-x
    LOAD off    0x000075fc vaddr 0x040055fc paddr 0x04007044 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00009a8c vaddr 0x04008a8c paddr 0x04008a8c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-
    LOAD off    0x0000a000 vaddr 0x08104000 paddr 0x08104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08104000  08104000  0000a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08104020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005420  04000194  04000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  040055b4  040055b4  000075b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  040055fc  04007044  000075fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  04008a8c  04008a8c  00009a8c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000a020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  0000a048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d51  00000000  00000000  0000a940  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000198f5  00000000  00000000  0000b691  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004f1a  00000000  00000000  00024f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c80f  00000000  00000000  00029ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001010  00000000  00000000  000366b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015ec  00000000  00000000  000376c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e08  00000000  00000000  00038cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003cab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003cae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003f2af  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003f2b2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003f2b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003f2b6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003f2b7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003f2bb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003f2bf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003f2c3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003f2cc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003f2d5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0003f2de  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0003f2e9  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00047d5c  00000000  00000000  0003f318  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08104000 l    d  .entry	00000000 .entry
08104020 l    d  .exceptions	00000000 .exceptions
04000194 l    d  .text	00000000 .text
040055b4 l    d  .rodata	00000000 .rodata
040055fc l    d  .rwdata	00000000 .rwdata
04008a8c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001dc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
040055fc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04001b4c l     F .text	00000058 std
04001c58 l     F .text	00000008 __fp_lock
04001c60 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
04002c20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04002c80 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04002d80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04002ea0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04002f80 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
040030dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04003308 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04007034 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
040035a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04005fac l     O .rwdata	00001060 JTAG_UART
04003694 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040038d4 l     F .text	00000228 altera_avalon_jtag_uart_irq
04003afc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04004178 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040044c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040048e8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04004a24 l     F .text	000000dc alt_file_locked
04004c88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0400539c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04005550 l     F .text	00000040 alt_sim_halt
040029c4 g     F .text	00000070 _isatty_r
0400313c g     F .text	0000006c alt_main
04000214 g     F .text	000000a0 _puts_r
04008adc g     O .bss	00000100 alt_irq
04002a34 g     F .text	00000078 _lseek_r
04007044 g       *ABS*	00000000 __flash_rwdata_start
04008d6c g       *ABS*	00000000 __alt_heap_start
04002600 g     F .text	00000068 __sseek
04001bb4 g     F .text	000000a4 __sinit
04001cb4 g     F .text	00000068 __sfmoreglue
040031c8 g     F .text	00000020 __malloc_unlock
0400109c g     F .text	000000e0 memmove
04001ca4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
08104000 g     F .entry	0000001c __reset
08104000 g       *ABS*	00000000 __alt_mem_ONCHIP
04000000 g       *ABS*	00000000 __flash_exceptions_start
04002950 g     F .text	00000074 _fstat_r
04008a98 g     O .bss	00000004 errno
04008aa0 g     O .bss	00000004 alt_argv
0400f00c g       *ABS*	00000000 _gp
04005e2c g     O .rwdata	00000180 alt_fd_list
04004eac g     F .text	00000094 alt_find_dev
04000ffc g     F .text	000000a0 memcpy
04001c98 g     F .text	0000000c _cleanup_r
040049ac g     F .text	00000078 alt_io_redirect
040055b4 g       *ABS*	00000000 __DTOR_END__
040002b4 g     F .text	00000014 puts
04003d14 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04002de0 g     F .text	000000c0 isatty
04005118 g     F .text	00000090 alt_icache_flush
04008a8c g     O .bss	00000004 __malloc_top_pad
0400033c g     F .text	0000049c __sfvwrite_r
04001770 g     F .text	00000070 _sbrk_r
04002aac g     F .text	00000078 _read_r
0400702c g     O .rwdata	00000004 alt_max_fd
0400282c g     F .text	00000110 _fclose_r
04001b18 g     F .text	00000034 fflush
04008a90 g     O .bss	00000004 __malloc_max_sbrked_mem
04002fec g     F .text	000000f0 lseek
04007010 g     O .rwdata	00000004 _global_impure_ptr
0400117c g     F .text	000005f4 _realloc_r
04008d6c g       *ABS*	00000000 __bss_end
040047f0 g     F .text	000000f8 alt_iic_isr_register
04004d80 g     F .text	0000010c alt_tick
04001c80 g     F .text	00000018 __fp_lock_all
040047a8 g     F .text	00000048 alt_ic_irq_enabled
04004ce8 g     F .text	00000098 alt_alarm_stop
04008aa8 g     O .bss	00000004 alt_irq_active
081040ec g     F .exceptions	000000c8 alt_irq_handler
04005e04 g     O .rwdata	00000028 alt_dev_null
08080000 g       *ABS*	00000000 __alt_mem_SSRAM_CONTROLLER
040043cc g     F .text	00000044 alt_dcache_flush_all
04007044 g       *ABS*	00000000 __ram_rwdata_end
04007024 g     O .rwdata	00000008 alt_dev_list
04003484 g     F .text	00000120 write
040055fc g       *ABS*	00000000 __ram_rodata_end
04002cac g     F .text	000000d4 fstat
04008d6c g       *ABS*	00000000 end
04003814 g     F .text	000000c0 altera_avalon_jtag_uart_init
040055b0 g       *ABS*	00000000 __CTOR_LIST__
04800000 g       *ABS*	00000000 __alt_stack_pointer
040041e8 g     F .text	00000090 alt_avalon_timer_sc_init
04003f38 g     F .text	00000240 altera_avalon_jtag_uart_write
04001ba4 g     F .text	00000004 __sfp_lock_acquire
04000f18 g     F .text	000000e4 memchr
04001f38 g     F .text	00000314 _free_r
040053a0 g     F .text	000001b0 __call_exitprocs
04007018 g     O .rwdata	00000004 __malloc_sbrk_base
04000194 g     F .text	0000004c _start
04008aac g     O .bss	00000004 _alt_tick_rate
04008ab0 g     O .bss	00000004 _alt_nticks
040031e8 g     F .text	00000120 read
04003638 g     F .text	0000005c alt_sys_init
04005268 g     F .text	00000134 __register_exitproc
04003bac g     F .text	00000074 altera_avalon_jtag_uart_close
040055fc g       *ABS*	00000000 __ram_rwdata_start
040055b4 g       *ABS*	00000000 __ram_rodata_start
04008ab4 g     O .bss	00000028 __malloc_current_mallinfo
040036cc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04005060 g     F .text	000000b8 alt_get_fd
040027bc g     F .text	00000070 _close_r
040051f4 g     F .text	00000074 memcmp
0400377c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
04008d6c g       *ABS*	00000000 __alt_stack_base
040037c4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
040017e0 g     F .text	0000013c __swsetup_r
04001d1c g     F .text	000000f0 __sfp
040059fc g     O .rwdata	00000408 __malloc_av_
04001bb0 g     F .text	00000004 __sinit_lock_release
040026e4 g     F .text	00000060 __sread
04004f40 g     F .text	00000120 alt_find_file
04004410 g     F .text	000000b4 alt_dev_llist_insert
040031a8 g     F .text	00000020 __malloc_lock
040033c8 g     F .text	000000bc sbrk
0400191c g     F .text	000001fc _fflush_r
04008a8c g       *ABS*	00000000 __bss_start
04002560 g     F .text	00000098 memset
040001e0 g     F .text	00000034 main
04000000 g       *ABS*	00000000 __alt_mem_SDRAM_CONTROLLER
04008aa4 g     O .bss	00000004 alt_envp
04008a94 g     O .bss	00000004 __malloc_max_total_mem
04003724 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
040025f8 g     F .text	00000008 __sclose
04800000 g       *ABS*	00000000 __alt_heap_limit
0400293c g     F .text	00000014 fclose
04008bdc g     O .bss	00000190 _atexit0
040007d8 g     F .text	00000740 _malloc_r
04007030 g     O .rwdata	00000004 alt_errno
04002314 g     F .text	000000b8 _fwalk
04001e0c g     F .text	0000012c _malloc_trim_r
040055b4 g       *ABS*	00000000 __CTOR_END__
040055b4 g       *ABS*	00000000 __flash_rodata_start
040055b4 g       *ABS*	00000000 __DTOR_LIST__
04003604 g     F .text	00000034 alt_irq_init
04003368 g     F .text	00000060 alt_release_fd
040051a8 g     F .text	00000014 atexit
04002744 g     F .text	00000078 _write_r
0400700c g     O .rwdata	00000004 _impure_ptr
04008a9c g     O .bss	00000004 alt_argc
04004588 g     F .text	00000064 _do_dtors
08104020 g       .exceptions	00000000 alt_irq_entry
04001c68 g     F .text	00000018 __fp_unlock_all
0400701c g     O .rwdata	00000008 alt_fs_list
08104020 g       *ABS*	00000000 __ram_exceptions_start
0400461c g     F .text	00000050 alt_ic_isr_register
04007044 g       *ABS*	00000000 _edata
04008d6c g       *ABS*	00000000 _end
081041b4 g       *ABS*	00000000 __ram_exceptions_end
04003c20 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04004708 g     F .text	000000a0 alt_ic_irq_disable
04002668 g     F .text	0000007c __swrite
04007014 g     O .rwdata	00000004 __malloc_trim_threshold
04004e8c g     F .text	00000020 altera_nios2_qsys_irq_init
040051bc g     F .text	00000038 exit
0400224c g     F .text	000000c8 _fwalk_reent
04800000 g       *ABS*	00000000 __alt_data_end
08104020 g     F .exceptions	00000000 alt_exception
04001ba8 g     F .text	00000004 __sfp_lock_release
04005590 g     F .text	00000020 _exit
04004278 g     F .text	00000154 alt_alarm_start
040023cc g     F .text	00000194 __smakebuf_r
040002c8 g     F .text	00000074 strlen
04004b00 g     F .text	00000188 open
040045ec g     F .text	00000030 alt_icache_flush_all
04007038 g     O .rwdata	00000004 alt_priority_mask
0400466c g     F .text	0000009c alt_ic_irq_enable
0400703c g     O .rwdata	00000008 alt_alarm_list
04004524 g     F .text	00000064 _do_ctors
04002b24 g     F .text	000000fc close
04002f00 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
04001bac g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08104000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8104000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 8104004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8104008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 810400c:	00bffd16 	blt	zero,r2,8104004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8104010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8104014:	08406514 	ori	at,at,404
    jmp r1
 8104018:	0800683a 	jmp	at
 810401c:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>

Disassembly of section .exceptions:

08104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 810402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 810403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 810404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 810405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 810406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 810407c:	10000326 	beq	r2,zero,810408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8104080:	20000226 	beq	r4,zero,810408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8104084:	81040ec0 	call	81040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8104088:	00000306 	br	8104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 810408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 810409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 81040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 81040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 81040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 81040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 81040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 81040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 81040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 81040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 81040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 81040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 81040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 81040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 81040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 81040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 81040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 81040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 81040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 81040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 81040e8:	ef80083a 	eret

081040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 81040ec:	defff904 	addi	sp,sp,-28
 81040f0:	dfc00615 	stw	ra,24(sp)
 81040f4:	df000515 	stw	fp,20(sp)
 81040f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 81040fc:	0005313a 	rdctl	r2,ipending
 8104100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8104104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8104108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 810410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8104110:	00800044 	movi	r2,1
 8104114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8104118:	e0ffff17 	ldw	r3,-4(fp)
 810411c:	e0bffe17 	ldw	r2,-8(fp)
 8104120:	1884703a 	and	r2,r3,r2
 8104124:	1005003a 	cmpeq	r2,r2,zero
 8104128:	1000161e 	bne	r2,zero,8104184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 810412c:	e0bffd17 	ldw	r2,-12(fp)
 8104130:	00c10074 	movhi	r3,1025
 8104134:	18e2b704 	addi	r3,r3,-29988
 8104138:	100490fa 	slli	r2,r2,3
 810413c:	10c5883a 	add	r2,r2,r3
 8104140:	11400017 	ldw	r5,0(r2)
 8104144:	e0bffd17 	ldw	r2,-12(fp)
 8104148:	00c10074 	movhi	r3,1025
 810414c:	18e2b704 	addi	r3,r3,-29988
 8104150:	100490fa 	slli	r2,r2,3
 8104154:	10c5883a 	add	r2,r2,r3
 8104158:	10800104 	addi	r2,r2,4
 810415c:	11000017 	ldw	r4,0(r2)
 8104160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8104164:	0005313a 	rdctl	r2,ipending
 8104168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 810416c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8104170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8104174:	e0bfff17 	ldw	r2,-4(fp)
 8104178:	1004c03a 	cmpne	r2,r2,zero
 810417c:	103fe31e 	bne	r2,zero,810410c <alt_irq_handler+0x20>
 8104180:	00000706 	br	81041a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8104184:	e0bffe17 	ldw	r2,-8(fp)
 8104188:	1085883a 	add	r2,r2,r2
 810418c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8104190:	e0bffd17 	ldw	r2,-12(fp)
 8104194:	10800044 	addi	r2,r2,1
 8104198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 810419c:	003fde06 	br	8104118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 81041a0:	e037883a 	mov	sp,fp
 81041a4:	dfc00117 	ldw	ra,4(sp)
 81041a8:	df000017 	ldw	fp,0(sp)
 81041ac:	dec00204 	addi	sp,sp,8
 81041b0:	f800283a 	ret

Disassembly of section .text:

04000194 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000194:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000198:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400019c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 40001a0:	00bffd16 	blt	zero,r2,4000198 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001a4:	06c12034 	movhi	sp,1152
    ori sp, sp, %lo(__alt_stack_pointer)
 40001a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001ac:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 40001b0:	d6bc0314 	ori	gp,gp,61452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001b4:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001b8:	10a2a314 	ori	r2,r2,35468

    movhi r3, %hi(__bss_end)
 40001bc:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001c0:	18e35b14 	ori	r3,r3,36204

    beq r2, r3, 1f
 40001c4:	10c00326 	beq	r2,r3,40001d4 <_start+0x40>

0:
    stw zero, (r2)
 40001c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001d0:	10fffd36 	bltu	r2,r3,40001c8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001d4:	4002f000 	call	4002f00 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001d8:	400313c0 	call	400313c <alt_main>

040001dc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001dc:	003fff06 	br	40001dc <alt_after_alt_main>

040001e0 <main>:
 */

#include <stdio.h>

int main()
{
 40001e0:	defffe04 	addi	sp,sp,-8
 40001e4:	dfc00115 	stw	ra,4(sp)
 40001e8:	df000015 	stw	fp,0(sp)
 40001ec:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 40001f0:	01010034 	movhi	r4,1024
 40001f4:	21156d04 	addi	r4,r4,21940
 40001f8:	40002b40 	call	40002b4 <puts>

  return 0;
 40001fc:	0005883a 	mov	r2,zero
}
 4000200:	e037883a 	mov	sp,fp
 4000204:	dfc00117 	ldw	ra,4(sp)
 4000208:	df000017 	ldw	fp,0(sp)
 400020c:	dec00204 	addi	sp,sp,8
 4000210:	f800283a 	ret

04000214 <_puts_r>:
 4000214:	defff604 	addi	sp,sp,-40
 4000218:	dc400715 	stw	r17,28(sp)
 400021c:	2023883a 	mov	r17,r4
 4000220:	2809883a 	mov	r4,r5
 4000224:	dfc00915 	stw	ra,36(sp)
 4000228:	dcc00815 	stw	r19,32(sp)
 400022c:	2827883a 	mov	r19,r5
 4000230:	40002c80 	call	40002c8 <strlen>
 4000234:	89400217 	ldw	r5,8(r17)
 4000238:	00c10034 	movhi	r3,1024
 400023c:	18d57204 	addi	r3,r3,21960
 4000240:	01c00044 	movi	r7,1
 4000244:	12000044 	addi	r8,r2,1
 4000248:	d8c00515 	stw	r3,20(sp)
 400024c:	d9c00615 	stw	r7,24(sp)
 4000250:	d8c00304 	addi	r3,sp,12
 4000254:	01c00084 	movi	r7,2
 4000258:	8809883a 	mov	r4,r17
 400025c:	d80d883a 	mov	r6,sp
 4000260:	d8c00015 	stw	r3,0(sp)
 4000264:	dcc00315 	stw	r19,12(sp)
 4000268:	da000215 	stw	r8,8(sp)
 400026c:	d9c00115 	stw	r7,4(sp)
 4000270:	d8800415 	stw	r2,16(sp)
 4000274:	400033c0 	call	400033c <__sfvwrite_r>
 4000278:	00ffffc4 	movi	r3,-1
 400027c:	10000626 	beq	r2,zero,4000298 <_puts_r+0x84>
 4000280:	1805883a 	mov	r2,r3
 4000284:	dfc00917 	ldw	ra,36(sp)
 4000288:	dcc00817 	ldw	r19,32(sp)
 400028c:	dc400717 	ldw	r17,28(sp)
 4000290:	dec00a04 	addi	sp,sp,40
 4000294:	f800283a 	ret
 4000298:	00c00284 	movi	r3,10
 400029c:	1805883a 	mov	r2,r3
 40002a0:	dfc00917 	ldw	ra,36(sp)
 40002a4:	dcc00817 	ldw	r19,32(sp)
 40002a8:	dc400717 	ldw	r17,28(sp)
 40002ac:	dec00a04 	addi	sp,sp,40
 40002b0:	f800283a 	ret

040002b4 <puts>:
 40002b4:	00810034 	movhi	r2,1024
 40002b8:	109c0304 	addi	r2,r2,28684
 40002bc:	200b883a 	mov	r5,r4
 40002c0:	11000017 	ldw	r4,0(r2)
 40002c4:	40002141 	jmpi	4000214 <_puts_r>

040002c8 <strlen>:
 40002c8:	208000cc 	andi	r2,r4,3
 40002cc:	2011883a 	mov	r8,r4
 40002d0:	1000161e 	bne	r2,zero,400032c <strlen+0x64>
 40002d4:	20c00017 	ldw	r3,0(r4)
 40002d8:	017fbff4 	movhi	r5,65279
 40002dc:	297fbfc4 	addi	r5,r5,-257
 40002e0:	01e02074 	movhi	r7,32897
 40002e4:	39e02004 	addi	r7,r7,-32640
 40002e8:	1945883a 	add	r2,r3,r5
 40002ec:	11c4703a 	and	r2,r2,r7
 40002f0:	00c6303a 	nor	r3,zero,r3
 40002f4:	1886703a 	and	r3,r3,r2
 40002f8:	18000c1e 	bne	r3,zero,400032c <strlen+0x64>
 40002fc:	280d883a 	mov	r6,r5
 4000300:	380b883a 	mov	r5,r7
 4000304:	21000104 	addi	r4,r4,4
 4000308:	20800017 	ldw	r2,0(r4)
 400030c:	1187883a 	add	r3,r2,r6
 4000310:	1946703a 	and	r3,r3,r5
 4000314:	0084303a 	nor	r2,zero,r2
 4000318:	10c4703a 	and	r2,r2,r3
 400031c:	103ff926 	beq	r2,zero,4000304 <strlen+0x3c>
 4000320:	20800007 	ldb	r2,0(r4)
 4000324:	10000326 	beq	r2,zero,4000334 <strlen+0x6c>
 4000328:	21000044 	addi	r4,r4,1
 400032c:	20800007 	ldb	r2,0(r4)
 4000330:	103ffd1e 	bne	r2,zero,4000328 <strlen+0x60>
 4000334:	2205c83a 	sub	r2,r4,r8
 4000338:	f800283a 	ret

0400033c <__sfvwrite_r>:
 400033c:	30800217 	ldw	r2,8(r6)
 4000340:	defff504 	addi	sp,sp,-44
 4000344:	df000915 	stw	fp,36(sp)
 4000348:	dd800715 	stw	r22,28(sp)
 400034c:	dc800315 	stw	r18,12(sp)
 4000350:	dfc00a15 	stw	ra,40(sp)
 4000354:	ddc00815 	stw	r23,32(sp)
 4000358:	dd400615 	stw	r21,24(sp)
 400035c:	dd000515 	stw	r20,20(sp)
 4000360:	dcc00415 	stw	r19,16(sp)
 4000364:	dc400215 	stw	r17,8(sp)
 4000368:	dc000115 	stw	r16,4(sp)
 400036c:	302d883a 	mov	r22,r6
 4000370:	2039883a 	mov	fp,r4
 4000374:	2825883a 	mov	r18,r5
 4000378:	10001c26 	beq	r2,zero,40003ec <__sfvwrite_r+0xb0>
 400037c:	29c0030b 	ldhu	r7,12(r5)
 4000380:	3880020c 	andi	r2,r7,8
 4000384:	10002726 	beq	r2,zero,4000424 <__sfvwrite_r+0xe8>
 4000388:	28800417 	ldw	r2,16(r5)
 400038c:	10002526 	beq	r2,zero,4000424 <__sfvwrite_r+0xe8>
 4000390:	3880008c 	andi	r2,r7,2
 4000394:	b5400017 	ldw	r21,0(r22)
 4000398:	10002826 	beq	r2,zero,400043c <__sfvwrite_r+0x100>
 400039c:	0021883a 	mov	r16,zero
 40003a0:	0023883a 	mov	r17,zero
 40003a4:	880d883a 	mov	r6,r17
 40003a8:	e009883a 	mov	r4,fp
 40003ac:	00810004 	movi	r2,1024
 40003b0:	80006e26 	beq	r16,zero,400056c <__sfvwrite_r+0x230>
 40003b4:	800f883a 	mov	r7,r16
 40003b8:	91400717 	ldw	r5,28(r18)
 40003bc:	1400012e 	bgeu	r2,r16,40003c4 <__sfvwrite_r+0x88>
 40003c0:	100f883a 	mov	r7,r2
 40003c4:	90c00917 	ldw	r3,36(r18)
 40003c8:	183ee83a 	callr	r3
 40003cc:	1007883a 	mov	r3,r2
 40003d0:	80a1c83a 	sub	r16,r16,r2
 40003d4:	88a3883a 	add	r17,r17,r2
 40003d8:	00806d0e 	bge	zero,r2,4000590 <__sfvwrite_r+0x254>
 40003dc:	b0800217 	ldw	r2,8(r22)
 40003e0:	10c5c83a 	sub	r2,r2,r3
 40003e4:	b0800215 	stw	r2,8(r22)
 40003e8:	103fee1e 	bne	r2,zero,40003a4 <__sfvwrite_r+0x68>
 40003ec:	0009883a 	mov	r4,zero
 40003f0:	2005883a 	mov	r2,r4
 40003f4:	dfc00a17 	ldw	ra,40(sp)
 40003f8:	df000917 	ldw	fp,36(sp)
 40003fc:	ddc00817 	ldw	r23,32(sp)
 4000400:	dd800717 	ldw	r22,28(sp)
 4000404:	dd400617 	ldw	r21,24(sp)
 4000408:	dd000517 	ldw	r20,20(sp)
 400040c:	dcc00417 	ldw	r19,16(sp)
 4000410:	dc800317 	ldw	r18,12(sp)
 4000414:	dc400217 	ldw	r17,8(sp)
 4000418:	dc000117 	ldw	r16,4(sp)
 400041c:	dec00b04 	addi	sp,sp,44
 4000420:	f800283a 	ret
 4000424:	40017e00 	call	40017e0 <__swsetup_r>
 4000428:	1000e41e 	bne	r2,zero,40007bc <__sfvwrite_r+0x480>
 400042c:	91c0030b 	ldhu	r7,12(r18)
 4000430:	b5400017 	ldw	r21,0(r22)
 4000434:	3880008c 	andi	r2,r7,2
 4000438:	103fd81e 	bne	r2,zero,400039c <__sfvwrite_r+0x60>
 400043c:	3880004c 	andi	r2,r7,1
 4000440:	1005003a 	cmpeq	r2,r2,zero
 4000444:	10005726 	beq	r2,zero,40005a4 <__sfvwrite_r+0x268>
 4000448:	0029883a 	mov	r20,zero
 400044c:	002f883a 	mov	r23,zero
 4000450:	a0004226 	beq	r20,zero,400055c <__sfvwrite_r+0x220>
 4000454:	3880800c 	andi	r2,r7,512
 4000458:	94000217 	ldw	r16,8(r18)
 400045c:	10008b26 	beq	r2,zero,400068c <__sfvwrite_r+0x350>
 4000460:	800d883a 	mov	r6,r16
 4000464:	a400a536 	bltu	r20,r16,40006fc <__sfvwrite_r+0x3c0>
 4000468:	3881200c 	andi	r2,r7,1152
 400046c:	10002726 	beq	r2,zero,400050c <__sfvwrite_r+0x1d0>
 4000470:	90800517 	ldw	r2,20(r18)
 4000474:	92000417 	ldw	r8,16(r18)
 4000478:	91400017 	ldw	r5,0(r18)
 400047c:	1087883a 	add	r3,r2,r2
 4000480:	1887883a 	add	r3,r3,r2
 4000484:	1808d7fa 	srli	r4,r3,31
 4000488:	2a21c83a 	sub	r16,r5,r8
 400048c:	80800044 	addi	r2,r16,1
 4000490:	20c9883a 	add	r4,r4,r3
 4000494:	2027d07a 	srai	r19,r4,1
 4000498:	a085883a 	add	r2,r20,r2
 400049c:	980d883a 	mov	r6,r19
 40004a0:	9880022e 	bgeu	r19,r2,40004ac <__sfvwrite_r+0x170>
 40004a4:	1027883a 	mov	r19,r2
 40004a8:	100d883a 	mov	r6,r2
 40004ac:	3881000c 	andi	r2,r7,1024
 40004b0:	1000b826 	beq	r2,zero,4000794 <__sfvwrite_r+0x458>
 40004b4:	300b883a 	mov	r5,r6
 40004b8:	e009883a 	mov	r4,fp
 40004bc:	40007d80 	call	40007d8 <_malloc_r>
 40004c0:	10003126 	beq	r2,zero,4000588 <__sfvwrite_r+0x24c>
 40004c4:	91400417 	ldw	r5,16(r18)
 40004c8:	1009883a 	mov	r4,r2
 40004cc:	800d883a 	mov	r6,r16
 40004d0:	1023883a 	mov	r17,r2
 40004d4:	4000ffc0 	call	4000ffc <memcpy>
 40004d8:	90c0030b 	ldhu	r3,12(r18)
 40004dc:	00beffc4 	movi	r2,-1025
 40004e0:	1886703a 	and	r3,r3,r2
 40004e4:	18c02014 	ori	r3,r3,128
 40004e8:	90c0030d 	sth	r3,12(r18)
 40004ec:	9c07c83a 	sub	r3,r19,r16
 40004f0:	8c05883a 	add	r2,r17,r16
 40004f4:	a00d883a 	mov	r6,r20
 40004f8:	a021883a 	mov	r16,r20
 40004fc:	90800015 	stw	r2,0(r18)
 4000500:	90c00215 	stw	r3,8(r18)
 4000504:	94400415 	stw	r17,16(r18)
 4000508:	94c00515 	stw	r19,20(r18)
 400050c:	91000017 	ldw	r4,0(r18)
 4000510:	b80b883a 	mov	r5,r23
 4000514:	a023883a 	mov	r17,r20
 4000518:	400109c0 	call	400109c <memmove>
 400051c:	90c00217 	ldw	r3,8(r18)
 4000520:	90800017 	ldw	r2,0(r18)
 4000524:	a027883a 	mov	r19,r20
 4000528:	1c07c83a 	sub	r3,r3,r16
 400052c:	1405883a 	add	r2,r2,r16
 4000530:	90c00215 	stw	r3,8(r18)
 4000534:	a021883a 	mov	r16,r20
 4000538:	90800015 	stw	r2,0(r18)
 400053c:	b0800217 	ldw	r2,8(r22)
 4000540:	1405c83a 	sub	r2,r2,r16
 4000544:	b0800215 	stw	r2,8(r22)
 4000548:	103fa826 	beq	r2,zero,40003ec <__sfvwrite_r+0xb0>
 400054c:	a469c83a 	sub	r20,r20,r17
 4000550:	91c0030b 	ldhu	r7,12(r18)
 4000554:	bcef883a 	add	r23,r23,r19
 4000558:	a03fbe1e 	bne	r20,zero,4000454 <__sfvwrite_r+0x118>
 400055c:	adc00017 	ldw	r23,0(r21)
 4000560:	ad000117 	ldw	r20,4(r21)
 4000564:	ad400204 	addi	r21,r21,8
 4000568:	003fb906 	br	4000450 <__sfvwrite_r+0x114>
 400056c:	ac400017 	ldw	r17,0(r21)
 4000570:	ac000117 	ldw	r16,4(r21)
 4000574:	ad400204 	addi	r21,r21,8
 4000578:	003f8a06 	br	40003a4 <__sfvwrite_r+0x68>
 400057c:	91400417 	ldw	r5,16(r18)
 4000580:	e009883a 	mov	r4,fp
 4000584:	4001f380 	call	4001f38 <_free_r>
 4000588:	00800304 	movi	r2,12
 400058c:	e0800015 	stw	r2,0(fp)
 4000590:	9080030b 	ldhu	r2,12(r18)
 4000594:	013fffc4 	movi	r4,-1
 4000598:	10801014 	ori	r2,r2,64
 400059c:	9080030d 	sth	r2,12(r18)
 40005a0:	003f9306 	br	40003f0 <__sfvwrite_r+0xb4>
 40005a4:	0027883a 	mov	r19,zero
 40005a8:	002f883a 	mov	r23,zero
 40005ac:	d8000015 	stw	zero,0(sp)
 40005b0:	0029883a 	mov	r20,zero
 40005b4:	98001e26 	beq	r19,zero,4000630 <__sfvwrite_r+0x2f4>
 40005b8:	d8c00017 	ldw	r3,0(sp)
 40005bc:	1804c03a 	cmpne	r2,r3,zero
 40005c0:	10005e26 	beq	r2,zero,400073c <__sfvwrite_r+0x400>
 40005c4:	9821883a 	mov	r16,r19
 40005c8:	a4c0012e 	bgeu	r20,r19,40005d0 <__sfvwrite_r+0x294>
 40005cc:	a021883a 	mov	r16,r20
 40005d0:	91000017 	ldw	r4,0(r18)
 40005d4:	90800417 	ldw	r2,16(r18)
 40005d8:	91800217 	ldw	r6,8(r18)
 40005dc:	91c00517 	ldw	r7,20(r18)
 40005e0:	1100022e 	bgeu	r2,r4,40005ec <__sfvwrite_r+0x2b0>
 40005e4:	31e3883a 	add	r17,r6,r7
 40005e8:	8c001616 	blt	r17,r16,4000644 <__sfvwrite_r+0x308>
 40005ec:	81c03816 	blt	r16,r7,40006d0 <__sfvwrite_r+0x394>
 40005f0:	90c00917 	ldw	r3,36(r18)
 40005f4:	91400717 	ldw	r5,28(r18)
 40005f8:	e009883a 	mov	r4,fp
 40005fc:	b80d883a 	mov	r6,r23
 4000600:	183ee83a 	callr	r3
 4000604:	1023883a 	mov	r17,r2
 4000608:	00bfe10e 	bge	zero,r2,4000590 <__sfvwrite_r+0x254>
 400060c:	a469c83a 	sub	r20,r20,r17
 4000610:	a0001826 	beq	r20,zero,4000674 <__sfvwrite_r+0x338>
 4000614:	b0800217 	ldw	r2,8(r22)
 4000618:	1445c83a 	sub	r2,r2,r17
 400061c:	b0800215 	stw	r2,8(r22)
 4000620:	103f7226 	beq	r2,zero,40003ec <__sfvwrite_r+0xb0>
 4000624:	9c67c83a 	sub	r19,r19,r17
 4000628:	bc6f883a 	add	r23,r23,r17
 400062c:	983fe21e 	bne	r19,zero,40005b8 <__sfvwrite_r+0x27c>
 4000630:	adc00017 	ldw	r23,0(r21)
 4000634:	acc00117 	ldw	r19,4(r21)
 4000638:	ad400204 	addi	r21,r21,8
 400063c:	d8000015 	stw	zero,0(sp)
 4000640:	003fdc06 	br	40005b4 <__sfvwrite_r+0x278>
 4000644:	b80b883a 	mov	r5,r23
 4000648:	880d883a 	mov	r6,r17
 400064c:	400109c0 	call	400109c <memmove>
 4000650:	90c00017 	ldw	r3,0(r18)
 4000654:	e009883a 	mov	r4,fp
 4000658:	900b883a 	mov	r5,r18
 400065c:	1c47883a 	add	r3,r3,r17
 4000660:	90c00015 	stw	r3,0(r18)
 4000664:	400191c0 	call	400191c <_fflush_r>
 4000668:	103fc91e 	bne	r2,zero,4000590 <__sfvwrite_r+0x254>
 400066c:	a469c83a 	sub	r20,r20,r17
 4000670:	a03fe81e 	bne	r20,zero,4000614 <__sfvwrite_r+0x2d8>
 4000674:	e009883a 	mov	r4,fp
 4000678:	900b883a 	mov	r5,r18
 400067c:	400191c0 	call	400191c <_fflush_r>
 4000680:	103fc31e 	bne	r2,zero,4000590 <__sfvwrite_r+0x254>
 4000684:	d8000015 	stw	zero,0(sp)
 4000688:	003fe206 	br	4000614 <__sfvwrite_r+0x2d8>
 400068c:	91000017 	ldw	r4,0(r18)
 4000690:	90800417 	ldw	r2,16(r18)
 4000694:	1100022e 	bgeu	r2,r4,40006a0 <__sfvwrite_r+0x364>
 4000698:	8023883a 	mov	r17,r16
 400069c:	85003136 	bltu	r16,r20,4000764 <__sfvwrite_r+0x428>
 40006a0:	91c00517 	ldw	r7,20(r18)
 40006a4:	a1c01836 	bltu	r20,r7,4000708 <__sfvwrite_r+0x3cc>
 40006a8:	90c00917 	ldw	r3,36(r18)
 40006ac:	91400717 	ldw	r5,28(r18)
 40006b0:	e009883a 	mov	r4,fp
 40006b4:	b80d883a 	mov	r6,r23
 40006b8:	183ee83a 	callr	r3
 40006bc:	1021883a 	mov	r16,r2
 40006c0:	00bfb30e 	bge	zero,r2,4000590 <__sfvwrite_r+0x254>
 40006c4:	1023883a 	mov	r17,r2
 40006c8:	1027883a 	mov	r19,r2
 40006cc:	003f9b06 	br	400053c <__sfvwrite_r+0x200>
 40006d0:	b80b883a 	mov	r5,r23
 40006d4:	800d883a 	mov	r6,r16
 40006d8:	400109c0 	call	400109c <memmove>
 40006dc:	90c00217 	ldw	r3,8(r18)
 40006e0:	90800017 	ldw	r2,0(r18)
 40006e4:	8023883a 	mov	r17,r16
 40006e8:	1c07c83a 	sub	r3,r3,r16
 40006ec:	1405883a 	add	r2,r2,r16
 40006f0:	90c00215 	stw	r3,8(r18)
 40006f4:	90800015 	stw	r2,0(r18)
 40006f8:	003fc406 	br	400060c <__sfvwrite_r+0x2d0>
 40006fc:	a00d883a 	mov	r6,r20
 4000700:	a021883a 	mov	r16,r20
 4000704:	003f8106 	br	400050c <__sfvwrite_r+0x1d0>
 4000708:	b80b883a 	mov	r5,r23
 400070c:	a00d883a 	mov	r6,r20
 4000710:	400109c0 	call	400109c <memmove>
 4000714:	90c00217 	ldw	r3,8(r18)
 4000718:	90800017 	ldw	r2,0(r18)
 400071c:	a021883a 	mov	r16,r20
 4000720:	1d07c83a 	sub	r3,r3,r20
 4000724:	1505883a 	add	r2,r2,r20
 4000728:	a023883a 	mov	r17,r20
 400072c:	a027883a 	mov	r19,r20
 4000730:	90c00215 	stw	r3,8(r18)
 4000734:	90800015 	stw	r2,0(r18)
 4000738:	003f8006 	br	400053c <__sfvwrite_r+0x200>
 400073c:	b809883a 	mov	r4,r23
 4000740:	01400284 	movi	r5,10
 4000744:	980d883a 	mov	r6,r19
 4000748:	4000f180 	call	4000f18 <memchr>
 400074c:	10001726 	beq	r2,zero,40007ac <__sfvwrite_r+0x470>
 4000750:	15c5c83a 	sub	r2,r2,r23
 4000754:	15000044 	addi	r20,r2,1
 4000758:	00800044 	movi	r2,1
 400075c:	d8800015 	stw	r2,0(sp)
 4000760:	003f9806 	br	40005c4 <__sfvwrite_r+0x288>
 4000764:	b80b883a 	mov	r5,r23
 4000768:	800d883a 	mov	r6,r16
 400076c:	400109c0 	call	400109c <memmove>
 4000770:	90c00017 	ldw	r3,0(r18)
 4000774:	e009883a 	mov	r4,fp
 4000778:	900b883a 	mov	r5,r18
 400077c:	1c07883a 	add	r3,r3,r16
 4000780:	90c00015 	stw	r3,0(r18)
 4000784:	8027883a 	mov	r19,r16
 4000788:	400191c0 	call	400191c <_fflush_r>
 400078c:	103f6b26 	beq	r2,zero,400053c <__sfvwrite_r+0x200>
 4000790:	003f7f06 	br	4000590 <__sfvwrite_r+0x254>
 4000794:	400b883a 	mov	r5,r8
 4000798:	e009883a 	mov	r4,fp
 400079c:	400117c0 	call	400117c <_realloc_r>
 40007a0:	103f7626 	beq	r2,zero,400057c <__sfvwrite_r+0x240>
 40007a4:	1023883a 	mov	r17,r2
 40007a8:	003f5006 	br	40004ec <__sfvwrite_r+0x1b0>
 40007ac:	00c00044 	movi	r3,1
 40007b0:	9d000044 	addi	r20,r19,1
 40007b4:	d8c00015 	stw	r3,0(sp)
 40007b8:	003f8206 	br	40005c4 <__sfvwrite_r+0x288>
 40007bc:	9080030b 	ldhu	r2,12(r18)
 40007c0:	00c00244 	movi	r3,9
 40007c4:	013fffc4 	movi	r4,-1
 40007c8:	10801014 	ori	r2,r2,64
 40007cc:	9080030d 	sth	r2,12(r18)
 40007d0:	e0c00015 	stw	r3,0(fp)
 40007d4:	003f0606 	br	40003f0 <__sfvwrite_r+0xb4>

040007d8 <_malloc_r>:
 40007d8:	defff604 	addi	sp,sp,-40
 40007dc:	28c002c4 	addi	r3,r5,11
 40007e0:	00800584 	movi	r2,22
 40007e4:	dc800215 	stw	r18,8(sp)
 40007e8:	dfc00915 	stw	ra,36(sp)
 40007ec:	df000815 	stw	fp,32(sp)
 40007f0:	ddc00715 	stw	r23,28(sp)
 40007f4:	dd800615 	stw	r22,24(sp)
 40007f8:	dd400515 	stw	r21,20(sp)
 40007fc:	dd000415 	stw	r20,16(sp)
 4000800:	dcc00315 	stw	r19,12(sp)
 4000804:	dc400115 	stw	r17,4(sp)
 4000808:	dc000015 	stw	r16,0(sp)
 400080c:	2025883a 	mov	r18,r4
 4000810:	10c01236 	bltu	r2,r3,400085c <_malloc_r+0x84>
 4000814:	04400404 	movi	r17,16
 4000818:	8940142e 	bgeu	r17,r5,400086c <_malloc_r+0x94>
 400081c:	00800304 	movi	r2,12
 4000820:	0007883a 	mov	r3,zero
 4000824:	90800015 	stw	r2,0(r18)
 4000828:	1805883a 	mov	r2,r3
 400082c:	dfc00917 	ldw	ra,36(sp)
 4000830:	df000817 	ldw	fp,32(sp)
 4000834:	ddc00717 	ldw	r23,28(sp)
 4000838:	dd800617 	ldw	r22,24(sp)
 400083c:	dd400517 	ldw	r21,20(sp)
 4000840:	dd000417 	ldw	r20,16(sp)
 4000844:	dcc00317 	ldw	r19,12(sp)
 4000848:	dc800217 	ldw	r18,8(sp)
 400084c:	dc400117 	ldw	r17,4(sp)
 4000850:	dc000017 	ldw	r16,0(sp)
 4000854:	dec00a04 	addi	sp,sp,40
 4000858:	f800283a 	ret
 400085c:	00bffe04 	movi	r2,-8
 4000860:	18a2703a 	and	r17,r3,r2
 4000864:	883fed16 	blt	r17,zero,400081c <_malloc_r+0x44>
 4000868:	897fec36 	bltu	r17,r5,400081c <_malloc_r+0x44>
 400086c:	9009883a 	mov	r4,r18
 4000870:	40031a80 	call	40031a8 <__malloc_lock>
 4000874:	00807dc4 	movi	r2,503
 4000878:	14402b2e 	bgeu	r2,r17,4000928 <_malloc_r+0x150>
 400087c:	8806d27a 	srli	r3,r17,9
 4000880:	18003f1e 	bne	r3,zero,4000980 <_malloc_r+0x1a8>
 4000884:	880cd0fa 	srli	r6,r17,3
 4000888:	300490fa 	slli	r2,r6,3
 400088c:	02c10034 	movhi	r11,1024
 4000890:	5ad67f04 	addi	r11,r11,23036
 4000894:	12cb883a 	add	r5,r2,r11
 4000898:	2c000317 	ldw	r16,12(r5)
 400089c:	580f883a 	mov	r7,r11
 40008a0:	2c00041e 	bne	r5,r16,40008b4 <_malloc_r+0xdc>
 40008a4:	00000a06 	br	40008d0 <_malloc_r+0xf8>
 40008a8:	1800860e 	bge	r3,zero,4000ac4 <_malloc_r+0x2ec>
 40008ac:	84000317 	ldw	r16,12(r16)
 40008b0:	2c000726 	beq	r5,r16,40008d0 <_malloc_r+0xf8>
 40008b4:	80800117 	ldw	r2,4(r16)
 40008b8:	00ffff04 	movi	r3,-4
 40008bc:	10c8703a 	and	r4,r2,r3
 40008c0:	2447c83a 	sub	r3,r4,r17
 40008c4:	008003c4 	movi	r2,15
 40008c8:	10fff70e 	bge	r2,r3,40008a8 <_malloc_r+0xd0>
 40008cc:	31bfffc4 	addi	r6,r6,-1
 40008d0:	32400044 	addi	r9,r6,1
 40008d4:	02810034 	movhi	r10,1024
 40008d8:	52968104 	addi	r10,r10,23044
 40008dc:	54000217 	ldw	r16,8(r10)
 40008e0:	8280a026 	beq	r16,r10,4000b64 <_malloc_r+0x38c>
 40008e4:	80800117 	ldw	r2,4(r16)
 40008e8:	00ffff04 	movi	r3,-4
 40008ec:	10ca703a 	and	r5,r2,r3
 40008f0:	2c4dc83a 	sub	r6,r5,r17
 40008f4:	008003c4 	movi	r2,15
 40008f8:	11808316 	blt	r2,r6,4000b08 <_malloc_r+0x330>
 40008fc:	52800315 	stw	r10,12(r10)
 4000900:	52800215 	stw	r10,8(r10)
 4000904:	30002916 	blt	r6,zero,40009ac <_malloc_r+0x1d4>
 4000908:	8147883a 	add	r3,r16,r5
 400090c:	18800117 	ldw	r2,4(r3)
 4000910:	9009883a 	mov	r4,r18
 4000914:	10800054 	ori	r2,r2,1
 4000918:	18800115 	stw	r2,4(r3)
 400091c:	40031c80 	call	40031c8 <__malloc_unlock>
 4000920:	80c00204 	addi	r3,r16,8
 4000924:	003fc006 	br	4000828 <_malloc_r+0x50>
 4000928:	02c10034 	movhi	r11,1024
 400092c:	5ad67f04 	addi	r11,r11,23036
 4000930:	8ac5883a 	add	r2,r17,r11
 4000934:	14000317 	ldw	r16,12(r2)
 4000938:	580f883a 	mov	r7,r11
 400093c:	8806d0fa 	srli	r3,r17,3
 4000940:	14006c26 	beq	r2,r16,4000af4 <_malloc_r+0x31c>
 4000944:	80c00117 	ldw	r3,4(r16)
 4000948:	00bfff04 	movi	r2,-4
 400094c:	81800317 	ldw	r6,12(r16)
 4000950:	1886703a 	and	r3,r3,r2
 4000954:	80c7883a 	add	r3,r16,r3
 4000958:	18800117 	ldw	r2,4(r3)
 400095c:	81400217 	ldw	r5,8(r16)
 4000960:	9009883a 	mov	r4,r18
 4000964:	10800054 	ori	r2,r2,1
 4000968:	18800115 	stw	r2,4(r3)
 400096c:	31400215 	stw	r5,8(r6)
 4000970:	29800315 	stw	r6,12(r5)
 4000974:	40031c80 	call	40031c8 <__malloc_unlock>
 4000978:	80c00204 	addi	r3,r16,8
 400097c:	003faa06 	br	4000828 <_malloc_r+0x50>
 4000980:	00800104 	movi	r2,4
 4000984:	10c0052e 	bgeu	r2,r3,400099c <_malloc_r+0x1c4>
 4000988:	00800504 	movi	r2,20
 400098c:	10c07836 	bltu	r2,r3,4000b70 <_malloc_r+0x398>
 4000990:	198016c4 	addi	r6,r3,91
 4000994:	300490fa 	slli	r2,r6,3
 4000998:	003fbc06 	br	400088c <_malloc_r+0xb4>
 400099c:	8804d1ba 	srli	r2,r17,6
 40009a0:	11800e04 	addi	r6,r2,56
 40009a4:	300490fa 	slli	r2,r6,3
 40009a8:	003fb806 	br	400088c <_malloc_r+0xb4>
 40009ac:	00807fc4 	movi	r2,511
 40009b0:	1140bb36 	bltu	r2,r5,4000ca0 <_malloc_r+0x4c8>
 40009b4:	2806d0fa 	srli	r3,r5,3
 40009b8:	573ffe04 	addi	fp,r10,-8
 40009bc:	00800044 	movi	r2,1
 40009c0:	180890fa 	slli	r4,r3,3
 40009c4:	1807d0ba 	srai	r3,r3,2
 40009c8:	e1c00117 	ldw	r7,4(fp)
 40009cc:	5909883a 	add	r4,r11,r4
 40009d0:	21400217 	ldw	r5,8(r4)
 40009d4:	10c4983a 	sll	r2,r2,r3
 40009d8:	81000315 	stw	r4,12(r16)
 40009dc:	81400215 	stw	r5,8(r16)
 40009e0:	388eb03a 	or	r7,r7,r2
 40009e4:	2c000315 	stw	r16,12(r5)
 40009e8:	24000215 	stw	r16,8(r4)
 40009ec:	e1c00115 	stw	r7,4(fp)
 40009f0:	4807883a 	mov	r3,r9
 40009f4:	4800cd16 	blt	r9,zero,4000d2c <_malloc_r+0x554>
 40009f8:	1807d0ba 	srai	r3,r3,2
 40009fc:	00800044 	movi	r2,1
 4000a00:	10c8983a 	sll	r4,r2,r3
 4000a04:	39004436 	bltu	r7,r4,4000b18 <_malloc_r+0x340>
 4000a08:	21c4703a 	and	r2,r4,r7
 4000a0c:	10000a1e 	bne	r2,zero,4000a38 <_malloc_r+0x260>
 4000a10:	2109883a 	add	r4,r4,r4
 4000a14:	00bfff04 	movi	r2,-4
 4000a18:	4884703a 	and	r2,r9,r2
 4000a1c:	3906703a 	and	r3,r7,r4
 4000a20:	12400104 	addi	r9,r2,4
 4000a24:	1800041e 	bne	r3,zero,4000a38 <_malloc_r+0x260>
 4000a28:	2109883a 	add	r4,r4,r4
 4000a2c:	3904703a 	and	r2,r7,r4
 4000a30:	4a400104 	addi	r9,r9,4
 4000a34:	103ffc26 	beq	r2,zero,4000a28 <_malloc_r+0x250>
 4000a38:	480490fa 	slli	r2,r9,3
 4000a3c:	4819883a 	mov	r12,r9
 4000a40:	023fff04 	movi	r8,-4
 4000a44:	589b883a 	add	r13,r11,r2
 4000a48:	6807883a 	mov	r3,r13
 4000a4c:	014003c4 	movi	r5,15
 4000a50:	1c000317 	ldw	r16,12(r3)
 4000a54:	1c00041e 	bne	r3,r16,4000a68 <_malloc_r+0x290>
 4000a58:	0000a706 	br	4000cf8 <_malloc_r+0x520>
 4000a5c:	3000ab0e 	bge	r6,zero,4000d0c <_malloc_r+0x534>
 4000a60:	84000317 	ldw	r16,12(r16)
 4000a64:	1c00a426 	beq	r3,r16,4000cf8 <_malloc_r+0x520>
 4000a68:	80800117 	ldw	r2,4(r16)
 4000a6c:	1204703a 	and	r2,r2,r8
 4000a70:	144dc83a 	sub	r6,r2,r17
 4000a74:	29bff90e 	bge	r5,r6,4000a5c <_malloc_r+0x284>
 4000a78:	81000317 	ldw	r4,12(r16)
 4000a7c:	80c00217 	ldw	r3,8(r16)
 4000a80:	89400054 	ori	r5,r17,1
 4000a84:	8445883a 	add	r2,r16,r17
 4000a88:	20c00215 	stw	r3,8(r4)
 4000a8c:	19000315 	stw	r4,12(r3)
 4000a90:	81400115 	stw	r5,4(r16)
 4000a94:	1187883a 	add	r3,r2,r6
 4000a98:	31000054 	ori	r4,r6,1
 4000a9c:	50800315 	stw	r2,12(r10)
 4000aa0:	50800215 	stw	r2,8(r10)
 4000aa4:	19800015 	stw	r6,0(r3)
 4000aa8:	11000115 	stw	r4,4(r2)
 4000aac:	12800215 	stw	r10,8(r2)
 4000ab0:	12800315 	stw	r10,12(r2)
 4000ab4:	9009883a 	mov	r4,r18
 4000ab8:	40031c80 	call	40031c8 <__malloc_unlock>
 4000abc:	80c00204 	addi	r3,r16,8
 4000ac0:	003f5906 	br	4000828 <_malloc_r+0x50>
 4000ac4:	8109883a 	add	r4,r16,r4
 4000ac8:	20800117 	ldw	r2,4(r4)
 4000acc:	80c00217 	ldw	r3,8(r16)
 4000ad0:	81400317 	ldw	r5,12(r16)
 4000ad4:	10800054 	ori	r2,r2,1
 4000ad8:	20800115 	stw	r2,4(r4)
 4000adc:	28c00215 	stw	r3,8(r5)
 4000ae0:	19400315 	stw	r5,12(r3)
 4000ae4:	9009883a 	mov	r4,r18
 4000ae8:	40031c80 	call	40031c8 <__malloc_unlock>
 4000aec:	80c00204 	addi	r3,r16,8
 4000af0:	003f4d06 	br	4000828 <_malloc_r+0x50>
 4000af4:	80800204 	addi	r2,r16,8
 4000af8:	14000317 	ldw	r16,12(r2)
 4000afc:	143f911e 	bne	r2,r16,4000944 <_malloc_r+0x16c>
 4000b00:	1a400084 	addi	r9,r3,2
 4000b04:	003f7306 	br	40008d4 <_malloc_r+0xfc>
 4000b08:	88c00054 	ori	r3,r17,1
 4000b0c:	8445883a 	add	r2,r16,r17
 4000b10:	80c00115 	stw	r3,4(r16)
 4000b14:	003fdf06 	br	4000a94 <_malloc_r+0x2bc>
 4000b18:	e4000217 	ldw	r16,8(fp)
 4000b1c:	00bfff04 	movi	r2,-4
 4000b20:	80c00117 	ldw	r3,4(r16)
 4000b24:	802d883a 	mov	r22,r16
 4000b28:	18aa703a 	and	r21,r3,r2
 4000b2c:	ac401636 	bltu	r21,r17,4000b88 <_malloc_r+0x3b0>
 4000b30:	ac49c83a 	sub	r4,r21,r17
 4000b34:	008003c4 	movi	r2,15
 4000b38:	1100130e 	bge	r2,r4,4000b88 <_malloc_r+0x3b0>
 4000b3c:	88800054 	ori	r2,r17,1
 4000b40:	8447883a 	add	r3,r16,r17
 4000b44:	80800115 	stw	r2,4(r16)
 4000b48:	20800054 	ori	r2,r4,1
 4000b4c:	18800115 	stw	r2,4(r3)
 4000b50:	e0c00215 	stw	r3,8(fp)
 4000b54:	9009883a 	mov	r4,r18
 4000b58:	40031c80 	call	40031c8 <__malloc_unlock>
 4000b5c:	80c00204 	addi	r3,r16,8
 4000b60:	003f3106 	br	4000828 <_malloc_r+0x50>
 4000b64:	39c00117 	ldw	r7,4(r7)
 4000b68:	573ffe04 	addi	fp,r10,-8
 4000b6c:	003fa006 	br	40009f0 <_malloc_r+0x218>
 4000b70:	00801504 	movi	r2,84
 4000b74:	10c06736 	bltu	r2,r3,4000d14 <_malloc_r+0x53c>
 4000b78:	8804d33a 	srli	r2,r17,12
 4000b7c:	11801b84 	addi	r6,r2,110
 4000b80:	300490fa 	slli	r2,r6,3
 4000b84:	003f4106 	br	400088c <_malloc_r+0xb4>
 4000b88:	d0a6a017 	ldw	r2,-25984(gp)
 4000b8c:	d0e00317 	ldw	r3,-32756(gp)
 4000b90:	053fffc4 	movi	r20,-1
 4000b94:	10800404 	addi	r2,r2,16
 4000b98:	88a7883a 	add	r19,r17,r2
 4000b9c:	1d000326 	beq	r3,r20,4000bac <_malloc_r+0x3d4>
 4000ba0:	98c3ffc4 	addi	r3,r19,4095
 4000ba4:	00bc0004 	movi	r2,-4096
 4000ba8:	18a6703a 	and	r19,r3,r2
 4000bac:	9009883a 	mov	r4,r18
 4000bb0:	980b883a 	mov	r5,r19
 4000bb4:	40017700 	call	4001770 <_sbrk_r>
 4000bb8:	1009883a 	mov	r4,r2
 4000bbc:	15000426 	beq	r2,r20,4000bd0 <_malloc_r+0x3f8>
 4000bc0:	854b883a 	add	r5,r16,r21
 4000bc4:	1029883a 	mov	r20,r2
 4000bc8:	11405a2e 	bgeu	r2,r5,4000d34 <_malloc_r+0x55c>
 4000bcc:	87000c26 	beq	r16,fp,4000c00 <_malloc_r+0x428>
 4000bd0:	e4000217 	ldw	r16,8(fp)
 4000bd4:	80c00117 	ldw	r3,4(r16)
 4000bd8:	00bfff04 	movi	r2,-4
 4000bdc:	1884703a 	and	r2,r3,r2
 4000be0:	14400336 	bltu	r2,r17,4000bf0 <_malloc_r+0x418>
 4000be4:	1449c83a 	sub	r4,r2,r17
 4000be8:	008003c4 	movi	r2,15
 4000bec:	113fd316 	blt	r2,r4,4000b3c <_malloc_r+0x364>
 4000bf0:	9009883a 	mov	r4,r18
 4000bf4:	40031c80 	call	40031c8 <__malloc_unlock>
 4000bf8:	0007883a 	mov	r3,zero
 4000bfc:	003f0a06 	br	4000828 <_malloc_r+0x50>
 4000c00:	05c10074 	movhi	r23,1025
 4000c04:	bde2ad04 	addi	r23,r23,-30028
 4000c08:	b8800017 	ldw	r2,0(r23)
 4000c0c:	988d883a 	add	r6,r19,r2
 4000c10:	b9800015 	stw	r6,0(r23)
 4000c14:	d0e00317 	ldw	r3,-32756(gp)
 4000c18:	00bfffc4 	movi	r2,-1
 4000c1c:	18808e26 	beq	r3,r2,4000e58 <_malloc_r+0x680>
 4000c20:	2145c83a 	sub	r2,r4,r5
 4000c24:	3085883a 	add	r2,r6,r2
 4000c28:	b8800015 	stw	r2,0(r23)
 4000c2c:	20c001cc 	andi	r3,r4,7
 4000c30:	18005f1e 	bne	r3,zero,4000db0 <_malloc_r+0x5d8>
 4000c34:	000b883a 	mov	r5,zero
 4000c38:	a4c5883a 	add	r2,r20,r19
 4000c3c:	1083ffcc 	andi	r2,r2,4095
 4000c40:	00c40004 	movi	r3,4096
 4000c44:	1887c83a 	sub	r3,r3,r2
 4000c48:	28e7883a 	add	r19,r5,r3
 4000c4c:	9009883a 	mov	r4,r18
 4000c50:	980b883a 	mov	r5,r19
 4000c54:	40017700 	call	4001770 <_sbrk_r>
 4000c58:	1007883a 	mov	r3,r2
 4000c5c:	00bfffc4 	movi	r2,-1
 4000c60:	18807a26 	beq	r3,r2,4000e4c <_malloc_r+0x674>
 4000c64:	1d05c83a 	sub	r2,r3,r20
 4000c68:	9885883a 	add	r2,r19,r2
 4000c6c:	10c00054 	ori	r3,r2,1
 4000c70:	b8800017 	ldw	r2,0(r23)
 4000c74:	a021883a 	mov	r16,r20
 4000c78:	a0c00115 	stw	r3,4(r20)
 4000c7c:	9885883a 	add	r2,r19,r2
 4000c80:	b8800015 	stw	r2,0(r23)
 4000c84:	e5000215 	stw	r20,8(fp)
 4000c88:	b7003626 	beq	r22,fp,4000d64 <_malloc_r+0x58c>
 4000c8c:	018003c4 	movi	r6,15
 4000c90:	35404b36 	bltu	r6,r21,4000dc0 <_malloc_r+0x5e8>
 4000c94:	00800044 	movi	r2,1
 4000c98:	a0800115 	stw	r2,4(r20)
 4000c9c:	003fcd06 	br	4000bd4 <_malloc_r+0x3fc>
 4000ca0:	2808d27a 	srli	r4,r5,9
 4000ca4:	2000371e 	bne	r4,zero,4000d84 <_malloc_r+0x5ac>
 4000ca8:	2808d0fa 	srli	r4,r5,3
 4000cac:	200690fa 	slli	r3,r4,3
 4000cb0:	1ad1883a 	add	r8,r3,r11
 4000cb4:	41800217 	ldw	r6,8(r8)
 4000cb8:	41805b26 	beq	r8,r6,4000e28 <_malloc_r+0x650>
 4000cbc:	30800117 	ldw	r2,4(r6)
 4000cc0:	00ffff04 	movi	r3,-4
 4000cc4:	10c4703a 	and	r2,r2,r3
 4000cc8:	2880022e 	bgeu	r5,r2,4000cd4 <_malloc_r+0x4fc>
 4000ccc:	31800217 	ldw	r6,8(r6)
 4000cd0:	41bffa1e 	bne	r8,r6,4000cbc <_malloc_r+0x4e4>
 4000cd4:	32000317 	ldw	r8,12(r6)
 4000cd8:	39c00117 	ldw	r7,4(r7)
 4000cdc:	82000315 	stw	r8,12(r16)
 4000ce0:	81800215 	stw	r6,8(r16)
 4000ce4:	07010034 	movhi	fp,1024
 4000ce8:	e7167f04 	addi	fp,fp,23036
 4000cec:	34000315 	stw	r16,12(r6)
 4000cf0:	44000215 	stw	r16,8(r8)
 4000cf4:	003f3e06 	br	40009f0 <_malloc_r+0x218>
 4000cf8:	63000044 	addi	r12,r12,1
 4000cfc:	608000cc 	andi	r2,r12,3
 4000d00:	10005d26 	beq	r2,zero,4000e78 <_malloc_r+0x6a0>
 4000d04:	18c00204 	addi	r3,r3,8
 4000d08:	003f5106 	br	4000a50 <_malloc_r+0x278>
 4000d0c:	8089883a 	add	r4,r16,r2
 4000d10:	003f6d06 	br	4000ac8 <_malloc_r+0x2f0>
 4000d14:	00805504 	movi	r2,340
 4000d18:	10c02036 	bltu	r2,r3,4000d9c <_malloc_r+0x5c4>
 4000d1c:	8804d3fa 	srli	r2,r17,15
 4000d20:	11801dc4 	addi	r6,r2,119
 4000d24:	300490fa 	slli	r2,r6,3
 4000d28:	003ed806 	br	400088c <_malloc_r+0xb4>
 4000d2c:	48c000c4 	addi	r3,r9,3
 4000d30:	003f3106 	br	40009f8 <_malloc_r+0x220>
 4000d34:	05c10074 	movhi	r23,1025
 4000d38:	bde2ad04 	addi	r23,r23,-30028
 4000d3c:	b8800017 	ldw	r2,0(r23)
 4000d40:	988d883a 	add	r6,r19,r2
 4000d44:	b9800015 	stw	r6,0(r23)
 4000d48:	293fb21e 	bne	r5,r4,4000c14 <_malloc_r+0x43c>
 4000d4c:	2083ffcc 	andi	r2,r4,4095
 4000d50:	103fb01e 	bne	r2,zero,4000c14 <_malloc_r+0x43c>
 4000d54:	e4000217 	ldw	r16,8(fp)
 4000d58:	9d45883a 	add	r2,r19,r21
 4000d5c:	10800054 	ori	r2,r2,1
 4000d60:	80800115 	stw	r2,4(r16)
 4000d64:	b8c00017 	ldw	r3,0(r23)
 4000d68:	d0a6a117 	ldw	r2,-25980(gp)
 4000d6c:	10c0012e 	bgeu	r2,r3,4000d74 <_malloc_r+0x59c>
 4000d70:	d0e6a115 	stw	r3,-25980(gp)
 4000d74:	d0a6a217 	ldw	r2,-25976(gp)
 4000d78:	10ff962e 	bgeu	r2,r3,4000bd4 <_malloc_r+0x3fc>
 4000d7c:	d0e6a215 	stw	r3,-25976(gp)
 4000d80:	003f9406 	br	4000bd4 <_malloc_r+0x3fc>
 4000d84:	00800104 	movi	r2,4
 4000d88:	11001e36 	bltu	r2,r4,4000e04 <_malloc_r+0x62c>
 4000d8c:	2804d1ba 	srli	r2,r5,6
 4000d90:	11000e04 	addi	r4,r2,56
 4000d94:	200690fa 	slli	r3,r4,3
 4000d98:	003fc506 	br	4000cb0 <_malloc_r+0x4d8>
 4000d9c:	00815504 	movi	r2,1364
 4000da0:	10c01d2e 	bgeu	r2,r3,4000e18 <_malloc_r+0x640>
 4000da4:	01801f84 	movi	r6,126
 4000da8:	0080fc04 	movi	r2,1008
 4000dac:	003eb706 	br	400088c <_malloc_r+0xb4>
 4000db0:	00800204 	movi	r2,8
 4000db4:	10cbc83a 	sub	r5,r2,r3
 4000db8:	2169883a 	add	r20,r4,r5
 4000dbc:	003f9e06 	br	4000c38 <_malloc_r+0x460>
 4000dc0:	00bffe04 	movi	r2,-8
 4000dc4:	a93ffd04 	addi	r4,r21,-12
 4000dc8:	2088703a 	and	r4,r4,r2
 4000dcc:	b10b883a 	add	r5,r22,r4
 4000dd0:	00c00144 	movi	r3,5
 4000dd4:	28c00215 	stw	r3,8(r5)
 4000dd8:	28c00115 	stw	r3,4(r5)
 4000ddc:	b0800117 	ldw	r2,4(r22)
 4000de0:	1080004c 	andi	r2,r2,1
 4000de4:	2084b03a 	or	r2,r4,r2
 4000de8:	b0800115 	stw	r2,4(r22)
 4000dec:	313fdd2e 	bgeu	r6,r4,4000d64 <_malloc_r+0x58c>
 4000df0:	b1400204 	addi	r5,r22,8
 4000df4:	9009883a 	mov	r4,r18
 4000df8:	4001f380 	call	4001f38 <_free_r>
 4000dfc:	e4000217 	ldw	r16,8(fp)
 4000e00:	003fd806 	br	4000d64 <_malloc_r+0x58c>
 4000e04:	00800504 	movi	r2,20
 4000e08:	11001536 	bltu	r2,r4,4000e60 <_malloc_r+0x688>
 4000e0c:	210016c4 	addi	r4,r4,91
 4000e10:	200690fa 	slli	r3,r4,3
 4000e14:	003fa606 	br	4000cb0 <_malloc_r+0x4d8>
 4000e18:	8804d4ba 	srli	r2,r17,18
 4000e1c:	11801f04 	addi	r6,r2,124
 4000e20:	300490fa 	slli	r2,r6,3
 4000e24:	003e9906 	br	400088c <_malloc_r+0xb4>
 4000e28:	2009d0ba 	srai	r4,r4,2
 4000e2c:	01410034 	movhi	r5,1024
 4000e30:	29567f04 	addi	r5,r5,23036
 4000e34:	00c00044 	movi	r3,1
 4000e38:	28800117 	ldw	r2,4(r5)
 4000e3c:	1906983a 	sll	r3,r3,r4
 4000e40:	10c4b03a 	or	r2,r2,r3
 4000e44:	28800115 	stw	r2,4(r5)
 4000e48:	003fa306 	br	4000cd8 <_malloc_r+0x500>
 4000e4c:	0027883a 	mov	r19,zero
 4000e50:	00c00044 	movi	r3,1
 4000e54:	003f8606 	br	4000c70 <_malloc_r+0x498>
 4000e58:	d1200315 	stw	r4,-32756(gp)
 4000e5c:	003f7306 	br	4000c2c <_malloc_r+0x454>
 4000e60:	00801504 	movi	r2,84
 4000e64:	11001936 	bltu	r2,r4,4000ecc <_malloc_r+0x6f4>
 4000e68:	2804d33a 	srli	r2,r5,12
 4000e6c:	11001b84 	addi	r4,r2,110
 4000e70:	200690fa 	slli	r3,r4,3
 4000e74:	003f8e06 	br	4000cb0 <_malloc_r+0x4d8>
 4000e78:	480b883a 	mov	r5,r9
 4000e7c:	6807883a 	mov	r3,r13
 4000e80:	288000cc 	andi	r2,r5,3
 4000e84:	18fffe04 	addi	r3,r3,-8
 4000e88:	297fffc4 	addi	r5,r5,-1
 4000e8c:	10001526 	beq	r2,zero,4000ee4 <_malloc_r+0x70c>
 4000e90:	18800217 	ldw	r2,8(r3)
 4000e94:	10fffa26 	beq	r2,r3,4000e80 <_malloc_r+0x6a8>
 4000e98:	2109883a 	add	r4,r4,r4
 4000e9c:	393f1e36 	bltu	r7,r4,4000b18 <_malloc_r+0x340>
 4000ea0:	203f1d26 	beq	r4,zero,4000b18 <_malloc_r+0x340>
 4000ea4:	21c4703a 	and	r2,r4,r7
 4000ea8:	10000226 	beq	r2,zero,4000eb4 <_malloc_r+0x6dc>
 4000eac:	6013883a 	mov	r9,r12
 4000eb0:	003ee106 	br	4000a38 <_malloc_r+0x260>
 4000eb4:	2109883a 	add	r4,r4,r4
 4000eb8:	3904703a 	and	r2,r7,r4
 4000ebc:	63000104 	addi	r12,r12,4
 4000ec0:	103ffc26 	beq	r2,zero,4000eb4 <_malloc_r+0x6dc>
 4000ec4:	6013883a 	mov	r9,r12
 4000ec8:	003edb06 	br	4000a38 <_malloc_r+0x260>
 4000ecc:	00805504 	movi	r2,340
 4000ed0:	11000836 	bltu	r2,r4,4000ef4 <_malloc_r+0x71c>
 4000ed4:	2804d3fa 	srli	r2,r5,15
 4000ed8:	11001dc4 	addi	r4,r2,119
 4000edc:	200690fa 	slli	r3,r4,3
 4000ee0:	003f7306 	br	4000cb0 <_malloc_r+0x4d8>
 4000ee4:	0104303a 	nor	r2,zero,r4
 4000ee8:	388e703a 	and	r7,r7,r2
 4000eec:	e1c00115 	stw	r7,4(fp)
 4000ef0:	003fe906 	br	4000e98 <_malloc_r+0x6c0>
 4000ef4:	00815504 	movi	r2,1364
 4000ef8:	1100032e 	bgeu	r2,r4,4000f08 <_malloc_r+0x730>
 4000efc:	01001f84 	movi	r4,126
 4000f00:	00c0fc04 	movi	r3,1008
 4000f04:	003f6a06 	br	4000cb0 <_malloc_r+0x4d8>
 4000f08:	2804d4ba 	srli	r2,r5,18
 4000f0c:	11001f04 	addi	r4,r2,124
 4000f10:	200690fa 	slli	r3,r4,3
 4000f14:	003f6606 	br	4000cb0 <_malloc_r+0x4d8>

04000f18 <memchr>:
 4000f18:	008000c4 	movi	r2,3
 4000f1c:	29403fcc 	andi	r5,r5,255
 4000f20:	2007883a 	mov	r3,r4
 4000f24:	1180022e 	bgeu	r2,r6,4000f30 <memchr+0x18>
 4000f28:	2084703a 	and	r2,r4,r2
 4000f2c:	10000b26 	beq	r2,zero,4000f5c <memchr+0x44>
 4000f30:	313fffc4 	addi	r4,r6,-1
 4000f34:	3000051e 	bne	r6,zero,4000f4c <memchr+0x34>
 4000f38:	00002c06 	br	4000fec <memchr+0xd4>
 4000f3c:	213fffc4 	addi	r4,r4,-1
 4000f40:	00bfffc4 	movi	r2,-1
 4000f44:	18c00044 	addi	r3,r3,1
 4000f48:	20802826 	beq	r4,r2,4000fec <memchr+0xd4>
 4000f4c:	18800003 	ldbu	r2,0(r3)
 4000f50:	28bffa1e 	bne	r5,r2,4000f3c <memchr+0x24>
 4000f54:	1805883a 	mov	r2,r3
 4000f58:	f800283a 	ret
 4000f5c:	0011883a 	mov	r8,zero
 4000f60:	0007883a 	mov	r3,zero
 4000f64:	01c00104 	movi	r7,4
 4000f68:	4004923a 	slli	r2,r8,8
 4000f6c:	18c00044 	addi	r3,r3,1
 4000f70:	1151883a 	add	r8,r2,r5
 4000f74:	19fffc1e 	bne	r3,r7,4000f68 <memchr+0x50>
 4000f78:	02bfbff4 	movhi	r10,65279
 4000f7c:	52bfbfc4 	addi	r10,r10,-257
 4000f80:	02602074 	movhi	r9,32897
 4000f84:	4a602004 	addi	r9,r9,-32640
 4000f88:	02c000c4 	movi	r11,3
 4000f8c:	20800017 	ldw	r2,0(r4)
 4000f90:	31bfff04 	addi	r6,r6,-4
 4000f94:	200f883a 	mov	r7,r4
 4000f98:	1204f03a 	xor	r2,r2,r8
 4000f9c:	1287883a 	add	r3,r2,r10
 4000fa0:	1a46703a 	and	r3,r3,r9
 4000fa4:	0084303a 	nor	r2,zero,r2
 4000fa8:	10c4703a 	and	r2,r2,r3
 4000fac:	10000b26 	beq	r2,zero,4000fdc <memchr+0xc4>
 4000fb0:	20800003 	ldbu	r2,0(r4)
 4000fb4:	28800f26 	beq	r5,r2,4000ff4 <memchr+0xdc>
 4000fb8:	20800043 	ldbu	r2,1(r4)
 4000fbc:	21c00044 	addi	r7,r4,1
 4000fc0:	28800c26 	beq	r5,r2,4000ff4 <memchr+0xdc>
 4000fc4:	20800083 	ldbu	r2,2(r4)
 4000fc8:	21c00084 	addi	r7,r4,2
 4000fcc:	28800926 	beq	r5,r2,4000ff4 <memchr+0xdc>
 4000fd0:	208000c3 	ldbu	r2,3(r4)
 4000fd4:	21c000c4 	addi	r7,r4,3
 4000fd8:	28800626 	beq	r5,r2,4000ff4 <memchr+0xdc>
 4000fdc:	21000104 	addi	r4,r4,4
 4000fe0:	59bfea36 	bltu	r11,r6,4000f8c <memchr+0x74>
 4000fe4:	2007883a 	mov	r3,r4
 4000fe8:	003fd106 	br	4000f30 <memchr+0x18>
 4000fec:	0005883a 	mov	r2,zero
 4000ff0:	f800283a 	ret
 4000ff4:	3805883a 	mov	r2,r7
 4000ff8:	f800283a 	ret

04000ffc <memcpy>:
 4000ffc:	01c003c4 	movi	r7,15
 4001000:	2007883a 	mov	r3,r4
 4001004:	3980032e 	bgeu	r7,r6,4001014 <memcpy+0x18>
 4001008:	2904b03a 	or	r2,r5,r4
 400100c:	108000cc 	andi	r2,r2,3
 4001010:	10000926 	beq	r2,zero,4001038 <memcpy+0x3c>
 4001014:	30000626 	beq	r6,zero,4001030 <memcpy+0x34>
 4001018:	30cd883a 	add	r6,r6,r3
 400101c:	28800003 	ldbu	r2,0(r5)
 4001020:	29400044 	addi	r5,r5,1
 4001024:	18800005 	stb	r2,0(r3)
 4001028:	18c00044 	addi	r3,r3,1
 400102c:	30fffb1e 	bne	r6,r3,400101c <memcpy+0x20>
 4001030:	2005883a 	mov	r2,r4
 4001034:	f800283a 	ret
 4001038:	3811883a 	mov	r8,r7
 400103c:	200f883a 	mov	r7,r4
 4001040:	28c00017 	ldw	r3,0(r5)
 4001044:	31bffc04 	addi	r6,r6,-16
 4001048:	38c00015 	stw	r3,0(r7)
 400104c:	28800117 	ldw	r2,4(r5)
 4001050:	38800115 	stw	r2,4(r7)
 4001054:	28c00217 	ldw	r3,8(r5)
 4001058:	38c00215 	stw	r3,8(r7)
 400105c:	28800317 	ldw	r2,12(r5)
 4001060:	29400404 	addi	r5,r5,16
 4001064:	38800315 	stw	r2,12(r7)
 4001068:	39c00404 	addi	r7,r7,16
 400106c:	41bff436 	bltu	r8,r6,4001040 <memcpy+0x44>
 4001070:	008000c4 	movi	r2,3
 4001074:	1180072e 	bgeu	r2,r6,4001094 <memcpy+0x98>
 4001078:	1007883a 	mov	r3,r2
 400107c:	28800017 	ldw	r2,0(r5)
 4001080:	31bfff04 	addi	r6,r6,-4
 4001084:	29400104 	addi	r5,r5,4
 4001088:	38800015 	stw	r2,0(r7)
 400108c:	39c00104 	addi	r7,r7,4
 4001090:	19bffa36 	bltu	r3,r6,400107c <memcpy+0x80>
 4001094:	3807883a 	mov	r3,r7
 4001098:	003fde06 	br	4001014 <memcpy+0x18>

0400109c <memmove>:
 400109c:	2807883a 	mov	r3,r5
 40010a0:	2011883a 	mov	r8,r4
 40010a4:	29000c2e 	bgeu	r5,r4,40010d8 <memmove+0x3c>
 40010a8:	298f883a 	add	r7,r5,r6
 40010ac:	21c00a2e 	bgeu	r4,r7,40010d8 <memmove+0x3c>
 40010b0:	30000726 	beq	r6,zero,40010d0 <memmove+0x34>
 40010b4:	2187883a 	add	r3,r4,r6
 40010b8:	198dc83a 	sub	r6,r3,r6
 40010bc:	39ffffc4 	addi	r7,r7,-1
 40010c0:	38800003 	ldbu	r2,0(r7)
 40010c4:	18ffffc4 	addi	r3,r3,-1
 40010c8:	18800005 	stb	r2,0(r3)
 40010cc:	19bffb1e 	bne	r3,r6,40010bc <memmove+0x20>
 40010d0:	2005883a 	mov	r2,r4
 40010d4:	f800283a 	ret
 40010d8:	01c003c4 	movi	r7,15
 40010dc:	39800a36 	bltu	r7,r6,4001108 <memmove+0x6c>
 40010e0:	303ffb26 	beq	r6,zero,40010d0 <memmove+0x34>
 40010e4:	400f883a 	mov	r7,r8
 40010e8:	320d883a 	add	r6,r6,r8
 40010ec:	28800003 	ldbu	r2,0(r5)
 40010f0:	29400044 	addi	r5,r5,1
 40010f4:	38800005 	stb	r2,0(r7)
 40010f8:	39c00044 	addi	r7,r7,1
 40010fc:	39bffb1e 	bne	r7,r6,40010ec <memmove+0x50>
 4001100:	2005883a 	mov	r2,r4
 4001104:	f800283a 	ret
 4001108:	1904b03a 	or	r2,r3,r4
 400110c:	108000cc 	andi	r2,r2,3
 4001110:	103ff31e 	bne	r2,zero,40010e0 <memmove+0x44>
 4001114:	3811883a 	mov	r8,r7
 4001118:	180b883a 	mov	r5,r3
 400111c:	200f883a 	mov	r7,r4
 4001120:	28c00017 	ldw	r3,0(r5)
 4001124:	31bffc04 	addi	r6,r6,-16
 4001128:	38c00015 	stw	r3,0(r7)
 400112c:	28800117 	ldw	r2,4(r5)
 4001130:	38800115 	stw	r2,4(r7)
 4001134:	28c00217 	ldw	r3,8(r5)
 4001138:	38c00215 	stw	r3,8(r7)
 400113c:	28800317 	ldw	r2,12(r5)
 4001140:	29400404 	addi	r5,r5,16
 4001144:	38800315 	stw	r2,12(r7)
 4001148:	39c00404 	addi	r7,r7,16
 400114c:	41bff436 	bltu	r8,r6,4001120 <memmove+0x84>
 4001150:	008000c4 	movi	r2,3
 4001154:	1180072e 	bgeu	r2,r6,4001174 <memmove+0xd8>
 4001158:	1007883a 	mov	r3,r2
 400115c:	28800017 	ldw	r2,0(r5)
 4001160:	31bfff04 	addi	r6,r6,-4
 4001164:	29400104 	addi	r5,r5,4
 4001168:	38800015 	stw	r2,0(r7)
 400116c:	39c00104 	addi	r7,r7,4
 4001170:	19bffa36 	bltu	r3,r6,400115c <memmove+0xc0>
 4001174:	3811883a 	mov	r8,r7
 4001178:	003fd906 	br	40010e0 <memmove+0x44>

0400117c <_realloc_r>:
 400117c:	defff404 	addi	sp,sp,-48
 4001180:	dd800815 	stw	r22,32(sp)
 4001184:	dc800415 	stw	r18,16(sp)
 4001188:	dc400315 	stw	r17,12(sp)
 400118c:	dfc00b15 	stw	ra,44(sp)
 4001190:	df000a15 	stw	fp,40(sp)
 4001194:	ddc00915 	stw	r23,36(sp)
 4001198:	dd400715 	stw	r21,28(sp)
 400119c:	dd000615 	stw	r20,24(sp)
 40011a0:	dcc00515 	stw	r19,20(sp)
 40011a4:	dc000215 	stw	r16,8(sp)
 40011a8:	2825883a 	mov	r18,r5
 40011ac:	3023883a 	mov	r17,r6
 40011b0:	202d883a 	mov	r22,r4
 40011b4:	2800c926 	beq	r5,zero,40014dc <_realloc_r+0x360>
 40011b8:	40031a80 	call	40031a8 <__malloc_lock>
 40011bc:	943ffe04 	addi	r16,r18,-8
 40011c0:	88c002c4 	addi	r3,r17,11
 40011c4:	00800584 	movi	r2,22
 40011c8:	82000117 	ldw	r8,4(r16)
 40011cc:	10c01b2e 	bgeu	r2,r3,400123c <_realloc_r+0xc0>
 40011d0:	00bffe04 	movi	r2,-8
 40011d4:	188e703a 	and	r7,r3,r2
 40011d8:	3839883a 	mov	fp,r7
 40011dc:	38001a16 	blt	r7,zero,4001248 <_realloc_r+0xcc>
 40011e0:	e4401936 	bltu	fp,r17,4001248 <_realloc_r+0xcc>
 40011e4:	013fff04 	movi	r4,-4
 40011e8:	4126703a 	and	r19,r8,r4
 40011ec:	99c02616 	blt	r19,r7,4001288 <_realloc_r+0x10c>
 40011f0:	802b883a 	mov	r21,r16
 40011f4:	9829883a 	mov	r20,r19
 40011f8:	84000204 	addi	r16,r16,8
 40011fc:	a80f883a 	mov	r7,r21
 4001200:	a70dc83a 	sub	r6,r20,fp
 4001204:	008003c4 	movi	r2,15
 4001208:	1180c136 	bltu	r2,r6,4001510 <_realloc_r+0x394>
 400120c:	38800117 	ldw	r2,4(r7)
 4001210:	a549883a 	add	r4,r20,r21
 4001214:	1080004c 	andi	r2,r2,1
 4001218:	a084b03a 	or	r2,r20,r2
 400121c:	38800115 	stw	r2,4(r7)
 4001220:	20c00117 	ldw	r3,4(r4)
 4001224:	18c00054 	ori	r3,r3,1
 4001228:	20c00115 	stw	r3,4(r4)
 400122c:	b009883a 	mov	r4,r22
 4001230:	40031c80 	call	40031c8 <__malloc_unlock>
 4001234:	8023883a 	mov	r17,r16
 4001238:	00000606 	br	4001254 <_realloc_r+0xd8>
 400123c:	01c00404 	movi	r7,16
 4001240:	3839883a 	mov	fp,r7
 4001244:	e47fe72e 	bgeu	fp,r17,40011e4 <_realloc_r+0x68>
 4001248:	00800304 	movi	r2,12
 400124c:	0023883a 	mov	r17,zero
 4001250:	b0800015 	stw	r2,0(r22)
 4001254:	8805883a 	mov	r2,r17
 4001258:	dfc00b17 	ldw	ra,44(sp)
 400125c:	df000a17 	ldw	fp,40(sp)
 4001260:	ddc00917 	ldw	r23,36(sp)
 4001264:	dd800817 	ldw	r22,32(sp)
 4001268:	dd400717 	ldw	r21,28(sp)
 400126c:	dd000617 	ldw	r20,24(sp)
 4001270:	dcc00517 	ldw	r19,20(sp)
 4001274:	dc800417 	ldw	r18,16(sp)
 4001278:	dc400317 	ldw	r17,12(sp)
 400127c:	dc000217 	ldw	r16,8(sp)
 4001280:	dec00c04 	addi	sp,sp,48
 4001284:	f800283a 	ret
 4001288:	00810034 	movhi	r2,1024
 400128c:	10967f04 	addi	r2,r2,23036
 4001290:	12400217 	ldw	r9,8(r2)
 4001294:	84cd883a 	add	r6,r16,r19
 4001298:	802b883a 	mov	r21,r16
 400129c:	3240b926 	beq	r6,r9,4001584 <_realloc_r+0x408>
 40012a0:	31400117 	ldw	r5,4(r6)
 40012a4:	00bfff84 	movi	r2,-2
 40012a8:	2884703a 	and	r2,r5,r2
 40012ac:	1185883a 	add	r2,r2,r6
 40012b0:	10c00117 	ldw	r3,4(r2)
 40012b4:	18c0004c 	andi	r3,r3,1
 40012b8:	1807003a 	cmpeq	r3,r3,zero
 40012bc:	1800a326 	beq	r3,zero,400154c <_realloc_r+0x3d0>
 40012c0:	2908703a 	and	r4,r5,r4
 40012c4:	9929883a 	add	r20,r19,r4
 40012c8:	a1c0a30e 	bge	r20,r7,4001558 <_realloc_r+0x3dc>
 40012cc:	4080004c 	andi	r2,r8,1
 40012d0:	1000551e 	bne	r2,zero,4001428 <_realloc_r+0x2ac>
 40012d4:	80800017 	ldw	r2,0(r16)
 40012d8:	80afc83a 	sub	r23,r16,r2
 40012dc:	b8c00117 	ldw	r3,4(r23)
 40012e0:	00bfff04 	movi	r2,-4
 40012e4:	1884703a 	and	r2,r3,r2
 40012e8:	30002e26 	beq	r6,zero,40013a4 <_realloc_r+0x228>
 40012ec:	3240b926 	beq	r6,r9,40015d4 <_realloc_r+0x458>
 40012f0:	98a9883a 	add	r20,r19,r2
 40012f4:	2509883a 	add	r4,r4,r20
 40012f8:	d9000015 	stw	r4,0(sp)
 40012fc:	21c02a16 	blt	r4,r7,40013a8 <_realloc_r+0x22c>
 4001300:	30800317 	ldw	r2,12(r6)
 4001304:	30c00217 	ldw	r3,8(r6)
 4001308:	01400904 	movi	r5,36
 400130c:	99bfff04 	addi	r6,r19,-4
 4001310:	18800315 	stw	r2,12(r3)
 4001314:	10c00215 	stw	r3,8(r2)
 4001318:	b9000317 	ldw	r4,12(r23)
 400131c:	b8800217 	ldw	r2,8(r23)
 4001320:	b82b883a 	mov	r21,r23
 4001324:	bc000204 	addi	r16,r23,8
 4001328:	20800215 	stw	r2,8(r4)
 400132c:	11000315 	stw	r4,12(r2)
 4001330:	2980e436 	bltu	r5,r6,40016c4 <_realloc_r+0x548>
 4001334:	008004c4 	movi	r2,19
 4001338:	9009883a 	mov	r4,r18
 400133c:	8011883a 	mov	r8,r16
 4001340:	11800f2e 	bgeu	r2,r6,4001380 <_realloc_r+0x204>
 4001344:	90800017 	ldw	r2,0(r18)
 4001348:	ba000404 	addi	r8,r23,16
 400134c:	91000204 	addi	r4,r18,8
 4001350:	b8800215 	stw	r2,8(r23)
 4001354:	90c00117 	ldw	r3,4(r18)
 4001358:	008006c4 	movi	r2,27
 400135c:	b8c00315 	stw	r3,12(r23)
 4001360:	1180072e 	bgeu	r2,r6,4001380 <_realloc_r+0x204>
 4001364:	90c00217 	ldw	r3,8(r18)
 4001368:	ba000604 	addi	r8,r23,24
 400136c:	91000404 	addi	r4,r18,16
 4001370:	b8c00415 	stw	r3,16(r23)
 4001374:	90800317 	ldw	r2,12(r18)
 4001378:	b8800515 	stw	r2,20(r23)
 400137c:	3140e726 	beq	r6,r5,400171c <_realloc_r+0x5a0>
 4001380:	20800017 	ldw	r2,0(r4)
 4001384:	dd000017 	ldw	r20,0(sp)
 4001388:	b80f883a 	mov	r7,r23
 400138c:	40800015 	stw	r2,0(r8)
 4001390:	20c00117 	ldw	r3,4(r4)
 4001394:	40c00115 	stw	r3,4(r8)
 4001398:	20800217 	ldw	r2,8(r4)
 400139c:	40800215 	stw	r2,8(r8)
 40013a0:	003f9706 	br	4001200 <_realloc_r+0x84>
 40013a4:	98a9883a 	add	r20,r19,r2
 40013a8:	a1c01f16 	blt	r20,r7,4001428 <_realloc_r+0x2ac>
 40013ac:	b8c00317 	ldw	r3,12(r23)
 40013b0:	b8800217 	ldw	r2,8(r23)
 40013b4:	99bfff04 	addi	r6,r19,-4
 40013b8:	01400904 	movi	r5,36
 40013bc:	b82b883a 	mov	r21,r23
 40013c0:	18800215 	stw	r2,8(r3)
 40013c4:	10c00315 	stw	r3,12(r2)
 40013c8:	bc000204 	addi	r16,r23,8
 40013cc:	2980c336 	bltu	r5,r6,40016dc <_realloc_r+0x560>
 40013d0:	008004c4 	movi	r2,19
 40013d4:	9009883a 	mov	r4,r18
 40013d8:	8011883a 	mov	r8,r16
 40013dc:	11800f2e 	bgeu	r2,r6,400141c <_realloc_r+0x2a0>
 40013e0:	90800017 	ldw	r2,0(r18)
 40013e4:	ba000404 	addi	r8,r23,16
 40013e8:	91000204 	addi	r4,r18,8
 40013ec:	b8800215 	stw	r2,8(r23)
 40013f0:	90c00117 	ldw	r3,4(r18)
 40013f4:	008006c4 	movi	r2,27
 40013f8:	b8c00315 	stw	r3,12(r23)
 40013fc:	1180072e 	bgeu	r2,r6,400141c <_realloc_r+0x2a0>
 4001400:	90c00217 	ldw	r3,8(r18)
 4001404:	ba000604 	addi	r8,r23,24
 4001408:	91000404 	addi	r4,r18,16
 400140c:	b8c00415 	stw	r3,16(r23)
 4001410:	90800317 	ldw	r2,12(r18)
 4001414:	b8800515 	stw	r2,20(r23)
 4001418:	3140c726 	beq	r6,r5,4001738 <_realloc_r+0x5bc>
 400141c:	20800017 	ldw	r2,0(r4)
 4001420:	b80f883a 	mov	r7,r23
 4001424:	003fd906 	br	400138c <_realloc_r+0x210>
 4001428:	880b883a 	mov	r5,r17
 400142c:	b009883a 	mov	r4,r22
 4001430:	40007d80 	call	40007d8 <_malloc_r>
 4001434:	1023883a 	mov	r17,r2
 4001438:	10002526 	beq	r2,zero,40014d0 <_realloc_r+0x354>
 400143c:	80800117 	ldw	r2,4(r16)
 4001440:	00ffff84 	movi	r3,-2
 4001444:	893ffe04 	addi	r4,r17,-8
 4001448:	10c4703a 	and	r2,r2,r3
 400144c:	8085883a 	add	r2,r16,r2
 4001450:	20809526 	beq	r4,r2,40016a8 <_realloc_r+0x52c>
 4001454:	99bfff04 	addi	r6,r19,-4
 4001458:	01c00904 	movi	r7,36
 400145c:	39804536 	bltu	r7,r6,4001574 <_realloc_r+0x3f8>
 4001460:	008004c4 	movi	r2,19
 4001464:	9009883a 	mov	r4,r18
 4001468:	880b883a 	mov	r5,r17
 400146c:	11800f2e 	bgeu	r2,r6,40014ac <_realloc_r+0x330>
 4001470:	90800017 	ldw	r2,0(r18)
 4001474:	89400204 	addi	r5,r17,8
 4001478:	91000204 	addi	r4,r18,8
 400147c:	88800015 	stw	r2,0(r17)
 4001480:	90c00117 	ldw	r3,4(r18)
 4001484:	008006c4 	movi	r2,27
 4001488:	88c00115 	stw	r3,4(r17)
 400148c:	1180072e 	bgeu	r2,r6,40014ac <_realloc_r+0x330>
 4001490:	90c00217 	ldw	r3,8(r18)
 4001494:	89400404 	addi	r5,r17,16
 4001498:	91000404 	addi	r4,r18,16
 400149c:	88c00215 	stw	r3,8(r17)
 40014a0:	90800317 	ldw	r2,12(r18)
 40014a4:	88800315 	stw	r2,12(r17)
 40014a8:	31c09126 	beq	r6,r7,40016f0 <_realloc_r+0x574>
 40014ac:	20800017 	ldw	r2,0(r4)
 40014b0:	28800015 	stw	r2,0(r5)
 40014b4:	20c00117 	ldw	r3,4(r4)
 40014b8:	28c00115 	stw	r3,4(r5)
 40014bc:	20800217 	ldw	r2,8(r4)
 40014c0:	28800215 	stw	r2,8(r5)
 40014c4:	900b883a 	mov	r5,r18
 40014c8:	b009883a 	mov	r4,r22
 40014cc:	4001f380 	call	4001f38 <_free_r>
 40014d0:	b009883a 	mov	r4,r22
 40014d4:	40031c80 	call	40031c8 <__malloc_unlock>
 40014d8:	003f5e06 	br	4001254 <_realloc_r+0xd8>
 40014dc:	300b883a 	mov	r5,r6
 40014e0:	dfc00b17 	ldw	ra,44(sp)
 40014e4:	df000a17 	ldw	fp,40(sp)
 40014e8:	ddc00917 	ldw	r23,36(sp)
 40014ec:	dd800817 	ldw	r22,32(sp)
 40014f0:	dd400717 	ldw	r21,28(sp)
 40014f4:	dd000617 	ldw	r20,24(sp)
 40014f8:	dcc00517 	ldw	r19,20(sp)
 40014fc:	dc800417 	ldw	r18,16(sp)
 4001500:	dc400317 	ldw	r17,12(sp)
 4001504:	dc000217 	ldw	r16,8(sp)
 4001508:	dec00c04 	addi	sp,sp,48
 400150c:	40007d81 	jmpi	40007d8 <_malloc_r>
 4001510:	38800117 	ldw	r2,4(r7)
 4001514:	e54b883a 	add	r5,fp,r21
 4001518:	31000054 	ori	r4,r6,1
 400151c:	1080004c 	andi	r2,r2,1
 4001520:	1704b03a 	or	r2,r2,fp
 4001524:	38800115 	stw	r2,4(r7)
 4001528:	29000115 	stw	r4,4(r5)
 400152c:	2987883a 	add	r3,r5,r6
 4001530:	18800117 	ldw	r2,4(r3)
 4001534:	29400204 	addi	r5,r5,8
 4001538:	b009883a 	mov	r4,r22
 400153c:	10800054 	ori	r2,r2,1
 4001540:	18800115 	stw	r2,4(r3)
 4001544:	4001f380 	call	4001f38 <_free_r>
 4001548:	003f3806 	br	400122c <_realloc_r+0xb0>
 400154c:	000d883a 	mov	r6,zero
 4001550:	0009883a 	mov	r4,zero
 4001554:	003f5d06 	br	40012cc <_realloc_r+0x150>
 4001558:	30c00217 	ldw	r3,8(r6)
 400155c:	30800317 	ldw	r2,12(r6)
 4001560:	800f883a 	mov	r7,r16
 4001564:	84000204 	addi	r16,r16,8
 4001568:	10c00215 	stw	r3,8(r2)
 400156c:	18800315 	stw	r2,12(r3)
 4001570:	003f2306 	br	4001200 <_realloc_r+0x84>
 4001574:	8809883a 	mov	r4,r17
 4001578:	900b883a 	mov	r5,r18
 400157c:	400109c0 	call	400109c <memmove>
 4001580:	003fd006 	br	40014c4 <_realloc_r+0x348>
 4001584:	30800117 	ldw	r2,4(r6)
 4001588:	e0c00404 	addi	r3,fp,16
 400158c:	1108703a 	and	r4,r2,r4
 4001590:	9905883a 	add	r2,r19,r4
 4001594:	10ff4d16 	blt	r2,r3,40012cc <_realloc_r+0x150>
 4001598:	1705c83a 	sub	r2,r2,fp
 400159c:	870b883a 	add	r5,r16,fp
 40015a0:	10800054 	ori	r2,r2,1
 40015a4:	28800115 	stw	r2,4(r5)
 40015a8:	80c00117 	ldw	r3,4(r16)
 40015ac:	00810034 	movhi	r2,1024
 40015b0:	10967f04 	addi	r2,r2,23036
 40015b4:	b009883a 	mov	r4,r22
 40015b8:	18c0004c 	andi	r3,r3,1
 40015bc:	e0c6b03a 	or	r3,fp,r3
 40015c0:	11400215 	stw	r5,8(r2)
 40015c4:	80c00115 	stw	r3,4(r16)
 40015c8:	40031c80 	call	40031c8 <__malloc_unlock>
 40015cc:	84400204 	addi	r17,r16,8
 40015d0:	003f2006 	br	4001254 <_realloc_r+0xd8>
 40015d4:	98a9883a 	add	r20,r19,r2
 40015d8:	2509883a 	add	r4,r4,r20
 40015dc:	e0800404 	addi	r2,fp,16
 40015e0:	d9000115 	stw	r4,4(sp)
 40015e4:	20bf7016 	blt	r4,r2,40013a8 <_realloc_r+0x22c>
 40015e8:	b8c00317 	ldw	r3,12(r23)
 40015ec:	b8800217 	ldw	r2,8(r23)
 40015f0:	99bfff04 	addi	r6,r19,-4
 40015f4:	01400904 	movi	r5,36
 40015f8:	18800215 	stw	r2,8(r3)
 40015fc:	10c00315 	stw	r3,12(r2)
 4001600:	bc400204 	addi	r17,r23,8
 4001604:	29804136 	bltu	r5,r6,400170c <_realloc_r+0x590>
 4001608:	008004c4 	movi	r2,19
 400160c:	9009883a 	mov	r4,r18
 4001610:	880f883a 	mov	r7,r17
 4001614:	11800f2e 	bgeu	r2,r6,4001654 <_realloc_r+0x4d8>
 4001618:	90800017 	ldw	r2,0(r18)
 400161c:	b9c00404 	addi	r7,r23,16
 4001620:	91000204 	addi	r4,r18,8
 4001624:	b8800215 	stw	r2,8(r23)
 4001628:	90c00117 	ldw	r3,4(r18)
 400162c:	008006c4 	movi	r2,27
 4001630:	b8c00315 	stw	r3,12(r23)
 4001634:	1180072e 	bgeu	r2,r6,4001654 <_realloc_r+0x4d8>
 4001638:	90c00217 	ldw	r3,8(r18)
 400163c:	b9c00604 	addi	r7,r23,24
 4001640:	91000404 	addi	r4,r18,16
 4001644:	b8c00415 	stw	r3,16(r23)
 4001648:	90800317 	ldw	r2,12(r18)
 400164c:	b8800515 	stw	r2,20(r23)
 4001650:	31404026 	beq	r6,r5,4001754 <_realloc_r+0x5d8>
 4001654:	20800017 	ldw	r2,0(r4)
 4001658:	38800015 	stw	r2,0(r7)
 400165c:	20c00117 	ldw	r3,4(r4)
 4001660:	38c00115 	stw	r3,4(r7)
 4001664:	20800217 	ldw	r2,8(r4)
 4001668:	38800215 	stw	r2,8(r7)
 400166c:	d8c00117 	ldw	r3,4(sp)
 4001670:	bf0b883a 	add	r5,r23,fp
 4001674:	b009883a 	mov	r4,r22
 4001678:	1f05c83a 	sub	r2,r3,fp
 400167c:	10800054 	ori	r2,r2,1
 4001680:	28800115 	stw	r2,4(r5)
 4001684:	b8c00117 	ldw	r3,4(r23)
 4001688:	00810034 	movhi	r2,1024
 400168c:	10967f04 	addi	r2,r2,23036
 4001690:	11400215 	stw	r5,8(r2)
 4001694:	18c0004c 	andi	r3,r3,1
 4001698:	e0c6b03a 	or	r3,fp,r3
 400169c:	b8c00115 	stw	r3,4(r23)
 40016a0:	40031c80 	call	40031c8 <__malloc_unlock>
 40016a4:	003eeb06 	br	4001254 <_realloc_r+0xd8>
 40016a8:	20800117 	ldw	r2,4(r4)
 40016ac:	00ffff04 	movi	r3,-4
 40016b0:	800f883a 	mov	r7,r16
 40016b4:	10c4703a 	and	r2,r2,r3
 40016b8:	98a9883a 	add	r20,r19,r2
 40016bc:	84000204 	addi	r16,r16,8
 40016c0:	003ecf06 	br	4001200 <_realloc_r+0x84>
 40016c4:	900b883a 	mov	r5,r18
 40016c8:	8009883a 	mov	r4,r16
 40016cc:	400109c0 	call	400109c <memmove>
 40016d0:	dd000017 	ldw	r20,0(sp)
 40016d4:	b80f883a 	mov	r7,r23
 40016d8:	003ec906 	br	4001200 <_realloc_r+0x84>
 40016dc:	900b883a 	mov	r5,r18
 40016e0:	8009883a 	mov	r4,r16
 40016e4:	400109c0 	call	400109c <memmove>
 40016e8:	b80f883a 	mov	r7,r23
 40016ec:	003ec406 	br	4001200 <_realloc_r+0x84>
 40016f0:	90c00417 	ldw	r3,16(r18)
 40016f4:	89400604 	addi	r5,r17,24
 40016f8:	91000604 	addi	r4,r18,24
 40016fc:	88c00415 	stw	r3,16(r17)
 4001700:	90800517 	ldw	r2,20(r18)
 4001704:	88800515 	stw	r2,20(r17)
 4001708:	003f6806 	br	40014ac <_realloc_r+0x330>
 400170c:	900b883a 	mov	r5,r18
 4001710:	8809883a 	mov	r4,r17
 4001714:	400109c0 	call	400109c <memmove>
 4001718:	003fd406 	br	400166c <_realloc_r+0x4f0>
 400171c:	90c00417 	ldw	r3,16(r18)
 4001720:	91000604 	addi	r4,r18,24
 4001724:	ba000804 	addi	r8,r23,32
 4001728:	b8c00615 	stw	r3,24(r23)
 400172c:	90800517 	ldw	r2,20(r18)
 4001730:	b8800715 	stw	r2,28(r23)
 4001734:	003f1206 	br	4001380 <_realloc_r+0x204>
 4001738:	90c00417 	ldw	r3,16(r18)
 400173c:	91000604 	addi	r4,r18,24
 4001740:	ba000804 	addi	r8,r23,32
 4001744:	b8c00615 	stw	r3,24(r23)
 4001748:	90800517 	ldw	r2,20(r18)
 400174c:	b8800715 	stw	r2,28(r23)
 4001750:	003f3206 	br	400141c <_realloc_r+0x2a0>
 4001754:	90c00417 	ldw	r3,16(r18)
 4001758:	91000604 	addi	r4,r18,24
 400175c:	b9c00804 	addi	r7,r23,32
 4001760:	b8c00615 	stw	r3,24(r23)
 4001764:	90800517 	ldw	r2,20(r18)
 4001768:	b8800715 	stw	r2,28(r23)
 400176c:	003fb906 	br	4001654 <_realloc_r+0x4d8>

04001770 <_sbrk_r>:
 4001770:	defffd04 	addi	sp,sp,-12
 4001774:	dc000015 	stw	r16,0(sp)
 4001778:	04010074 	movhi	r16,1025
 400177c:	8422a604 	addi	r16,r16,-30056
 4001780:	dc400115 	stw	r17,4(sp)
 4001784:	80000015 	stw	zero,0(r16)
 4001788:	2023883a 	mov	r17,r4
 400178c:	2809883a 	mov	r4,r5
 4001790:	dfc00215 	stw	ra,8(sp)
 4001794:	40033c80 	call	40033c8 <sbrk>
 4001798:	1007883a 	mov	r3,r2
 400179c:	00bfffc4 	movi	r2,-1
 40017a0:	18800626 	beq	r3,r2,40017bc <_sbrk_r+0x4c>
 40017a4:	1805883a 	mov	r2,r3
 40017a8:	dfc00217 	ldw	ra,8(sp)
 40017ac:	dc400117 	ldw	r17,4(sp)
 40017b0:	dc000017 	ldw	r16,0(sp)
 40017b4:	dec00304 	addi	sp,sp,12
 40017b8:	f800283a 	ret
 40017bc:	80800017 	ldw	r2,0(r16)
 40017c0:	103ff826 	beq	r2,zero,40017a4 <_sbrk_r+0x34>
 40017c4:	88800015 	stw	r2,0(r17)
 40017c8:	1805883a 	mov	r2,r3
 40017cc:	dfc00217 	ldw	ra,8(sp)
 40017d0:	dc400117 	ldw	r17,4(sp)
 40017d4:	dc000017 	ldw	r16,0(sp)
 40017d8:	dec00304 	addi	sp,sp,12
 40017dc:	f800283a 	ret

040017e0 <__swsetup_r>:
 40017e0:	00810034 	movhi	r2,1024
 40017e4:	109c0304 	addi	r2,r2,28684
 40017e8:	10c00017 	ldw	r3,0(r2)
 40017ec:	defffd04 	addi	sp,sp,-12
 40017f0:	dc400115 	stw	r17,4(sp)
 40017f4:	dc000015 	stw	r16,0(sp)
 40017f8:	dfc00215 	stw	ra,8(sp)
 40017fc:	2023883a 	mov	r17,r4
 4001800:	2821883a 	mov	r16,r5
 4001804:	18000226 	beq	r3,zero,4001810 <__swsetup_r+0x30>
 4001808:	18800e17 	ldw	r2,56(r3)
 400180c:	10001f26 	beq	r2,zero,400188c <__swsetup_r+0xac>
 4001810:	8100030b 	ldhu	r4,12(r16)
 4001814:	2080020c 	andi	r2,r4,8
 4001818:	10002826 	beq	r2,zero,40018bc <__swsetup_r+0xdc>
 400181c:	81400417 	ldw	r5,16(r16)
 4001820:	28001d26 	beq	r5,zero,4001898 <__swsetup_r+0xb8>
 4001824:	2080004c 	andi	r2,r4,1
 4001828:	1005003a 	cmpeq	r2,r2,zero
 400182c:	10000b26 	beq	r2,zero,400185c <__swsetup_r+0x7c>
 4001830:	2080008c 	andi	r2,r4,2
 4001834:	10001226 	beq	r2,zero,4001880 <__swsetup_r+0xa0>
 4001838:	0005883a 	mov	r2,zero
 400183c:	80800215 	stw	r2,8(r16)
 4001840:	28000b26 	beq	r5,zero,4001870 <__swsetup_r+0x90>
 4001844:	0005883a 	mov	r2,zero
 4001848:	dfc00217 	ldw	ra,8(sp)
 400184c:	dc400117 	ldw	r17,4(sp)
 4001850:	dc000017 	ldw	r16,0(sp)
 4001854:	dec00304 	addi	sp,sp,12
 4001858:	f800283a 	ret
 400185c:	80800517 	ldw	r2,20(r16)
 4001860:	80000215 	stw	zero,8(r16)
 4001864:	0085c83a 	sub	r2,zero,r2
 4001868:	80800615 	stw	r2,24(r16)
 400186c:	283ff51e 	bne	r5,zero,4001844 <__swsetup_r+0x64>
 4001870:	2080200c 	andi	r2,r4,128
 4001874:	103ff326 	beq	r2,zero,4001844 <__swsetup_r+0x64>
 4001878:	00bfffc4 	movi	r2,-1
 400187c:	003ff206 	br	4001848 <__swsetup_r+0x68>
 4001880:	80800517 	ldw	r2,20(r16)
 4001884:	80800215 	stw	r2,8(r16)
 4001888:	003fed06 	br	4001840 <__swsetup_r+0x60>
 400188c:	1809883a 	mov	r4,r3
 4001890:	4001bb40 	call	4001bb4 <__sinit>
 4001894:	003fde06 	br	4001810 <__swsetup_r+0x30>
 4001898:	20c0a00c 	andi	r3,r4,640
 400189c:	00808004 	movi	r2,512
 40018a0:	18bfe026 	beq	r3,r2,4001824 <__swsetup_r+0x44>
 40018a4:	8809883a 	mov	r4,r17
 40018a8:	800b883a 	mov	r5,r16
 40018ac:	40023cc0 	call	40023cc <__smakebuf_r>
 40018b0:	8100030b 	ldhu	r4,12(r16)
 40018b4:	81400417 	ldw	r5,16(r16)
 40018b8:	003fda06 	br	4001824 <__swsetup_r+0x44>
 40018bc:	2080040c 	andi	r2,r4,16
 40018c0:	103fed26 	beq	r2,zero,4001878 <__swsetup_r+0x98>
 40018c4:	2080010c 	andi	r2,r4,4
 40018c8:	10001226 	beq	r2,zero,4001914 <__swsetup_r+0x134>
 40018cc:	81400c17 	ldw	r5,48(r16)
 40018d0:	28000526 	beq	r5,zero,40018e8 <__swsetup_r+0x108>
 40018d4:	80801004 	addi	r2,r16,64
 40018d8:	28800226 	beq	r5,r2,40018e4 <__swsetup_r+0x104>
 40018dc:	8809883a 	mov	r4,r17
 40018e0:	4001f380 	call	4001f38 <_free_r>
 40018e4:	80000c15 	stw	zero,48(r16)
 40018e8:	8080030b 	ldhu	r2,12(r16)
 40018ec:	81400417 	ldw	r5,16(r16)
 40018f0:	80000115 	stw	zero,4(r16)
 40018f4:	10bff6cc 	andi	r2,r2,65499
 40018f8:	8080030d 	sth	r2,12(r16)
 40018fc:	81400015 	stw	r5,0(r16)
 4001900:	8080030b 	ldhu	r2,12(r16)
 4001904:	10800214 	ori	r2,r2,8
 4001908:	113fffcc 	andi	r4,r2,65535
 400190c:	8080030d 	sth	r2,12(r16)
 4001910:	003fc306 	br	4001820 <__swsetup_r+0x40>
 4001914:	81400417 	ldw	r5,16(r16)
 4001918:	003ff906 	br	4001900 <__swsetup_r+0x120>

0400191c <_fflush_r>:
 400191c:	defffb04 	addi	sp,sp,-20
 4001920:	dcc00315 	stw	r19,12(sp)
 4001924:	dc800215 	stw	r18,8(sp)
 4001928:	dfc00415 	stw	ra,16(sp)
 400192c:	dc400115 	stw	r17,4(sp)
 4001930:	dc000015 	stw	r16,0(sp)
 4001934:	2027883a 	mov	r19,r4
 4001938:	2825883a 	mov	r18,r5
 400193c:	20000226 	beq	r4,zero,4001948 <_fflush_r+0x2c>
 4001940:	20800e17 	ldw	r2,56(r4)
 4001944:	10005626 	beq	r2,zero,4001aa0 <_fflush_r+0x184>
 4001948:	9100030b 	ldhu	r4,12(r18)
 400194c:	20ffffcc 	andi	r3,r4,65535
 4001950:	18e0001c 	xori	r3,r3,32768
 4001954:	18e00004 	addi	r3,r3,-32768
 4001958:	1880020c 	andi	r2,r3,8
 400195c:	1000261e 	bne	r2,zero,40019f8 <_fflush_r+0xdc>
 4001960:	90c00117 	ldw	r3,4(r18)
 4001964:	20820014 	ori	r2,r4,2048
 4001968:	9080030d 	sth	r2,12(r18)
 400196c:	1009883a 	mov	r4,r2
 4001970:	00c0400e 	bge	zero,r3,4001a74 <_fflush_r+0x158>
 4001974:	92000a17 	ldw	r8,40(r18)
 4001978:	40004026 	beq	r8,zero,4001a7c <_fflush_r+0x160>
 400197c:	2084000c 	andi	r2,r4,4096
 4001980:	10005326 	beq	r2,zero,4001ad0 <_fflush_r+0x1b4>
 4001984:	94001417 	ldw	r16,80(r18)
 4001988:	9080030b 	ldhu	r2,12(r18)
 400198c:	1080010c 	andi	r2,r2,4
 4001990:	1000481e 	bne	r2,zero,4001ab4 <_fflush_r+0x198>
 4001994:	91400717 	ldw	r5,28(r18)
 4001998:	9809883a 	mov	r4,r19
 400199c:	800d883a 	mov	r6,r16
 40019a0:	000f883a 	mov	r7,zero
 40019a4:	403ee83a 	callr	r8
 40019a8:	8080261e 	bne	r16,r2,4001a44 <_fflush_r+0x128>
 40019ac:	9080030b 	ldhu	r2,12(r18)
 40019b0:	91000417 	ldw	r4,16(r18)
 40019b4:	90000115 	stw	zero,4(r18)
 40019b8:	10bdffcc 	andi	r2,r2,63487
 40019bc:	10ffffcc 	andi	r3,r2,65535
 40019c0:	18c4000c 	andi	r3,r3,4096
 40019c4:	9080030d 	sth	r2,12(r18)
 40019c8:	91000015 	stw	r4,0(r18)
 40019cc:	18002b26 	beq	r3,zero,4001a7c <_fflush_r+0x160>
 40019d0:	0007883a 	mov	r3,zero
 40019d4:	1805883a 	mov	r2,r3
 40019d8:	94001415 	stw	r16,80(r18)
 40019dc:	dfc00417 	ldw	ra,16(sp)
 40019e0:	dcc00317 	ldw	r19,12(sp)
 40019e4:	dc800217 	ldw	r18,8(sp)
 40019e8:	dc400117 	ldw	r17,4(sp)
 40019ec:	dc000017 	ldw	r16,0(sp)
 40019f0:	dec00504 	addi	sp,sp,20
 40019f4:	f800283a 	ret
 40019f8:	94400417 	ldw	r17,16(r18)
 40019fc:	88001f26 	beq	r17,zero,4001a7c <_fflush_r+0x160>
 4001a00:	90800017 	ldw	r2,0(r18)
 4001a04:	18c000cc 	andi	r3,r3,3
 4001a08:	94400015 	stw	r17,0(r18)
 4001a0c:	1461c83a 	sub	r16,r2,r17
 4001a10:	18002526 	beq	r3,zero,4001aa8 <_fflush_r+0x18c>
 4001a14:	0005883a 	mov	r2,zero
 4001a18:	90800215 	stw	r2,8(r18)
 4001a1c:	0400170e 	bge	zero,r16,4001a7c <_fflush_r+0x160>
 4001a20:	90c00917 	ldw	r3,36(r18)
 4001a24:	91400717 	ldw	r5,28(r18)
 4001a28:	880d883a 	mov	r6,r17
 4001a2c:	800f883a 	mov	r7,r16
 4001a30:	9809883a 	mov	r4,r19
 4001a34:	183ee83a 	callr	r3
 4001a38:	88a3883a 	add	r17,r17,r2
 4001a3c:	80a1c83a 	sub	r16,r16,r2
 4001a40:	00bff616 	blt	zero,r2,4001a1c <_fflush_r+0x100>
 4001a44:	9080030b 	ldhu	r2,12(r18)
 4001a48:	00ffffc4 	movi	r3,-1
 4001a4c:	10801014 	ori	r2,r2,64
 4001a50:	9080030d 	sth	r2,12(r18)
 4001a54:	1805883a 	mov	r2,r3
 4001a58:	dfc00417 	ldw	ra,16(sp)
 4001a5c:	dcc00317 	ldw	r19,12(sp)
 4001a60:	dc800217 	ldw	r18,8(sp)
 4001a64:	dc400117 	ldw	r17,4(sp)
 4001a68:	dc000017 	ldw	r16,0(sp)
 4001a6c:	dec00504 	addi	sp,sp,20
 4001a70:	f800283a 	ret
 4001a74:	90800f17 	ldw	r2,60(r18)
 4001a78:	00bfbe16 	blt	zero,r2,4001974 <_fflush_r+0x58>
 4001a7c:	0007883a 	mov	r3,zero
 4001a80:	1805883a 	mov	r2,r3
 4001a84:	dfc00417 	ldw	ra,16(sp)
 4001a88:	dcc00317 	ldw	r19,12(sp)
 4001a8c:	dc800217 	ldw	r18,8(sp)
 4001a90:	dc400117 	ldw	r17,4(sp)
 4001a94:	dc000017 	ldw	r16,0(sp)
 4001a98:	dec00504 	addi	sp,sp,20
 4001a9c:	f800283a 	ret
 4001aa0:	4001bb40 	call	4001bb4 <__sinit>
 4001aa4:	003fa806 	br	4001948 <_fflush_r+0x2c>
 4001aa8:	90800517 	ldw	r2,20(r18)
 4001aac:	90800215 	stw	r2,8(r18)
 4001ab0:	003fda06 	br	4001a1c <_fflush_r+0x100>
 4001ab4:	90800117 	ldw	r2,4(r18)
 4001ab8:	90c00c17 	ldw	r3,48(r18)
 4001abc:	80a1c83a 	sub	r16,r16,r2
 4001ac0:	183fb426 	beq	r3,zero,4001994 <_fflush_r+0x78>
 4001ac4:	90800f17 	ldw	r2,60(r18)
 4001ac8:	80a1c83a 	sub	r16,r16,r2
 4001acc:	003fb106 	br	4001994 <_fflush_r+0x78>
 4001ad0:	91400717 	ldw	r5,28(r18)
 4001ad4:	9809883a 	mov	r4,r19
 4001ad8:	000d883a 	mov	r6,zero
 4001adc:	01c00044 	movi	r7,1
 4001ae0:	403ee83a 	callr	r8
 4001ae4:	1021883a 	mov	r16,r2
 4001ae8:	00bfffc4 	movi	r2,-1
 4001aec:	80800226 	beq	r16,r2,4001af8 <_fflush_r+0x1dc>
 4001af0:	92000a17 	ldw	r8,40(r18)
 4001af4:	003fa406 	br	4001988 <_fflush_r+0x6c>
 4001af8:	98c00017 	ldw	r3,0(r19)
 4001afc:	00800744 	movi	r2,29
 4001b00:	18bfde26 	beq	r3,r2,4001a7c <_fflush_r+0x160>
 4001b04:	9080030b 	ldhu	r2,12(r18)
 4001b08:	8007883a 	mov	r3,r16
 4001b0c:	10801014 	ori	r2,r2,64
 4001b10:	9080030d 	sth	r2,12(r18)
 4001b14:	003fcf06 	br	4001a54 <_fflush_r+0x138>

04001b18 <fflush>:
 4001b18:	01410034 	movhi	r5,1024
 4001b1c:	29464704 	addi	r5,r5,6428
 4001b20:	2007883a 	mov	r3,r4
 4001b24:	20000526 	beq	r4,zero,4001b3c <fflush+0x24>
 4001b28:	00810034 	movhi	r2,1024
 4001b2c:	109c0304 	addi	r2,r2,28684
 4001b30:	11000017 	ldw	r4,0(r2)
 4001b34:	180b883a 	mov	r5,r3
 4001b38:	400191c1 	jmpi	400191c <_fflush_r>
 4001b3c:	00810034 	movhi	r2,1024
 4001b40:	109c0404 	addi	r2,r2,28688
 4001b44:	11000017 	ldw	r4,0(r2)
 4001b48:	400224c1 	jmpi	400224c <_fwalk_reent>

04001b4c <std>:
 4001b4c:	00810034 	movhi	r2,1024
 4001b50:	10897e04 	addi	r2,r2,9720
 4001b54:	20800b15 	stw	r2,44(r4)
 4001b58:	00810034 	movhi	r2,1024
 4001b5c:	1089b904 	addi	r2,r2,9956
 4001b60:	20800815 	stw	r2,32(r4)
 4001b64:	00c10034 	movhi	r3,1024
 4001b68:	18c99a04 	addi	r3,r3,9832
 4001b6c:	00810034 	movhi	r2,1024
 4001b70:	10898004 	addi	r2,r2,9728
 4001b74:	2140030d 	sth	r5,12(r4)
 4001b78:	2180038d 	sth	r6,14(r4)
 4001b7c:	20c00915 	stw	r3,36(r4)
 4001b80:	20800a15 	stw	r2,40(r4)
 4001b84:	20000015 	stw	zero,0(r4)
 4001b88:	20000115 	stw	zero,4(r4)
 4001b8c:	20000215 	stw	zero,8(r4)
 4001b90:	20000415 	stw	zero,16(r4)
 4001b94:	20000515 	stw	zero,20(r4)
 4001b98:	20000615 	stw	zero,24(r4)
 4001b9c:	21000715 	stw	r4,28(r4)
 4001ba0:	f800283a 	ret

04001ba4 <__sfp_lock_acquire>:
 4001ba4:	f800283a 	ret

04001ba8 <__sfp_lock_release>:
 4001ba8:	f800283a 	ret

04001bac <__sinit_lock_acquire>:
 4001bac:	f800283a 	ret

04001bb0 <__sinit_lock_release>:
 4001bb0:	f800283a 	ret

04001bb4 <__sinit>:
 4001bb4:	20800e17 	ldw	r2,56(r4)
 4001bb8:	defffd04 	addi	sp,sp,-12
 4001bbc:	dc400115 	stw	r17,4(sp)
 4001bc0:	dc000015 	stw	r16,0(sp)
 4001bc4:	dfc00215 	stw	ra,8(sp)
 4001bc8:	04400044 	movi	r17,1
 4001bcc:	01400104 	movi	r5,4
 4001bd0:	000d883a 	mov	r6,zero
 4001bd4:	2021883a 	mov	r16,r4
 4001bd8:	2200bb04 	addi	r8,r4,748
 4001bdc:	200f883a 	mov	r7,r4
 4001be0:	10000526 	beq	r2,zero,4001bf8 <__sinit+0x44>
 4001be4:	dfc00217 	ldw	ra,8(sp)
 4001be8:	dc400117 	ldw	r17,4(sp)
 4001bec:	dc000017 	ldw	r16,0(sp)
 4001bf0:	dec00304 	addi	sp,sp,12
 4001bf4:	f800283a 	ret
 4001bf8:	21000117 	ldw	r4,4(r4)
 4001bfc:	00810034 	movhi	r2,1024
 4001c00:	10872604 	addi	r2,r2,7320
 4001c04:	00c000c4 	movi	r3,3
 4001c08:	80800f15 	stw	r2,60(r16)
 4001c0c:	80c0b915 	stw	r3,740(r16)
 4001c10:	8200ba15 	stw	r8,744(r16)
 4001c14:	84400e15 	stw	r17,56(r16)
 4001c18:	8000b815 	stw	zero,736(r16)
 4001c1c:	4001b4c0 	call	4001b4c <std>
 4001c20:	81000217 	ldw	r4,8(r16)
 4001c24:	880d883a 	mov	r6,r17
 4001c28:	800f883a 	mov	r7,r16
 4001c2c:	01400284 	movi	r5,10
 4001c30:	4001b4c0 	call	4001b4c <std>
 4001c34:	81000317 	ldw	r4,12(r16)
 4001c38:	800f883a 	mov	r7,r16
 4001c3c:	01400484 	movi	r5,18
 4001c40:	01800084 	movi	r6,2
 4001c44:	dfc00217 	ldw	ra,8(sp)
 4001c48:	dc400117 	ldw	r17,4(sp)
 4001c4c:	dc000017 	ldw	r16,0(sp)
 4001c50:	dec00304 	addi	sp,sp,12
 4001c54:	4001b4c1 	jmpi	4001b4c <std>

04001c58 <__fp_lock>:
 4001c58:	0005883a 	mov	r2,zero
 4001c5c:	f800283a 	ret

04001c60 <__fp_unlock>:
 4001c60:	0005883a 	mov	r2,zero
 4001c64:	f800283a 	ret

04001c68 <__fp_unlock_all>:
 4001c68:	00810034 	movhi	r2,1024
 4001c6c:	109c0304 	addi	r2,r2,28684
 4001c70:	11000017 	ldw	r4,0(r2)
 4001c74:	01410034 	movhi	r5,1024
 4001c78:	29471804 	addi	r5,r5,7264
 4001c7c:	40023141 	jmpi	4002314 <_fwalk>

04001c80 <__fp_lock_all>:
 4001c80:	00810034 	movhi	r2,1024
 4001c84:	109c0304 	addi	r2,r2,28684
 4001c88:	11000017 	ldw	r4,0(r2)
 4001c8c:	01410034 	movhi	r5,1024
 4001c90:	29471604 	addi	r5,r5,7256
 4001c94:	40023141 	jmpi	4002314 <_fwalk>

04001c98 <_cleanup_r>:
 4001c98:	01410034 	movhi	r5,1024
 4001c9c:	294a4f04 	addi	r5,r5,10556
 4001ca0:	40023141 	jmpi	4002314 <_fwalk>

04001ca4 <_cleanup>:
 4001ca4:	00810034 	movhi	r2,1024
 4001ca8:	109c0404 	addi	r2,r2,28688
 4001cac:	11000017 	ldw	r4,0(r2)
 4001cb0:	4001c981 	jmpi	4001c98 <_cleanup_r>

04001cb4 <__sfmoreglue>:
 4001cb4:	defffc04 	addi	sp,sp,-16
 4001cb8:	dc400115 	stw	r17,4(sp)
 4001cbc:	2c401724 	muli	r17,r5,92
 4001cc0:	dc800215 	stw	r18,8(sp)
 4001cc4:	2825883a 	mov	r18,r5
 4001cc8:	89400304 	addi	r5,r17,12
 4001ccc:	dc000015 	stw	r16,0(sp)
 4001cd0:	dfc00315 	stw	ra,12(sp)
 4001cd4:	40007d80 	call	40007d8 <_malloc_r>
 4001cd8:	0021883a 	mov	r16,zero
 4001cdc:	880d883a 	mov	r6,r17
 4001ce0:	000b883a 	mov	r5,zero
 4001ce4:	10000626 	beq	r2,zero,4001d00 <__sfmoreglue+0x4c>
 4001ce8:	11000304 	addi	r4,r2,12
 4001cec:	14800115 	stw	r18,4(r2)
 4001cf0:	10000015 	stw	zero,0(r2)
 4001cf4:	11000215 	stw	r4,8(r2)
 4001cf8:	1021883a 	mov	r16,r2
 4001cfc:	40025600 	call	4002560 <memset>
 4001d00:	8005883a 	mov	r2,r16
 4001d04:	dfc00317 	ldw	ra,12(sp)
 4001d08:	dc800217 	ldw	r18,8(sp)
 4001d0c:	dc400117 	ldw	r17,4(sp)
 4001d10:	dc000017 	ldw	r16,0(sp)
 4001d14:	dec00404 	addi	sp,sp,16
 4001d18:	f800283a 	ret

04001d1c <__sfp>:
 4001d1c:	defffd04 	addi	sp,sp,-12
 4001d20:	00810034 	movhi	r2,1024
 4001d24:	109c0404 	addi	r2,r2,28688
 4001d28:	dc000015 	stw	r16,0(sp)
 4001d2c:	14000017 	ldw	r16,0(r2)
 4001d30:	dc400115 	stw	r17,4(sp)
 4001d34:	dfc00215 	stw	ra,8(sp)
 4001d38:	80800e17 	ldw	r2,56(r16)
 4001d3c:	2023883a 	mov	r17,r4
 4001d40:	10002626 	beq	r2,zero,4001ddc <__sfp+0xc0>
 4001d44:	8400b804 	addi	r16,r16,736
 4001d48:	80800117 	ldw	r2,4(r16)
 4001d4c:	81000217 	ldw	r4,8(r16)
 4001d50:	10ffffc4 	addi	r3,r2,-1
 4001d54:	18000916 	blt	r3,zero,4001d7c <__sfp+0x60>
 4001d58:	2080030f 	ldh	r2,12(r4)
 4001d5c:	10000b26 	beq	r2,zero,4001d8c <__sfp+0x70>
 4001d60:	017fffc4 	movi	r5,-1
 4001d64:	00000206 	br	4001d70 <__sfp+0x54>
 4001d68:	2080030f 	ldh	r2,12(r4)
 4001d6c:	10000726 	beq	r2,zero,4001d8c <__sfp+0x70>
 4001d70:	18ffffc4 	addi	r3,r3,-1
 4001d74:	21001704 	addi	r4,r4,92
 4001d78:	197ffb1e 	bne	r3,r5,4001d68 <__sfp+0x4c>
 4001d7c:	80800017 	ldw	r2,0(r16)
 4001d80:	10001926 	beq	r2,zero,4001de8 <__sfp+0xcc>
 4001d84:	1021883a 	mov	r16,r2
 4001d88:	003fef06 	br	4001d48 <__sfp+0x2c>
 4001d8c:	00bfffc4 	movi	r2,-1
 4001d90:	00c00044 	movi	r3,1
 4001d94:	2080038d 	sth	r2,14(r4)
 4001d98:	20c0030d 	sth	r3,12(r4)
 4001d9c:	20000015 	stw	zero,0(r4)
 4001da0:	20000215 	stw	zero,8(r4)
 4001da4:	20000115 	stw	zero,4(r4)
 4001da8:	20000415 	stw	zero,16(r4)
 4001dac:	20000515 	stw	zero,20(r4)
 4001db0:	20000615 	stw	zero,24(r4)
 4001db4:	20000c15 	stw	zero,48(r4)
 4001db8:	20000d15 	stw	zero,52(r4)
 4001dbc:	20001115 	stw	zero,68(r4)
 4001dc0:	20001215 	stw	zero,72(r4)
 4001dc4:	2005883a 	mov	r2,r4
 4001dc8:	dfc00217 	ldw	ra,8(sp)
 4001dcc:	dc400117 	ldw	r17,4(sp)
 4001dd0:	dc000017 	ldw	r16,0(sp)
 4001dd4:	dec00304 	addi	sp,sp,12
 4001dd8:	f800283a 	ret
 4001ddc:	8009883a 	mov	r4,r16
 4001de0:	4001bb40 	call	4001bb4 <__sinit>
 4001de4:	003fd706 	br	4001d44 <__sfp+0x28>
 4001de8:	8809883a 	mov	r4,r17
 4001dec:	01400104 	movi	r5,4
 4001df0:	4001cb40 	call	4001cb4 <__sfmoreglue>
 4001df4:	80800015 	stw	r2,0(r16)
 4001df8:	103fe21e 	bne	r2,zero,4001d84 <__sfp+0x68>
 4001dfc:	00800304 	movi	r2,12
 4001e00:	0009883a 	mov	r4,zero
 4001e04:	88800015 	stw	r2,0(r17)
 4001e08:	003fee06 	br	4001dc4 <__sfp+0xa8>

04001e0c <_malloc_trim_r>:
 4001e0c:	defffb04 	addi	sp,sp,-20
 4001e10:	dcc00315 	stw	r19,12(sp)
 4001e14:	04c10034 	movhi	r19,1024
 4001e18:	9cd67f04 	addi	r19,r19,23036
 4001e1c:	dc800215 	stw	r18,8(sp)
 4001e20:	dc400115 	stw	r17,4(sp)
 4001e24:	dc000015 	stw	r16,0(sp)
 4001e28:	2823883a 	mov	r17,r5
 4001e2c:	2025883a 	mov	r18,r4
 4001e30:	dfc00415 	stw	ra,16(sp)
 4001e34:	40031a80 	call	40031a8 <__malloc_lock>
 4001e38:	98800217 	ldw	r2,8(r19)
 4001e3c:	9009883a 	mov	r4,r18
 4001e40:	000b883a 	mov	r5,zero
 4001e44:	10c00117 	ldw	r3,4(r2)
 4001e48:	00bfff04 	movi	r2,-4
 4001e4c:	18a0703a 	and	r16,r3,r2
 4001e50:	8463c83a 	sub	r17,r16,r17
 4001e54:	8c43fbc4 	addi	r17,r17,4079
 4001e58:	8822d33a 	srli	r17,r17,12
 4001e5c:	0083ffc4 	movi	r2,4095
 4001e60:	8c7fffc4 	addi	r17,r17,-1
 4001e64:	8822933a 	slli	r17,r17,12
 4001e68:	1440060e 	bge	r2,r17,4001e84 <_malloc_trim_r+0x78>
 4001e6c:	40017700 	call	4001770 <_sbrk_r>
 4001e70:	98c00217 	ldw	r3,8(r19)
 4001e74:	9009883a 	mov	r4,r18
 4001e78:	044bc83a 	sub	r5,zero,r17
 4001e7c:	80c7883a 	add	r3,r16,r3
 4001e80:	10c00926 	beq	r2,r3,4001ea8 <_malloc_trim_r+0x9c>
 4001e84:	40031c80 	call	40031c8 <__malloc_unlock>
 4001e88:	0005883a 	mov	r2,zero
 4001e8c:	dfc00417 	ldw	ra,16(sp)
 4001e90:	dcc00317 	ldw	r19,12(sp)
 4001e94:	dc800217 	ldw	r18,8(sp)
 4001e98:	dc400117 	ldw	r17,4(sp)
 4001e9c:	dc000017 	ldw	r16,0(sp)
 4001ea0:	dec00504 	addi	sp,sp,20
 4001ea4:	f800283a 	ret
 4001ea8:	9009883a 	mov	r4,r18
 4001eac:	40017700 	call	4001770 <_sbrk_r>
 4001eb0:	844dc83a 	sub	r6,r16,r17
 4001eb4:	00ffffc4 	movi	r3,-1
 4001eb8:	9009883a 	mov	r4,r18
 4001ebc:	000b883a 	mov	r5,zero
 4001ec0:	01c10074 	movhi	r7,1025
 4001ec4:	39e2ad04 	addi	r7,r7,-30028
 4001ec8:	31800054 	ori	r6,r6,1
 4001ecc:	10c00926 	beq	r2,r3,4001ef4 <_malloc_trim_r+0xe8>
 4001ed0:	38800017 	ldw	r2,0(r7)
 4001ed4:	98c00217 	ldw	r3,8(r19)
 4001ed8:	9009883a 	mov	r4,r18
 4001edc:	1445c83a 	sub	r2,r2,r17
 4001ee0:	38800015 	stw	r2,0(r7)
 4001ee4:	19800115 	stw	r6,4(r3)
 4001ee8:	40031c80 	call	40031c8 <__malloc_unlock>
 4001eec:	00800044 	movi	r2,1
 4001ef0:	003fe606 	br	4001e8c <_malloc_trim_r+0x80>
 4001ef4:	40017700 	call	4001770 <_sbrk_r>
 4001ef8:	99800217 	ldw	r6,8(r19)
 4001efc:	100f883a 	mov	r7,r2
 4001f00:	9009883a 	mov	r4,r18
 4001f04:	1187c83a 	sub	r3,r2,r6
 4001f08:	008003c4 	movi	r2,15
 4001f0c:	19400054 	ori	r5,r3,1
 4001f10:	10ffdc0e 	bge	r2,r3,4001e84 <_malloc_trim_r+0x78>
 4001f14:	00810034 	movhi	r2,1024
 4001f18:	109c0604 	addi	r2,r2,28696
 4001f1c:	10c00017 	ldw	r3,0(r2)
 4001f20:	00810074 	movhi	r2,1025
 4001f24:	10a2ad04 	addi	r2,r2,-30028
 4001f28:	31400115 	stw	r5,4(r6)
 4001f2c:	38c7c83a 	sub	r3,r7,r3
 4001f30:	10c00015 	stw	r3,0(r2)
 4001f34:	003fd306 	br	4001e84 <_malloc_trim_r+0x78>

04001f38 <_free_r>:
 4001f38:	defffd04 	addi	sp,sp,-12
 4001f3c:	dc400115 	stw	r17,4(sp)
 4001f40:	dc000015 	stw	r16,0(sp)
 4001f44:	dfc00215 	stw	ra,8(sp)
 4001f48:	2821883a 	mov	r16,r5
 4001f4c:	2023883a 	mov	r17,r4
 4001f50:	28005a26 	beq	r5,zero,40020bc <_free_r+0x184>
 4001f54:	40031a80 	call	40031a8 <__malloc_lock>
 4001f58:	823ffe04 	addi	r8,r16,-8
 4001f5c:	41400117 	ldw	r5,4(r8)
 4001f60:	00bfff84 	movi	r2,-2
 4001f64:	02810034 	movhi	r10,1024
 4001f68:	52967f04 	addi	r10,r10,23036
 4001f6c:	288e703a 	and	r7,r5,r2
 4001f70:	41cd883a 	add	r6,r8,r7
 4001f74:	30c00117 	ldw	r3,4(r6)
 4001f78:	51000217 	ldw	r4,8(r10)
 4001f7c:	00bfff04 	movi	r2,-4
 4001f80:	1892703a 	and	r9,r3,r2
 4001f84:	5017883a 	mov	r11,r10
 4001f88:	31006726 	beq	r6,r4,4002128 <_free_r+0x1f0>
 4001f8c:	2880004c 	andi	r2,r5,1
 4001f90:	1005003a 	cmpeq	r2,r2,zero
 4001f94:	32400115 	stw	r9,4(r6)
 4001f98:	10001a1e 	bne	r2,zero,4002004 <_free_r+0xcc>
 4001f9c:	000b883a 	mov	r5,zero
 4001fa0:	3247883a 	add	r3,r6,r9
 4001fa4:	18800117 	ldw	r2,4(r3)
 4001fa8:	1080004c 	andi	r2,r2,1
 4001fac:	1000231e 	bne	r2,zero,400203c <_free_r+0x104>
 4001fb0:	280ac03a 	cmpne	r5,r5,zero
 4001fb4:	3a4f883a 	add	r7,r7,r9
 4001fb8:	2800451e 	bne	r5,zero,40020d0 <_free_r+0x198>
 4001fbc:	31000217 	ldw	r4,8(r6)
 4001fc0:	00810034 	movhi	r2,1024
 4001fc4:	10968104 	addi	r2,r2,23044
 4001fc8:	20807b26 	beq	r4,r2,40021b8 <_free_r+0x280>
 4001fcc:	30800317 	ldw	r2,12(r6)
 4001fd0:	3a07883a 	add	r3,r7,r8
 4001fd4:	19c00015 	stw	r7,0(r3)
 4001fd8:	11000215 	stw	r4,8(r2)
 4001fdc:	20800315 	stw	r2,12(r4)
 4001fe0:	38800054 	ori	r2,r7,1
 4001fe4:	40800115 	stw	r2,4(r8)
 4001fe8:	28001a26 	beq	r5,zero,4002054 <_free_r+0x11c>
 4001fec:	8809883a 	mov	r4,r17
 4001ff0:	dfc00217 	ldw	ra,8(sp)
 4001ff4:	dc400117 	ldw	r17,4(sp)
 4001ff8:	dc000017 	ldw	r16,0(sp)
 4001ffc:	dec00304 	addi	sp,sp,12
 4002000:	40031c81 	jmpi	40031c8 <__malloc_unlock>
 4002004:	80bffe17 	ldw	r2,-8(r16)
 4002008:	50c00204 	addi	r3,r10,8
 400200c:	4091c83a 	sub	r8,r8,r2
 4002010:	41000217 	ldw	r4,8(r8)
 4002014:	388f883a 	add	r7,r7,r2
 4002018:	20c06126 	beq	r4,r3,40021a0 <_free_r+0x268>
 400201c:	40800317 	ldw	r2,12(r8)
 4002020:	3247883a 	add	r3,r6,r9
 4002024:	000b883a 	mov	r5,zero
 4002028:	11000215 	stw	r4,8(r2)
 400202c:	20800315 	stw	r2,12(r4)
 4002030:	18800117 	ldw	r2,4(r3)
 4002034:	1080004c 	andi	r2,r2,1
 4002038:	103fdd26 	beq	r2,zero,4001fb0 <_free_r+0x78>
 400203c:	38800054 	ori	r2,r7,1
 4002040:	3a07883a 	add	r3,r7,r8
 4002044:	280ac03a 	cmpne	r5,r5,zero
 4002048:	40800115 	stw	r2,4(r8)
 400204c:	19c00015 	stw	r7,0(r3)
 4002050:	283fe61e 	bne	r5,zero,4001fec <_free_r+0xb4>
 4002054:	00807fc4 	movi	r2,511
 4002058:	11c01f2e 	bgeu	r2,r7,40020d8 <_free_r+0x1a0>
 400205c:	3806d27a 	srli	r3,r7,9
 4002060:	1800481e 	bne	r3,zero,4002184 <_free_r+0x24c>
 4002064:	3804d0fa 	srli	r2,r7,3
 4002068:	100690fa 	slli	r3,r2,3
 400206c:	1acd883a 	add	r6,r3,r11
 4002070:	31400217 	ldw	r5,8(r6)
 4002074:	31405926 	beq	r6,r5,40021dc <_free_r+0x2a4>
 4002078:	28800117 	ldw	r2,4(r5)
 400207c:	00ffff04 	movi	r3,-4
 4002080:	10c4703a 	and	r2,r2,r3
 4002084:	3880022e 	bgeu	r7,r2,4002090 <_free_r+0x158>
 4002088:	29400217 	ldw	r5,8(r5)
 400208c:	317ffa1e 	bne	r6,r5,4002078 <_free_r+0x140>
 4002090:	29800317 	ldw	r6,12(r5)
 4002094:	41800315 	stw	r6,12(r8)
 4002098:	41400215 	stw	r5,8(r8)
 400209c:	8809883a 	mov	r4,r17
 40020a0:	2a000315 	stw	r8,12(r5)
 40020a4:	32000215 	stw	r8,8(r6)
 40020a8:	dfc00217 	ldw	ra,8(sp)
 40020ac:	dc400117 	ldw	r17,4(sp)
 40020b0:	dc000017 	ldw	r16,0(sp)
 40020b4:	dec00304 	addi	sp,sp,12
 40020b8:	40031c81 	jmpi	40031c8 <__malloc_unlock>
 40020bc:	dfc00217 	ldw	ra,8(sp)
 40020c0:	dc400117 	ldw	r17,4(sp)
 40020c4:	dc000017 	ldw	r16,0(sp)
 40020c8:	dec00304 	addi	sp,sp,12
 40020cc:	f800283a 	ret
 40020d0:	31000217 	ldw	r4,8(r6)
 40020d4:	003fbd06 	br	4001fcc <_free_r+0x94>
 40020d8:	3806d0fa 	srli	r3,r7,3
 40020dc:	00800044 	movi	r2,1
 40020e0:	51400117 	ldw	r5,4(r10)
 40020e4:	180890fa 	slli	r4,r3,3
 40020e8:	1807d0ba 	srai	r3,r3,2
 40020ec:	22c9883a 	add	r4,r4,r11
 40020f0:	21800217 	ldw	r6,8(r4)
 40020f4:	10c4983a 	sll	r2,r2,r3
 40020f8:	41000315 	stw	r4,12(r8)
 40020fc:	41800215 	stw	r6,8(r8)
 4002100:	288ab03a 	or	r5,r5,r2
 4002104:	22000215 	stw	r8,8(r4)
 4002108:	8809883a 	mov	r4,r17
 400210c:	51400115 	stw	r5,4(r10)
 4002110:	32000315 	stw	r8,12(r6)
 4002114:	dfc00217 	ldw	ra,8(sp)
 4002118:	dc400117 	ldw	r17,4(sp)
 400211c:	dc000017 	ldw	r16,0(sp)
 4002120:	dec00304 	addi	sp,sp,12
 4002124:	40031c81 	jmpi	40031c8 <__malloc_unlock>
 4002128:	2880004c 	andi	r2,r5,1
 400212c:	3a4d883a 	add	r6,r7,r9
 4002130:	1000071e 	bne	r2,zero,4002150 <_free_r+0x218>
 4002134:	80bffe17 	ldw	r2,-8(r16)
 4002138:	4091c83a 	sub	r8,r8,r2
 400213c:	41000317 	ldw	r4,12(r8)
 4002140:	40c00217 	ldw	r3,8(r8)
 4002144:	308d883a 	add	r6,r6,r2
 4002148:	20c00215 	stw	r3,8(r4)
 400214c:	19000315 	stw	r4,12(r3)
 4002150:	00810034 	movhi	r2,1024
 4002154:	109c0504 	addi	r2,r2,28692
 4002158:	11000017 	ldw	r4,0(r2)
 400215c:	30c00054 	ori	r3,r6,1
 4002160:	52000215 	stw	r8,8(r10)
 4002164:	40c00115 	stw	r3,4(r8)
 4002168:	313fa036 	bltu	r6,r4,4001fec <_free_r+0xb4>
 400216c:	00810074 	movhi	r2,1025
 4002170:	10a2a304 	addi	r2,r2,-30068
 4002174:	11400017 	ldw	r5,0(r2)
 4002178:	8809883a 	mov	r4,r17
 400217c:	4001e0c0 	call	4001e0c <_malloc_trim_r>
 4002180:	003f9a06 	br	4001fec <_free_r+0xb4>
 4002184:	00800104 	movi	r2,4
 4002188:	10c0072e 	bgeu	r2,r3,40021a8 <_free_r+0x270>
 400218c:	00800504 	movi	r2,20
 4002190:	10c01936 	bltu	r2,r3,40021f8 <_free_r+0x2c0>
 4002194:	188016c4 	addi	r2,r3,91
 4002198:	100690fa 	slli	r3,r2,3
 400219c:	003fb306 	br	400206c <_free_r+0x134>
 40021a0:	01400044 	movi	r5,1
 40021a4:	003f7e06 	br	4001fa0 <_free_r+0x68>
 40021a8:	3804d1ba 	srli	r2,r7,6
 40021ac:	10800e04 	addi	r2,r2,56
 40021b0:	100690fa 	slli	r3,r2,3
 40021b4:	003fad06 	br	400206c <_free_r+0x134>
 40021b8:	22000315 	stw	r8,12(r4)
 40021bc:	22000215 	stw	r8,8(r4)
 40021c0:	3a05883a 	add	r2,r7,r8
 40021c4:	38c00054 	ori	r3,r7,1
 40021c8:	11c00015 	stw	r7,0(r2)
 40021cc:	41000215 	stw	r4,8(r8)
 40021d0:	40c00115 	stw	r3,4(r8)
 40021d4:	41000315 	stw	r4,12(r8)
 40021d8:	003f8406 	br	4001fec <_free_r+0xb4>
 40021dc:	1005d0ba 	srai	r2,r2,2
 40021e0:	00c00044 	movi	r3,1
 40021e4:	51000117 	ldw	r4,4(r10)
 40021e8:	1886983a 	sll	r3,r3,r2
 40021ec:	20c8b03a 	or	r4,r4,r3
 40021f0:	51000115 	stw	r4,4(r10)
 40021f4:	003fa706 	br	4002094 <_free_r+0x15c>
 40021f8:	00801504 	movi	r2,84
 40021fc:	10c00436 	bltu	r2,r3,4002210 <_free_r+0x2d8>
 4002200:	3804d33a 	srli	r2,r7,12
 4002204:	10801b84 	addi	r2,r2,110
 4002208:	100690fa 	slli	r3,r2,3
 400220c:	003f9706 	br	400206c <_free_r+0x134>
 4002210:	00805504 	movi	r2,340
 4002214:	10c00436 	bltu	r2,r3,4002228 <_free_r+0x2f0>
 4002218:	3804d3fa 	srli	r2,r7,15
 400221c:	10801dc4 	addi	r2,r2,119
 4002220:	100690fa 	slli	r3,r2,3
 4002224:	003f9106 	br	400206c <_free_r+0x134>
 4002228:	00815504 	movi	r2,1364
 400222c:	10c0032e 	bgeu	r2,r3,400223c <_free_r+0x304>
 4002230:	00801f84 	movi	r2,126
 4002234:	00c0fc04 	movi	r3,1008
 4002238:	003f8c06 	br	400206c <_free_r+0x134>
 400223c:	3804d4ba 	srli	r2,r7,18
 4002240:	10801f04 	addi	r2,r2,124
 4002244:	100690fa 	slli	r3,r2,3
 4002248:	003f8806 	br	400206c <_free_r+0x134>

0400224c <_fwalk_reent>:
 400224c:	defff704 	addi	sp,sp,-36
 4002250:	dcc00315 	stw	r19,12(sp)
 4002254:	24c0b804 	addi	r19,r4,736
 4002258:	dd800615 	stw	r22,24(sp)
 400225c:	dd400515 	stw	r21,20(sp)
 4002260:	dfc00815 	stw	ra,32(sp)
 4002264:	ddc00715 	stw	r23,28(sp)
 4002268:	dd000415 	stw	r20,16(sp)
 400226c:	dc800215 	stw	r18,8(sp)
 4002270:	dc400115 	stw	r17,4(sp)
 4002274:	dc000015 	stw	r16,0(sp)
 4002278:	202b883a 	mov	r21,r4
 400227c:	282d883a 	mov	r22,r5
 4002280:	4001ba40 	call	4001ba4 <__sfp_lock_acquire>
 4002284:	98002126 	beq	r19,zero,400230c <_fwalk_reent+0xc0>
 4002288:	002f883a 	mov	r23,zero
 400228c:	9c800117 	ldw	r18,4(r19)
 4002290:	9c000217 	ldw	r16,8(r19)
 4002294:	90bfffc4 	addi	r2,r18,-1
 4002298:	10000d16 	blt	r2,zero,40022d0 <_fwalk_reent+0x84>
 400229c:	0023883a 	mov	r17,zero
 40022a0:	053fffc4 	movi	r20,-1
 40022a4:	8080030f 	ldh	r2,12(r16)
 40022a8:	8c400044 	addi	r17,r17,1
 40022ac:	10000626 	beq	r2,zero,40022c8 <_fwalk_reent+0x7c>
 40022b0:	8080038f 	ldh	r2,14(r16)
 40022b4:	800b883a 	mov	r5,r16
 40022b8:	a809883a 	mov	r4,r21
 40022bc:	15000226 	beq	r2,r20,40022c8 <_fwalk_reent+0x7c>
 40022c0:	b03ee83a 	callr	r22
 40022c4:	b8aeb03a 	or	r23,r23,r2
 40022c8:	84001704 	addi	r16,r16,92
 40022cc:	947ff51e 	bne	r18,r17,40022a4 <_fwalk_reent+0x58>
 40022d0:	9cc00017 	ldw	r19,0(r19)
 40022d4:	983fed1e 	bne	r19,zero,400228c <_fwalk_reent+0x40>
 40022d8:	4001ba80 	call	4001ba8 <__sfp_lock_release>
 40022dc:	b805883a 	mov	r2,r23
 40022e0:	dfc00817 	ldw	ra,32(sp)
 40022e4:	ddc00717 	ldw	r23,28(sp)
 40022e8:	dd800617 	ldw	r22,24(sp)
 40022ec:	dd400517 	ldw	r21,20(sp)
 40022f0:	dd000417 	ldw	r20,16(sp)
 40022f4:	dcc00317 	ldw	r19,12(sp)
 40022f8:	dc800217 	ldw	r18,8(sp)
 40022fc:	dc400117 	ldw	r17,4(sp)
 4002300:	dc000017 	ldw	r16,0(sp)
 4002304:	dec00904 	addi	sp,sp,36
 4002308:	f800283a 	ret
 400230c:	002f883a 	mov	r23,zero
 4002310:	003ff106 	br	40022d8 <_fwalk_reent+0x8c>

04002314 <_fwalk>:
 4002314:	defff804 	addi	sp,sp,-32
 4002318:	dcc00315 	stw	r19,12(sp)
 400231c:	24c0b804 	addi	r19,r4,736
 4002320:	dd400515 	stw	r21,20(sp)
 4002324:	dfc00715 	stw	ra,28(sp)
 4002328:	dd800615 	stw	r22,24(sp)
 400232c:	dd000415 	stw	r20,16(sp)
 4002330:	dc800215 	stw	r18,8(sp)
 4002334:	dc400115 	stw	r17,4(sp)
 4002338:	dc000015 	stw	r16,0(sp)
 400233c:	282b883a 	mov	r21,r5
 4002340:	4001ba40 	call	4001ba4 <__sfp_lock_acquire>
 4002344:	98001f26 	beq	r19,zero,40023c4 <_fwalk+0xb0>
 4002348:	002d883a 	mov	r22,zero
 400234c:	9c800117 	ldw	r18,4(r19)
 4002350:	9c000217 	ldw	r16,8(r19)
 4002354:	90bfffc4 	addi	r2,r18,-1
 4002358:	10000c16 	blt	r2,zero,400238c <_fwalk+0x78>
 400235c:	0023883a 	mov	r17,zero
 4002360:	053fffc4 	movi	r20,-1
 4002364:	8080030f 	ldh	r2,12(r16)
 4002368:	8c400044 	addi	r17,r17,1
 400236c:	10000526 	beq	r2,zero,4002384 <_fwalk+0x70>
 4002370:	8080038f 	ldh	r2,14(r16)
 4002374:	8009883a 	mov	r4,r16
 4002378:	15000226 	beq	r2,r20,4002384 <_fwalk+0x70>
 400237c:	a83ee83a 	callr	r21
 4002380:	b0acb03a 	or	r22,r22,r2
 4002384:	84001704 	addi	r16,r16,92
 4002388:	947ff61e 	bne	r18,r17,4002364 <_fwalk+0x50>
 400238c:	9cc00017 	ldw	r19,0(r19)
 4002390:	983fee1e 	bne	r19,zero,400234c <_fwalk+0x38>
 4002394:	4001ba80 	call	4001ba8 <__sfp_lock_release>
 4002398:	b005883a 	mov	r2,r22
 400239c:	dfc00717 	ldw	ra,28(sp)
 40023a0:	dd800617 	ldw	r22,24(sp)
 40023a4:	dd400517 	ldw	r21,20(sp)
 40023a8:	dd000417 	ldw	r20,16(sp)
 40023ac:	dcc00317 	ldw	r19,12(sp)
 40023b0:	dc800217 	ldw	r18,8(sp)
 40023b4:	dc400117 	ldw	r17,4(sp)
 40023b8:	dc000017 	ldw	r16,0(sp)
 40023bc:	dec00804 	addi	sp,sp,32
 40023c0:	f800283a 	ret
 40023c4:	002d883a 	mov	r22,zero
 40023c8:	003ff206 	br	4002394 <_fwalk+0x80>

040023cc <__smakebuf_r>:
 40023cc:	2880030b 	ldhu	r2,12(r5)
 40023d0:	deffed04 	addi	sp,sp,-76
 40023d4:	dc401015 	stw	r17,64(sp)
 40023d8:	1080008c 	andi	r2,r2,2
 40023dc:	dc000f15 	stw	r16,60(sp)
 40023e0:	dfc01215 	stw	ra,72(sp)
 40023e4:	dc801115 	stw	r18,68(sp)
 40023e8:	2821883a 	mov	r16,r5
 40023ec:	2023883a 	mov	r17,r4
 40023f0:	10000b26 	beq	r2,zero,4002420 <__smakebuf_r+0x54>
 40023f4:	28c010c4 	addi	r3,r5,67
 40023f8:	00800044 	movi	r2,1
 40023fc:	28800515 	stw	r2,20(r5)
 4002400:	28c00415 	stw	r3,16(r5)
 4002404:	28c00015 	stw	r3,0(r5)
 4002408:	dfc01217 	ldw	ra,72(sp)
 400240c:	dc801117 	ldw	r18,68(sp)
 4002410:	dc401017 	ldw	r17,64(sp)
 4002414:	dc000f17 	ldw	r16,60(sp)
 4002418:	dec01304 	addi	sp,sp,76
 400241c:	f800283a 	ret
 4002420:	2940038f 	ldh	r5,14(r5)
 4002424:	28002116 	blt	r5,zero,40024ac <__smakebuf_r+0xe0>
 4002428:	d80d883a 	mov	r6,sp
 400242c:	40029500 	call	4002950 <_fstat_r>
 4002430:	10001e16 	blt	r2,zero,40024ac <__smakebuf_r+0xe0>
 4002434:	d8800117 	ldw	r2,4(sp)
 4002438:	00e00014 	movui	r3,32768
 400243c:	113c000c 	andi	r4,r2,61440
 4002440:	20c03126 	beq	r4,r3,4002508 <__smakebuf_r+0x13c>
 4002444:	8080030b 	ldhu	r2,12(r16)
 4002448:	00c80004 	movi	r3,8192
 400244c:	10820014 	ori	r2,r2,2048
 4002450:	8080030d 	sth	r2,12(r16)
 4002454:	20c01e26 	beq	r4,r3,40024d0 <__smakebuf_r+0x104>
 4002458:	04810004 	movi	r18,1024
 400245c:	8809883a 	mov	r4,r17
 4002460:	900b883a 	mov	r5,r18
 4002464:	40007d80 	call	40007d8 <_malloc_r>
 4002468:	1009883a 	mov	r4,r2
 400246c:	10003126 	beq	r2,zero,4002534 <__smakebuf_r+0x168>
 4002470:	80c0030b 	ldhu	r3,12(r16)
 4002474:	00810034 	movhi	r2,1024
 4002478:	10872604 	addi	r2,r2,7320
 400247c:	88800f15 	stw	r2,60(r17)
 4002480:	18c02014 	ori	r3,r3,128
 4002484:	84800515 	stw	r18,20(r16)
 4002488:	80c0030d 	sth	r3,12(r16)
 400248c:	81000415 	stw	r4,16(r16)
 4002490:	81000015 	stw	r4,0(r16)
 4002494:	dfc01217 	ldw	ra,72(sp)
 4002498:	dc801117 	ldw	r18,68(sp)
 400249c:	dc401017 	ldw	r17,64(sp)
 40024a0:	dc000f17 	ldw	r16,60(sp)
 40024a4:	dec01304 	addi	sp,sp,76
 40024a8:	f800283a 	ret
 40024ac:	80c0030b 	ldhu	r3,12(r16)
 40024b0:	1880200c 	andi	r2,r3,128
 40024b4:	10000426 	beq	r2,zero,40024c8 <__smakebuf_r+0xfc>
 40024b8:	04801004 	movi	r18,64
 40024bc:	18820014 	ori	r2,r3,2048
 40024c0:	8080030d 	sth	r2,12(r16)
 40024c4:	003fe506 	br	400245c <__smakebuf_r+0x90>
 40024c8:	04810004 	movi	r18,1024
 40024cc:	003ffb06 	br	40024bc <__smakebuf_r+0xf0>
 40024d0:	8140038f 	ldh	r5,14(r16)
 40024d4:	8809883a 	mov	r4,r17
 40024d8:	40029c40 	call	40029c4 <_isatty_r>
 40024dc:	103fde26 	beq	r2,zero,4002458 <__smakebuf_r+0x8c>
 40024e0:	8080030b 	ldhu	r2,12(r16)
 40024e4:	80c010c4 	addi	r3,r16,67
 40024e8:	04810004 	movi	r18,1024
 40024ec:	10800054 	ori	r2,r2,1
 40024f0:	8080030d 	sth	r2,12(r16)
 40024f4:	00800044 	movi	r2,1
 40024f8:	80c00415 	stw	r3,16(r16)
 40024fc:	80800515 	stw	r2,20(r16)
 4002500:	80c00015 	stw	r3,0(r16)
 4002504:	003fd506 	br	400245c <__smakebuf_r+0x90>
 4002508:	80c00a17 	ldw	r3,40(r16)
 400250c:	00810034 	movhi	r2,1024
 4002510:	10898004 	addi	r2,r2,9728
 4002514:	18bfcb1e 	bne	r3,r2,4002444 <__smakebuf_r+0x78>
 4002518:	8080030b 	ldhu	r2,12(r16)
 400251c:	00c10004 	movi	r3,1024
 4002520:	1825883a 	mov	r18,r3
 4002524:	10c4b03a 	or	r2,r2,r3
 4002528:	8080030d 	sth	r2,12(r16)
 400252c:	80c01315 	stw	r3,76(r16)
 4002530:	003fca06 	br	400245c <__smakebuf_r+0x90>
 4002534:	8100030b 	ldhu	r4,12(r16)
 4002538:	2080800c 	andi	r2,r4,512
 400253c:	103fb21e 	bne	r2,zero,4002408 <__smakebuf_r+0x3c>
 4002540:	80c010c4 	addi	r3,r16,67
 4002544:	21000094 	ori	r4,r4,2
 4002548:	00800044 	movi	r2,1
 400254c:	80800515 	stw	r2,20(r16)
 4002550:	8100030d 	sth	r4,12(r16)
 4002554:	80c00415 	stw	r3,16(r16)
 4002558:	80c00015 	stw	r3,0(r16)
 400255c:	003faa06 	br	4002408 <__smakebuf_r+0x3c>

04002560 <memset>:
 4002560:	008000c4 	movi	r2,3
 4002564:	29403fcc 	andi	r5,r5,255
 4002568:	2007883a 	mov	r3,r4
 400256c:	1180022e 	bgeu	r2,r6,4002578 <memset+0x18>
 4002570:	2084703a 	and	r2,r4,r2
 4002574:	10000826 	beq	r2,zero,4002598 <memset+0x38>
 4002578:	30000526 	beq	r6,zero,4002590 <memset+0x30>
 400257c:	2805883a 	mov	r2,r5
 4002580:	30cd883a 	add	r6,r6,r3
 4002584:	18800005 	stb	r2,0(r3)
 4002588:	18c00044 	addi	r3,r3,1
 400258c:	19bffd1e 	bne	r3,r6,4002584 <memset+0x24>
 4002590:	2005883a 	mov	r2,r4
 4002594:	f800283a 	ret
 4002598:	2804923a 	slli	r2,r5,8
 400259c:	020003c4 	movi	r8,15
 40025a0:	200f883a 	mov	r7,r4
 40025a4:	2884b03a 	or	r2,r5,r2
 40025a8:	1006943a 	slli	r3,r2,16
 40025ac:	10c6b03a 	or	r3,r2,r3
 40025b0:	41800a2e 	bgeu	r8,r6,40025dc <memset+0x7c>
 40025b4:	4005883a 	mov	r2,r8
 40025b8:	31bffc04 	addi	r6,r6,-16
 40025bc:	38c00015 	stw	r3,0(r7)
 40025c0:	38c00115 	stw	r3,4(r7)
 40025c4:	38c00215 	stw	r3,8(r7)
 40025c8:	38c00315 	stw	r3,12(r7)
 40025cc:	39c00404 	addi	r7,r7,16
 40025d0:	11bff936 	bltu	r2,r6,40025b8 <memset+0x58>
 40025d4:	008000c4 	movi	r2,3
 40025d8:	1180052e 	bgeu	r2,r6,40025f0 <memset+0x90>
 40025dc:	31bfff04 	addi	r6,r6,-4
 40025e0:	008000c4 	movi	r2,3
 40025e4:	38c00015 	stw	r3,0(r7)
 40025e8:	39c00104 	addi	r7,r7,4
 40025ec:	11bffb36 	bltu	r2,r6,40025dc <memset+0x7c>
 40025f0:	3807883a 	mov	r3,r7
 40025f4:	003fe006 	br	4002578 <memset+0x18>

040025f8 <__sclose>:
 40025f8:	2940038f 	ldh	r5,14(r5)
 40025fc:	40027bc1 	jmpi	40027bc <_close_r>

04002600 <__sseek>:
 4002600:	defffe04 	addi	sp,sp,-8
 4002604:	dc000015 	stw	r16,0(sp)
 4002608:	2821883a 	mov	r16,r5
 400260c:	2940038f 	ldh	r5,14(r5)
 4002610:	dfc00115 	stw	ra,4(sp)
 4002614:	4002a340 	call	4002a34 <_lseek_r>
 4002618:	1007883a 	mov	r3,r2
 400261c:	00bfffc4 	movi	r2,-1
 4002620:	18800926 	beq	r3,r2,4002648 <__sseek+0x48>
 4002624:	8080030b 	ldhu	r2,12(r16)
 4002628:	80c01415 	stw	r3,80(r16)
 400262c:	10840014 	ori	r2,r2,4096
 4002630:	8080030d 	sth	r2,12(r16)
 4002634:	1805883a 	mov	r2,r3
 4002638:	dfc00117 	ldw	ra,4(sp)
 400263c:	dc000017 	ldw	r16,0(sp)
 4002640:	dec00204 	addi	sp,sp,8
 4002644:	f800283a 	ret
 4002648:	8080030b 	ldhu	r2,12(r16)
 400264c:	10bbffcc 	andi	r2,r2,61439
 4002650:	8080030d 	sth	r2,12(r16)
 4002654:	1805883a 	mov	r2,r3
 4002658:	dfc00117 	ldw	ra,4(sp)
 400265c:	dc000017 	ldw	r16,0(sp)
 4002660:	dec00204 	addi	sp,sp,8
 4002664:	f800283a 	ret

04002668 <__swrite>:
 4002668:	2880030b 	ldhu	r2,12(r5)
 400266c:	defffb04 	addi	sp,sp,-20
 4002670:	dcc00315 	stw	r19,12(sp)
 4002674:	1080400c 	andi	r2,r2,256
 4002678:	dc800215 	stw	r18,8(sp)
 400267c:	dc400115 	stw	r17,4(sp)
 4002680:	dc000015 	stw	r16,0(sp)
 4002684:	3027883a 	mov	r19,r6
 4002688:	3825883a 	mov	r18,r7
 400268c:	dfc00415 	stw	ra,16(sp)
 4002690:	2821883a 	mov	r16,r5
 4002694:	000d883a 	mov	r6,zero
 4002698:	01c00084 	movi	r7,2
 400269c:	2023883a 	mov	r17,r4
 40026a0:	10000226 	beq	r2,zero,40026ac <__swrite+0x44>
 40026a4:	2940038f 	ldh	r5,14(r5)
 40026a8:	4002a340 	call	4002a34 <_lseek_r>
 40026ac:	8080030b 	ldhu	r2,12(r16)
 40026b0:	8140038f 	ldh	r5,14(r16)
 40026b4:	8809883a 	mov	r4,r17
 40026b8:	10bbffcc 	andi	r2,r2,61439
 40026bc:	980d883a 	mov	r6,r19
 40026c0:	900f883a 	mov	r7,r18
 40026c4:	8080030d 	sth	r2,12(r16)
 40026c8:	dfc00417 	ldw	ra,16(sp)
 40026cc:	dcc00317 	ldw	r19,12(sp)
 40026d0:	dc800217 	ldw	r18,8(sp)
 40026d4:	dc400117 	ldw	r17,4(sp)
 40026d8:	dc000017 	ldw	r16,0(sp)
 40026dc:	dec00504 	addi	sp,sp,20
 40026e0:	40027441 	jmpi	4002744 <_write_r>

040026e4 <__sread>:
 40026e4:	defffe04 	addi	sp,sp,-8
 40026e8:	dc000015 	stw	r16,0(sp)
 40026ec:	2821883a 	mov	r16,r5
 40026f0:	2940038f 	ldh	r5,14(r5)
 40026f4:	dfc00115 	stw	ra,4(sp)
 40026f8:	4002aac0 	call	4002aac <_read_r>
 40026fc:	1007883a 	mov	r3,r2
 4002700:	10000816 	blt	r2,zero,4002724 <__sread+0x40>
 4002704:	80801417 	ldw	r2,80(r16)
 4002708:	10c5883a 	add	r2,r2,r3
 400270c:	80801415 	stw	r2,80(r16)
 4002710:	1805883a 	mov	r2,r3
 4002714:	dfc00117 	ldw	ra,4(sp)
 4002718:	dc000017 	ldw	r16,0(sp)
 400271c:	dec00204 	addi	sp,sp,8
 4002720:	f800283a 	ret
 4002724:	8080030b 	ldhu	r2,12(r16)
 4002728:	10bbffcc 	andi	r2,r2,61439
 400272c:	8080030d 	sth	r2,12(r16)
 4002730:	1805883a 	mov	r2,r3
 4002734:	dfc00117 	ldw	ra,4(sp)
 4002738:	dc000017 	ldw	r16,0(sp)
 400273c:	dec00204 	addi	sp,sp,8
 4002740:	f800283a 	ret

04002744 <_write_r>:
 4002744:	defffd04 	addi	sp,sp,-12
 4002748:	dc000015 	stw	r16,0(sp)
 400274c:	04010074 	movhi	r16,1025
 4002750:	8422a604 	addi	r16,r16,-30056
 4002754:	dc400115 	stw	r17,4(sp)
 4002758:	80000015 	stw	zero,0(r16)
 400275c:	2023883a 	mov	r17,r4
 4002760:	2809883a 	mov	r4,r5
 4002764:	300b883a 	mov	r5,r6
 4002768:	380d883a 	mov	r6,r7
 400276c:	dfc00215 	stw	ra,8(sp)
 4002770:	40034840 	call	4003484 <write>
 4002774:	1007883a 	mov	r3,r2
 4002778:	00bfffc4 	movi	r2,-1
 400277c:	18800626 	beq	r3,r2,4002798 <_write_r+0x54>
 4002780:	1805883a 	mov	r2,r3
 4002784:	dfc00217 	ldw	ra,8(sp)
 4002788:	dc400117 	ldw	r17,4(sp)
 400278c:	dc000017 	ldw	r16,0(sp)
 4002790:	dec00304 	addi	sp,sp,12
 4002794:	f800283a 	ret
 4002798:	80800017 	ldw	r2,0(r16)
 400279c:	103ff826 	beq	r2,zero,4002780 <_write_r+0x3c>
 40027a0:	88800015 	stw	r2,0(r17)
 40027a4:	1805883a 	mov	r2,r3
 40027a8:	dfc00217 	ldw	ra,8(sp)
 40027ac:	dc400117 	ldw	r17,4(sp)
 40027b0:	dc000017 	ldw	r16,0(sp)
 40027b4:	dec00304 	addi	sp,sp,12
 40027b8:	f800283a 	ret

040027bc <_close_r>:
 40027bc:	defffd04 	addi	sp,sp,-12
 40027c0:	dc000015 	stw	r16,0(sp)
 40027c4:	04010074 	movhi	r16,1025
 40027c8:	8422a604 	addi	r16,r16,-30056
 40027cc:	dc400115 	stw	r17,4(sp)
 40027d0:	80000015 	stw	zero,0(r16)
 40027d4:	2023883a 	mov	r17,r4
 40027d8:	2809883a 	mov	r4,r5
 40027dc:	dfc00215 	stw	ra,8(sp)
 40027e0:	4002b240 	call	4002b24 <close>
 40027e4:	1007883a 	mov	r3,r2
 40027e8:	00bfffc4 	movi	r2,-1
 40027ec:	18800626 	beq	r3,r2,4002808 <_close_r+0x4c>
 40027f0:	1805883a 	mov	r2,r3
 40027f4:	dfc00217 	ldw	ra,8(sp)
 40027f8:	dc400117 	ldw	r17,4(sp)
 40027fc:	dc000017 	ldw	r16,0(sp)
 4002800:	dec00304 	addi	sp,sp,12
 4002804:	f800283a 	ret
 4002808:	80800017 	ldw	r2,0(r16)
 400280c:	103ff826 	beq	r2,zero,40027f0 <_close_r+0x34>
 4002810:	88800015 	stw	r2,0(r17)
 4002814:	1805883a 	mov	r2,r3
 4002818:	dfc00217 	ldw	ra,8(sp)
 400281c:	dc400117 	ldw	r17,4(sp)
 4002820:	dc000017 	ldw	r16,0(sp)
 4002824:	dec00304 	addi	sp,sp,12
 4002828:	f800283a 	ret

0400282c <_fclose_r>:
 400282c:	defffc04 	addi	sp,sp,-16
 4002830:	dc400115 	stw	r17,4(sp)
 4002834:	dc000015 	stw	r16,0(sp)
 4002838:	dfc00315 	stw	ra,12(sp)
 400283c:	dc800215 	stw	r18,8(sp)
 4002840:	2821883a 	mov	r16,r5
 4002844:	2023883a 	mov	r17,r4
 4002848:	28002926 	beq	r5,zero,40028f0 <_fclose_r+0xc4>
 400284c:	4001ba40 	call	4001ba4 <__sfp_lock_acquire>
 4002850:	88000226 	beq	r17,zero,400285c <_fclose_r+0x30>
 4002854:	88800e17 	ldw	r2,56(r17)
 4002858:	10002d26 	beq	r2,zero,4002910 <_fclose_r+0xe4>
 400285c:	8080030f 	ldh	r2,12(r16)
 4002860:	10002226 	beq	r2,zero,40028ec <_fclose_r+0xc0>
 4002864:	8809883a 	mov	r4,r17
 4002868:	800b883a 	mov	r5,r16
 400286c:	400191c0 	call	400191c <_fflush_r>
 4002870:	1025883a 	mov	r18,r2
 4002874:	80800b17 	ldw	r2,44(r16)
 4002878:	10000426 	beq	r2,zero,400288c <_fclose_r+0x60>
 400287c:	81400717 	ldw	r5,28(r16)
 4002880:	8809883a 	mov	r4,r17
 4002884:	103ee83a 	callr	r2
 4002888:	10002a16 	blt	r2,zero,4002934 <_fclose_r+0x108>
 400288c:	8080030b 	ldhu	r2,12(r16)
 4002890:	1080200c 	andi	r2,r2,128
 4002894:	1000231e 	bne	r2,zero,4002924 <_fclose_r+0xf8>
 4002898:	81400c17 	ldw	r5,48(r16)
 400289c:	28000526 	beq	r5,zero,40028b4 <_fclose_r+0x88>
 40028a0:	80801004 	addi	r2,r16,64
 40028a4:	28800226 	beq	r5,r2,40028b0 <_fclose_r+0x84>
 40028a8:	8809883a 	mov	r4,r17
 40028ac:	4001f380 	call	4001f38 <_free_r>
 40028b0:	80000c15 	stw	zero,48(r16)
 40028b4:	81401117 	ldw	r5,68(r16)
 40028b8:	28000326 	beq	r5,zero,40028c8 <_fclose_r+0x9c>
 40028bc:	8809883a 	mov	r4,r17
 40028c0:	4001f380 	call	4001f38 <_free_r>
 40028c4:	80001115 	stw	zero,68(r16)
 40028c8:	8000030d 	sth	zero,12(r16)
 40028cc:	4001ba80 	call	4001ba8 <__sfp_lock_release>
 40028d0:	9005883a 	mov	r2,r18
 40028d4:	dfc00317 	ldw	ra,12(sp)
 40028d8:	dc800217 	ldw	r18,8(sp)
 40028dc:	dc400117 	ldw	r17,4(sp)
 40028e0:	dc000017 	ldw	r16,0(sp)
 40028e4:	dec00404 	addi	sp,sp,16
 40028e8:	f800283a 	ret
 40028ec:	4001ba80 	call	4001ba8 <__sfp_lock_release>
 40028f0:	0025883a 	mov	r18,zero
 40028f4:	9005883a 	mov	r2,r18
 40028f8:	dfc00317 	ldw	ra,12(sp)
 40028fc:	dc800217 	ldw	r18,8(sp)
 4002900:	dc400117 	ldw	r17,4(sp)
 4002904:	dc000017 	ldw	r16,0(sp)
 4002908:	dec00404 	addi	sp,sp,16
 400290c:	f800283a 	ret
 4002910:	8809883a 	mov	r4,r17
 4002914:	4001bb40 	call	4001bb4 <__sinit>
 4002918:	8080030f 	ldh	r2,12(r16)
 400291c:	103fd11e 	bne	r2,zero,4002864 <_fclose_r+0x38>
 4002920:	003ff206 	br	40028ec <_fclose_r+0xc0>
 4002924:	81400417 	ldw	r5,16(r16)
 4002928:	8809883a 	mov	r4,r17
 400292c:	4001f380 	call	4001f38 <_free_r>
 4002930:	003fd906 	br	4002898 <_fclose_r+0x6c>
 4002934:	04bfffc4 	movi	r18,-1
 4002938:	003fd406 	br	400288c <_fclose_r+0x60>

0400293c <fclose>:
 400293c:	00810034 	movhi	r2,1024
 4002940:	109c0304 	addi	r2,r2,28684
 4002944:	200b883a 	mov	r5,r4
 4002948:	11000017 	ldw	r4,0(r2)
 400294c:	400282c1 	jmpi	400282c <_fclose_r>

04002950 <_fstat_r>:
 4002950:	defffd04 	addi	sp,sp,-12
 4002954:	dc000015 	stw	r16,0(sp)
 4002958:	04010074 	movhi	r16,1025
 400295c:	8422a604 	addi	r16,r16,-30056
 4002960:	dc400115 	stw	r17,4(sp)
 4002964:	80000015 	stw	zero,0(r16)
 4002968:	2023883a 	mov	r17,r4
 400296c:	2809883a 	mov	r4,r5
 4002970:	300b883a 	mov	r5,r6
 4002974:	dfc00215 	stw	ra,8(sp)
 4002978:	4002cac0 	call	4002cac <fstat>
 400297c:	1007883a 	mov	r3,r2
 4002980:	00bfffc4 	movi	r2,-1
 4002984:	18800626 	beq	r3,r2,40029a0 <_fstat_r+0x50>
 4002988:	1805883a 	mov	r2,r3
 400298c:	dfc00217 	ldw	ra,8(sp)
 4002990:	dc400117 	ldw	r17,4(sp)
 4002994:	dc000017 	ldw	r16,0(sp)
 4002998:	dec00304 	addi	sp,sp,12
 400299c:	f800283a 	ret
 40029a0:	80800017 	ldw	r2,0(r16)
 40029a4:	103ff826 	beq	r2,zero,4002988 <_fstat_r+0x38>
 40029a8:	88800015 	stw	r2,0(r17)
 40029ac:	1805883a 	mov	r2,r3
 40029b0:	dfc00217 	ldw	ra,8(sp)
 40029b4:	dc400117 	ldw	r17,4(sp)
 40029b8:	dc000017 	ldw	r16,0(sp)
 40029bc:	dec00304 	addi	sp,sp,12
 40029c0:	f800283a 	ret

040029c4 <_isatty_r>:
 40029c4:	defffd04 	addi	sp,sp,-12
 40029c8:	dc000015 	stw	r16,0(sp)
 40029cc:	04010074 	movhi	r16,1025
 40029d0:	8422a604 	addi	r16,r16,-30056
 40029d4:	dc400115 	stw	r17,4(sp)
 40029d8:	80000015 	stw	zero,0(r16)
 40029dc:	2023883a 	mov	r17,r4
 40029e0:	2809883a 	mov	r4,r5
 40029e4:	dfc00215 	stw	ra,8(sp)
 40029e8:	4002de00 	call	4002de0 <isatty>
 40029ec:	1007883a 	mov	r3,r2
 40029f0:	00bfffc4 	movi	r2,-1
 40029f4:	18800626 	beq	r3,r2,4002a10 <_isatty_r+0x4c>
 40029f8:	1805883a 	mov	r2,r3
 40029fc:	dfc00217 	ldw	ra,8(sp)
 4002a00:	dc400117 	ldw	r17,4(sp)
 4002a04:	dc000017 	ldw	r16,0(sp)
 4002a08:	dec00304 	addi	sp,sp,12
 4002a0c:	f800283a 	ret
 4002a10:	80800017 	ldw	r2,0(r16)
 4002a14:	103ff826 	beq	r2,zero,40029f8 <_isatty_r+0x34>
 4002a18:	88800015 	stw	r2,0(r17)
 4002a1c:	1805883a 	mov	r2,r3
 4002a20:	dfc00217 	ldw	ra,8(sp)
 4002a24:	dc400117 	ldw	r17,4(sp)
 4002a28:	dc000017 	ldw	r16,0(sp)
 4002a2c:	dec00304 	addi	sp,sp,12
 4002a30:	f800283a 	ret

04002a34 <_lseek_r>:
 4002a34:	defffd04 	addi	sp,sp,-12
 4002a38:	dc000015 	stw	r16,0(sp)
 4002a3c:	04010074 	movhi	r16,1025
 4002a40:	8422a604 	addi	r16,r16,-30056
 4002a44:	dc400115 	stw	r17,4(sp)
 4002a48:	80000015 	stw	zero,0(r16)
 4002a4c:	2023883a 	mov	r17,r4
 4002a50:	2809883a 	mov	r4,r5
 4002a54:	300b883a 	mov	r5,r6
 4002a58:	380d883a 	mov	r6,r7
 4002a5c:	dfc00215 	stw	ra,8(sp)
 4002a60:	4002fec0 	call	4002fec <lseek>
 4002a64:	1007883a 	mov	r3,r2
 4002a68:	00bfffc4 	movi	r2,-1
 4002a6c:	18800626 	beq	r3,r2,4002a88 <_lseek_r+0x54>
 4002a70:	1805883a 	mov	r2,r3
 4002a74:	dfc00217 	ldw	ra,8(sp)
 4002a78:	dc400117 	ldw	r17,4(sp)
 4002a7c:	dc000017 	ldw	r16,0(sp)
 4002a80:	dec00304 	addi	sp,sp,12
 4002a84:	f800283a 	ret
 4002a88:	80800017 	ldw	r2,0(r16)
 4002a8c:	103ff826 	beq	r2,zero,4002a70 <_lseek_r+0x3c>
 4002a90:	88800015 	stw	r2,0(r17)
 4002a94:	1805883a 	mov	r2,r3
 4002a98:	dfc00217 	ldw	ra,8(sp)
 4002a9c:	dc400117 	ldw	r17,4(sp)
 4002aa0:	dc000017 	ldw	r16,0(sp)
 4002aa4:	dec00304 	addi	sp,sp,12
 4002aa8:	f800283a 	ret

04002aac <_read_r>:
 4002aac:	defffd04 	addi	sp,sp,-12
 4002ab0:	dc000015 	stw	r16,0(sp)
 4002ab4:	04010074 	movhi	r16,1025
 4002ab8:	8422a604 	addi	r16,r16,-30056
 4002abc:	dc400115 	stw	r17,4(sp)
 4002ac0:	80000015 	stw	zero,0(r16)
 4002ac4:	2023883a 	mov	r17,r4
 4002ac8:	2809883a 	mov	r4,r5
 4002acc:	300b883a 	mov	r5,r6
 4002ad0:	380d883a 	mov	r6,r7
 4002ad4:	dfc00215 	stw	ra,8(sp)
 4002ad8:	40031e80 	call	40031e8 <read>
 4002adc:	1007883a 	mov	r3,r2
 4002ae0:	00bfffc4 	movi	r2,-1
 4002ae4:	18800626 	beq	r3,r2,4002b00 <_read_r+0x54>
 4002ae8:	1805883a 	mov	r2,r3
 4002aec:	dfc00217 	ldw	ra,8(sp)
 4002af0:	dc400117 	ldw	r17,4(sp)
 4002af4:	dc000017 	ldw	r16,0(sp)
 4002af8:	dec00304 	addi	sp,sp,12
 4002afc:	f800283a 	ret
 4002b00:	80800017 	ldw	r2,0(r16)
 4002b04:	103ff826 	beq	r2,zero,4002ae8 <_read_r+0x3c>
 4002b08:	88800015 	stw	r2,0(r17)
 4002b0c:	1805883a 	mov	r2,r3
 4002b10:	dfc00217 	ldw	ra,8(sp)
 4002b14:	dc400117 	ldw	r17,4(sp)
 4002b18:	dc000017 	ldw	r16,0(sp)
 4002b1c:	dec00304 	addi	sp,sp,12
 4002b20:	f800283a 	ret

04002b24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4002b24:	defff804 	addi	sp,sp,-32
 4002b28:	dfc00715 	stw	ra,28(sp)
 4002b2c:	df000615 	stw	fp,24(sp)
 4002b30:	df000604 	addi	fp,sp,24
 4002b34:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4002b38:	e0bffc17 	ldw	r2,-16(fp)
 4002b3c:	1004803a 	cmplt	r2,r2,zero
 4002b40:	1000081e 	bne	r2,zero,4002b64 <close+0x40>
 4002b44:	e0bffc17 	ldw	r2,-16(fp)
 4002b48:	10800324 	muli	r2,r2,12
 4002b4c:	1007883a 	mov	r3,r2
 4002b50:	00810034 	movhi	r2,1024
 4002b54:	10978b04 	addi	r2,r2,24108
 4002b58:	1887883a 	add	r3,r3,r2
 4002b5c:	e0ffff15 	stw	r3,-4(fp)
 4002b60:	00000106 	br	4002b68 <close+0x44>
 4002b64:	e03fff15 	stw	zero,-4(fp)
 4002b68:	e0bfff17 	ldw	r2,-4(fp)
 4002b6c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4002b70:	e0bffb17 	ldw	r2,-20(fp)
 4002b74:	1005003a 	cmpeq	r2,r2,zero
 4002b78:	10001d1e 	bne	r2,zero,4002bf0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4002b7c:	e0bffb17 	ldw	r2,-20(fp)
 4002b80:	10800017 	ldw	r2,0(r2)
 4002b84:	10800417 	ldw	r2,16(r2)
 4002b88:	1005003a 	cmpeq	r2,r2,zero
 4002b8c:	1000071e 	bne	r2,zero,4002bac <close+0x88>
 4002b90:	e0bffb17 	ldw	r2,-20(fp)
 4002b94:	10800017 	ldw	r2,0(r2)
 4002b98:	10800417 	ldw	r2,16(r2)
 4002b9c:	e13ffb17 	ldw	r4,-20(fp)
 4002ba0:	103ee83a 	callr	r2
 4002ba4:	e0bffe15 	stw	r2,-8(fp)
 4002ba8:	00000106 	br	4002bb0 <close+0x8c>
 4002bac:	e03ffe15 	stw	zero,-8(fp)
 4002bb0:	e0bffe17 	ldw	r2,-8(fp)
 4002bb4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4002bb8:	e13ffc17 	ldw	r4,-16(fp)
 4002bbc:	40033680 	call	4003368 <alt_release_fd>
    if (rval < 0)
 4002bc0:	e0bffa17 	ldw	r2,-24(fp)
 4002bc4:	1004403a 	cmpge	r2,r2,zero
 4002bc8:	1000071e 	bne	r2,zero,4002be8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 4002bcc:	4002c200 	call	4002c20 <alt_get_errno>
 4002bd0:	e0fffa17 	ldw	r3,-24(fp)
 4002bd4:	00c7c83a 	sub	r3,zero,r3
 4002bd8:	10c00015 	stw	r3,0(r2)
      return -1;
 4002bdc:	00bfffc4 	movi	r2,-1
 4002be0:	e0bffd15 	stw	r2,-12(fp)
 4002be4:	00000806 	br	4002c08 <close+0xe4>
    }
    return 0;
 4002be8:	e03ffd15 	stw	zero,-12(fp)
 4002bec:	00000606 	br	4002c08 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002bf0:	4002c200 	call	4002c20 <alt_get_errno>
 4002bf4:	1007883a 	mov	r3,r2
 4002bf8:	00801444 	movi	r2,81
 4002bfc:	18800015 	stw	r2,0(r3)
    return -1;
 4002c00:	00bfffc4 	movi	r2,-1
 4002c04:	e0bffd15 	stw	r2,-12(fp)
 4002c08:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4002c0c:	e037883a 	mov	sp,fp
 4002c10:	dfc00117 	ldw	ra,4(sp)
 4002c14:	df000017 	ldw	fp,0(sp)
 4002c18:	dec00204 	addi	sp,sp,8
 4002c1c:	f800283a 	ret

04002c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002c20:	defffd04 	addi	sp,sp,-12
 4002c24:	dfc00215 	stw	ra,8(sp)
 4002c28:	df000115 	stw	fp,4(sp)
 4002c2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4002c30:	00810034 	movhi	r2,1024
 4002c34:	109c0c04 	addi	r2,r2,28720
 4002c38:	10800017 	ldw	r2,0(r2)
 4002c3c:	1005003a 	cmpeq	r2,r2,zero
 4002c40:	1000061e 	bne	r2,zero,4002c5c <alt_get_errno+0x3c>
 4002c44:	00810034 	movhi	r2,1024
 4002c48:	109c0c04 	addi	r2,r2,28720
 4002c4c:	10800017 	ldw	r2,0(r2)
 4002c50:	103ee83a 	callr	r2
 4002c54:	e0bfff15 	stw	r2,-4(fp)
 4002c58:	00000306 	br	4002c68 <alt_get_errno+0x48>
 4002c5c:	00810074 	movhi	r2,1025
 4002c60:	10a2a604 	addi	r2,r2,-30056
 4002c64:	e0bfff15 	stw	r2,-4(fp)
 4002c68:	e0bfff17 	ldw	r2,-4(fp)
}
 4002c6c:	e037883a 	mov	sp,fp
 4002c70:	dfc00117 	ldw	ra,4(sp)
 4002c74:	df000017 	ldw	fp,0(sp)
 4002c78:	dec00204 	addi	sp,sp,8
 4002c7c:	f800283a 	ret

04002c80 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4002c80:	defffc04 	addi	sp,sp,-16
 4002c84:	df000315 	stw	fp,12(sp)
 4002c88:	df000304 	addi	fp,sp,12
 4002c8c:	e13ffd15 	stw	r4,-12(fp)
 4002c90:	e17ffe15 	stw	r5,-8(fp)
 4002c94:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4002c98:	e0bfff17 	ldw	r2,-4(fp)
}
 4002c9c:	e037883a 	mov	sp,fp
 4002ca0:	df000017 	ldw	fp,0(sp)
 4002ca4:	dec00104 	addi	sp,sp,4
 4002ca8:	f800283a 	ret

04002cac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4002cac:	defff904 	addi	sp,sp,-28
 4002cb0:	dfc00615 	stw	ra,24(sp)
 4002cb4:	df000515 	stw	fp,20(sp)
 4002cb8:	df000504 	addi	fp,sp,20
 4002cbc:	e13ffc15 	stw	r4,-16(fp)
 4002cc0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4002cc4:	e0bffc17 	ldw	r2,-16(fp)
 4002cc8:	1004803a 	cmplt	r2,r2,zero
 4002ccc:	1000081e 	bne	r2,zero,4002cf0 <fstat+0x44>
 4002cd0:	e0bffc17 	ldw	r2,-16(fp)
 4002cd4:	10800324 	muli	r2,r2,12
 4002cd8:	1007883a 	mov	r3,r2
 4002cdc:	00810034 	movhi	r2,1024
 4002ce0:	10978b04 	addi	r2,r2,24108
 4002ce4:	1887883a 	add	r3,r3,r2
 4002ce8:	e0ffff15 	stw	r3,-4(fp)
 4002cec:	00000106 	br	4002cf4 <fstat+0x48>
 4002cf0:	e03fff15 	stw	zero,-4(fp)
 4002cf4:	e0bfff17 	ldw	r2,-4(fp)
 4002cf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4002cfc:	e0bffb17 	ldw	r2,-20(fp)
 4002d00:	1005003a 	cmpeq	r2,r2,zero
 4002d04:	1000121e 	bne	r2,zero,4002d50 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4002d08:	e0bffb17 	ldw	r2,-20(fp)
 4002d0c:	10800017 	ldw	r2,0(r2)
 4002d10:	10800817 	ldw	r2,32(r2)
 4002d14:	1005003a 	cmpeq	r2,r2,zero
 4002d18:	1000081e 	bne	r2,zero,4002d3c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 4002d1c:	e0bffb17 	ldw	r2,-20(fp)
 4002d20:	10800017 	ldw	r2,0(r2)
 4002d24:	10800817 	ldw	r2,32(r2)
 4002d28:	e13ffb17 	ldw	r4,-20(fp)
 4002d2c:	e17ffd17 	ldw	r5,-12(fp)
 4002d30:	103ee83a 	callr	r2
 4002d34:	e0bffe15 	stw	r2,-8(fp)
 4002d38:	00000b06 	br	4002d68 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4002d3c:	e0fffd17 	ldw	r3,-12(fp)
 4002d40:	00880004 	movi	r2,8192
 4002d44:	18800115 	stw	r2,4(r3)
      return 0;
 4002d48:	e03ffe15 	stw	zero,-8(fp)
 4002d4c:	00000606 	br	4002d68 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002d50:	4002d800 	call	4002d80 <alt_get_errno>
 4002d54:	1007883a 	mov	r3,r2
 4002d58:	00801444 	movi	r2,81
 4002d5c:	18800015 	stw	r2,0(r3)
    return -1;
 4002d60:	00bfffc4 	movi	r2,-1
 4002d64:	e0bffe15 	stw	r2,-8(fp)
 4002d68:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 4002d6c:	e037883a 	mov	sp,fp
 4002d70:	dfc00117 	ldw	ra,4(sp)
 4002d74:	df000017 	ldw	fp,0(sp)
 4002d78:	dec00204 	addi	sp,sp,8
 4002d7c:	f800283a 	ret

04002d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002d80:	defffd04 	addi	sp,sp,-12
 4002d84:	dfc00215 	stw	ra,8(sp)
 4002d88:	df000115 	stw	fp,4(sp)
 4002d8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4002d90:	00810034 	movhi	r2,1024
 4002d94:	109c0c04 	addi	r2,r2,28720
 4002d98:	10800017 	ldw	r2,0(r2)
 4002d9c:	1005003a 	cmpeq	r2,r2,zero
 4002da0:	1000061e 	bne	r2,zero,4002dbc <alt_get_errno+0x3c>
 4002da4:	00810034 	movhi	r2,1024
 4002da8:	109c0c04 	addi	r2,r2,28720
 4002dac:	10800017 	ldw	r2,0(r2)
 4002db0:	103ee83a 	callr	r2
 4002db4:	e0bfff15 	stw	r2,-4(fp)
 4002db8:	00000306 	br	4002dc8 <alt_get_errno+0x48>
 4002dbc:	00810074 	movhi	r2,1025
 4002dc0:	10a2a604 	addi	r2,r2,-30056
 4002dc4:	e0bfff15 	stw	r2,-4(fp)
 4002dc8:	e0bfff17 	ldw	r2,-4(fp)
}
 4002dcc:	e037883a 	mov	sp,fp
 4002dd0:	dfc00117 	ldw	ra,4(sp)
 4002dd4:	df000017 	ldw	fp,0(sp)
 4002dd8:	dec00204 	addi	sp,sp,8
 4002ddc:	f800283a 	ret

04002de0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4002de0:	deffeb04 	addi	sp,sp,-84
 4002de4:	dfc01415 	stw	ra,80(sp)
 4002de8:	df001315 	stw	fp,76(sp)
 4002dec:	df001304 	addi	fp,sp,76
 4002df0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4002df4:	e0bffd17 	ldw	r2,-12(fp)
 4002df8:	1004803a 	cmplt	r2,r2,zero
 4002dfc:	1000081e 	bne	r2,zero,4002e20 <isatty+0x40>
 4002e00:	e0bffd17 	ldw	r2,-12(fp)
 4002e04:	10800324 	muli	r2,r2,12
 4002e08:	1007883a 	mov	r3,r2
 4002e0c:	00810034 	movhi	r2,1024
 4002e10:	10978b04 	addi	r2,r2,24108
 4002e14:	1887883a 	add	r3,r3,r2
 4002e18:	e0ffff15 	stw	r3,-4(fp)
 4002e1c:	00000106 	br	4002e24 <isatty+0x44>
 4002e20:	e03fff15 	stw	zero,-4(fp)
 4002e24:	e0bfff17 	ldw	r2,-4(fp)
 4002e28:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 4002e2c:	e0bfed17 	ldw	r2,-76(fp)
 4002e30:	1005003a 	cmpeq	r2,r2,zero
 4002e34:	10000f1e 	bne	r2,zero,4002e74 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4002e38:	e0bfed17 	ldw	r2,-76(fp)
 4002e3c:	10800017 	ldw	r2,0(r2)
 4002e40:	10800817 	ldw	r2,32(r2)
 4002e44:	1004c03a 	cmpne	r2,r2,zero
 4002e48:	1000031e 	bne	r2,zero,4002e58 <isatty+0x78>
    {
      return 1;
 4002e4c:	00800044 	movi	r2,1
 4002e50:	e0bffe15 	stw	r2,-8(fp)
 4002e54:	00000c06 	br	4002e88 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4002e58:	e17fee04 	addi	r5,fp,-72
 4002e5c:	e13ffd17 	ldw	r4,-12(fp)
 4002e60:	4002cac0 	call	4002cac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4002e64:	e0bfef17 	ldw	r2,-68(fp)
 4002e68:	10880020 	cmpeqi	r2,r2,8192
 4002e6c:	e0bffe15 	stw	r2,-8(fp)
 4002e70:	00000506 	br	4002e88 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002e74:	4002ea00 	call	4002ea0 <alt_get_errno>
 4002e78:	1007883a 	mov	r3,r2
 4002e7c:	00801444 	movi	r2,81
 4002e80:	18800015 	stw	r2,0(r3)
    return 0;
 4002e84:	e03ffe15 	stw	zero,-8(fp)
 4002e88:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 4002e8c:	e037883a 	mov	sp,fp
 4002e90:	dfc00117 	ldw	ra,4(sp)
 4002e94:	df000017 	ldw	fp,0(sp)
 4002e98:	dec00204 	addi	sp,sp,8
 4002e9c:	f800283a 	ret

04002ea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002ea0:	defffd04 	addi	sp,sp,-12
 4002ea4:	dfc00215 	stw	ra,8(sp)
 4002ea8:	df000115 	stw	fp,4(sp)
 4002eac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4002eb0:	00810034 	movhi	r2,1024
 4002eb4:	109c0c04 	addi	r2,r2,28720
 4002eb8:	10800017 	ldw	r2,0(r2)
 4002ebc:	1005003a 	cmpeq	r2,r2,zero
 4002ec0:	1000061e 	bne	r2,zero,4002edc <alt_get_errno+0x3c>
 4002ec4:	00810034 	movhi	r2,1024
 4002ec8:	109c0c04 	addi	r2,r2,28720
 4002ecc:	10800017 	ldw	r2,0(r2)
 4002ed0:	103ee83a 	callr	r2
 4002ed4:	e0bfff15 	stw	r2,-4(fp)
 4002ed8:	00000306 	br	4002ee8 <alt_get_errno+0x48>
 4002edc:	00810074 	movhi	r2,1025
 4002ee0:	10a2a604 	addi	r2,r2,-30056
 4002ee4:	e0bfff15 	stw	r2,-4(fp)
 4002ee8:	e0bfff17 	ldw	r2,-4(fp)
}
 4002eec:	e037883a 	mov	sp,fp
 4002ef0:	dfc00117 	ldw	ra,4(sp)
 4002ef4:	df000017 	ldw	fp,0(sp)
 4002ef8:	dec00204 	addi	sp,sp,8
 4002efc:	f800283a 	ret

04002f00 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4002f00:	defffe04 	addi	sp,sp,-8
 4002f04:	dfc00115 	stw	ra,4(sp)
 4002f08:	df000015 	stw	fp,0(sp)
 4002f0c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4002f10:	01010034 	movhi	r4,1024
 4002f14:	211c1104 	addi	r4,r4,28740
 4002f18:	01410034 	movhi	r5,1024
 4002f1c:	29557f04 	addi	r5,r5,22012
 4002f20:	01810034 	movhi	r6,1024
 4002f24:	319c1104 	addi	r6,r6,28740
 4002f28:	4002f800 	call	4002f80 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4002f2c:	01010034 	movhi	r4,1024
 4002f30:	21000004 	addi	r4,r4,0
 4002f34:	01420434 	movhi	r5,2064
 4002f38:	29500804 	addi	r5,r5,16416
 4002f3c:	01820434 	movhi	r6,2064
 4002f40:	31906d04 	addi	r6,r6,16820
 4002f44:	4002f800 	call	4002f80 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4002f48:	01010034 	movhi	r4,1024
 4002f4c:	21156d04 	addi	r4,r4,21940
 4002f50:	01410034 	movhi	r5,1024
 4002f54:	29556d04 	addi	r5,r5,21940
 4002f58:	01810034 	movhi	r6,1024
 4002f5c:	31957f04 	addi	r6,r6,22012
 4002f60:	4002f800 	call	4002f80 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4002f64:	40043cc0 	call	40043cc <alt_dcache_flush_all>
  alt_icache_flush_all();
 4002f68:	40045ec0 	call	40045ec <alt_icache_flush_all>
}
 4002f6c:	e037883a 	mov	sp,fp
 4002f70:	dfc00117 	ldw	ra,4(sp)
 4002f74:	df000017 	ldw	fp,0(sp)
 4002f78:	dec00204 	addi	sp,sp,8
 4002f7c:	f800283a 	ret

04002f80 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4002f80:	defffc04 	addi	sp,sp,-16
 4002f84:	df000315 	stw	fp,12(sp)
 4002f88:	df000304 	addi	fp,sp,12
 4002f8c:	e13ffd15 	stw	r4,-12(fp)
 4002f90:	e17ffe15 	stw	r5,-8(fp)
 4002f94:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4002f98:	e0fffe17 	ldw	r3,-8(fp)
 4002f9c:	e0bffd17 	ldw	r2,-12(fp)
 4002fa0:	18800e26 	beq	r3,r2,4002fdc <alt_load_section+0x5c>
  {
    while( to != end )
 4002fa4:	00000a06 	br	4002fd0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 4002fa8:	e0bffd17 	ldw	r2,-12(fp)
 4002fac:	10c00017 	ldw	r3,0(r2)
 4002fb0:	e0bffe17 	ldw	r2,-8(fp)
 4002fb4:	10c00015 	stw	r3,0(r2)
 4002fb8:	e0bffe17 	ldw	r2,-8(fp)
 4002fbc:	10800104 	addi	r2,r2,4
 4002fc0:	e0bffe15 	stw	r2,-8(fp)
 4002fc4:	e0bffd17 	ldw	r2,-12(fp)
 4002fc8:	10800104 	addi	r2,r2,4
 4002fcc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4002fd0:	e0fffe17 	ldw	r3,-8(fp)
 4002fd4:	e0bfff17 	ldw	r2,-4(fp)
 4002fd8:	18bff31e 	bne	r3,r2,4002fa8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 4002fdc:	e037883a 	mov	sp,fp
 4002fe0:	df000017 	ldw	fp,0(sp)
 4002fe4:	dec00104 	addi	sp,sp,4
 4002fe8:	f800283a 	ret

04002fec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4002fec:	defff804 	addi	sp,sp,-32
 4002ff0:	dfc00715 	stw	ra,28(sp)
 4002ff4:	df000615 	stw	fp,24(sp)
 4002ff8:	df000604 	addi	fp,sp,24
 4002ffc:	e13ffc15 	stw	r4,-16(fp)
 4003000:	e17ffd15 	stw	r5,-12(fp)
 4003004:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4003008:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400300c:	e0bffc17 	ldw	r2,-16(fp)
 4003010:	1004803a 	cmplt	r2,r2,zero
 4003014:	1000081e 	bne	r2,zero,4003038 <lseek+0x4c>
 4003018:	e0bffc17 	ldw	r2,-16(fp)
 400301c:	10800324 	muli	r2,r2,12
 4003020:	1007883a 	mov	r3,r2
 4003024:	00810034 	movhi	r2,1024
 4003028:	10978b04 	addi	r2,r2,24108
 400302c:	1887883a 	add	r3,r3,r2
 4003030:	e0ffff15 	stw	r3,-4(fp)
 4003034:	00000106 	br	400303c <lseek+0x50>
 4003038:	e03fff15 	stw	zero,-4(fp)
 400303c:	e0bfff17 	ldw	r2,-4(fp)
 4003040:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 4003044:	e0bffb17 	ldw	r2,-20(fp)
 4003048:	1005003a 	cmpeq	r2,r2,zero
 400304c:	1000111e 	bne	r2,zero,4003094 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4003050:	e0bffb17 	ldw	r2,-20(fp)
 4003054:	10800017 	ldw	r2,0(r2)
 4003058:	10800717 	ldw	r2,28(r2)
 400305c:	1005003a 	cmpeq	r2,r2,zero
 4003060:	1000091e 	bne	r2,zero,4003088 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4003064:	e0bffb17 	ldw	r2,-20(fp)
 4003068:	10800017 	ldw	r2,0(r2)
 400306c:	10800717 	ldw	r2,28(r2)
 4003070:	e13ffb17 	ldw	r4,-20(fp)
 4003074:	e17ffd17 	ldw	r5,-12(fp)
 4003078:	e1bffe17 	ldw	r6,-8(fp)
 400307c:	103ee83a 	callr	r2
 4003080:	e0bffa15 	stw	r2,-24(fp)
 4003084:	00000506 	br	400309c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4003088:	00bfde84 	movi	r2,-134
 400308c:	e0bffa15 	stw	r2,-24(fp)
 4003090:	00000206 	br	400309c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 4003094:	00bfebc4 	movi	r2,-81
 4003098:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 400309c:	e0bffa17 	ldw	r2,-24(fp)
 40030a0:	1004403a 	cmpge	r2,r2,zero
 40030a4:	1000071e 	bne	r2,zero,40030c4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 40030a8:	40030dc0 	call	40030dc <alt_get_errno>
 40030ac:	1007883a 	mov	r3,r2
 40030b0:	e0bffa17 	ldw	r2,-24(fp)
 40030b4:	0085c83a 	sub	r2,zero,r2
 40030b8:	18800015 	stw	r2,0(r3)
    rc = -1;
 40030bc:	00bfffc4 	movi	r2,-1
 40030c0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 40030c4:	e0bffa17 	ldw	r2,-24(fp)
}
 40030c8:	e037883a 	mov	sp,fp
 40030cc:	dfc00117 	ldw	ra,4(sp)
 40030d0:	df000017 	ldw	fp,0(sp)
 40030d4:	dec00204 	addi	sp,sp,8
 40030d8:	f800283a 	ret

040030dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40030dc:	defffd04 	addi	sp,sp,-12
 40030e0:	dfc00215 	stw	ra,8(sp)
 40030e4:	df000115 	stw	fp,4(sp)
 40030e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40030ec:	00810034 	movhi	r2,1024
 40030f0:	109c0c04 	addi	r2,r2,28720
 40030f4:	10800017 	ldw	r2,0(r2)
 40030f8:	1005003a 	cmpeq	r2,r2,zero
 40030fc:	1000061e 	bne	r2,zero,4003118 <alt_get_errno+0x3c>
 4003100:	00810034 	movhi	r2,1024
 4003104:	109c0c04 	addi	r2,r2,28720
 4003108:	10800017 	ldw	r2,0(r2)
 400310c:	103ee83a 	callr	r2
 4003110:	e0bfff15 	stw	r2,-4(fp)
 4003114:	00000306 	br	4003124 <alt_get_errno+0x48>
 4003118:	00810074 	movhi	r2,1025
 400311c:	10a2a604 	addi	r2,r2,-30056
 4003120:	e0bfff15 	stw	r2,-4(fp)
 4003124:	e0bfff17 	ldw	r2,-4(fp)
}
 4003128:	e037883a 	mov	sp,fp
 400312c:	dfc00117 	ldw	ra,4(sp)
 4003130:	df000017 	ldw	fp,0(sp)
 4003134:	dec00204 	addi	sp,sp,8
 4003138:	f800283a 	ret

0400313c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400313c:	defffd04 	addi	sp,sp,-12
 4003140:	dfc00215 	stw	ra,8(sp)
 4003144:	df000115 	stw	fp,4(sp)
 4003148:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400314c:	0009883a 	mov	r4,zero
 4003150:	40036040 	call	4003604 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4003154:	40036380 	call	4003638 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4003158:	01010034 	movhi	r4,1024
 400315c:	21157704 	addi	r4,r4,21980
 4003160:	01410034 	movhi	r5,1024
 4003164:	29557704 	addi	r5,r5,21980
 4003168:	01810034 	movhi	r6,1024
 400316c:	31957704 	addi	r6,r6,21980
 4003170:	40049ac0 	call	40049ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4003174:	40045240 	call	4004524 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4003178:	01010034 	movhi	r4,1024
 400317c:	21116204 	addi	r4,r4,17800
 4003180:	40051a80 	call	40051a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4003184:	d126a417 	ldw	r4,-25968(gp)
 4003188:	d166a517 	ldw	r5,-25964(gp)
 400318c:	d1a6a617 	ldw	r6,-25960(gp)
 4003190:	40001e00 	call	40001e0 <main>
 4003194:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4003198:	01000044 	movi	r4,1
 400319c:	4002b240 	call	4002b24 <close>
  exit (result);
 40031a0:	e13fff17 	ldw	r4,-4(fp)
 40031a4:	40051bc0 	call	40051bc <exit>

040031a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 40031a8:	defffe04 	addi	sp,sp,-8
 40031ac:	df000115 	stw	fp,4(sp)
 40031b0:	df000104 	addi	fp,sp,4
 40031b4:	e13fff15 	stw	r4,-4(fp)
}
 40031b8:	e037883a 	mov	sp,fp
 40031bc:	df000017 	ldw	fp,0(sp)
 40031c0:	dec00104 	addi	sp,sp,4
 40031c4:	f800283a 	ret

040031c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40031c8:	defffe04 	addi	sp,sp,-8
 40031cc:	df000115 	stw	fp,4(sp)
 40031d0:	df000104 	addi	fp,sp,4
 40031d4:	e13fff15 	stw	r4,-4(fp)
}
 40031d8:	e037883a 	mov	sp,fp
 40031dc:	df000017 	ldw	fp,0(sp)
 40031e0:	dec00104 	addi	sp,sp,4
 40031e4:	f800283a 	ret

040031e8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40031e8:	defff704 	addi	sp,sp,-36
 40031ec:	dfc00815 	stw	ra,32(sp)
 40031f0:	df000715 	stw	fp,28(sp)
 40031f4:	df000704 	addi	fp,sp,28
 40031f8:	e13ffb15 	stw	r4,-20(fp)
 40031fc:	e17ffc15 	stw	r5,-16(fp)
 4003200:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003204:	e0bffb17 	ldw	r2,-20(fp)
 4003208:	1004803a 	cmplt	r2,r2,zero
 400320c:	1000081e 	bne	r2,zero,4003230 <read+0x48>
 4003210:	e0bffb17 	ldw	r2,-20(fp)
 4003214:	10800324 	muli	r2,r2,12
 4003218:	1007883a 	mov	r3,r2
 400321c:	00810034 	movhi	r2,1024
 4003220:	10978b04 	addi	r2,r2,24108
 4003224:	1887883a 	add	r3,r3,r2
 4003228:	e0ffff15 	stw	r3,-4(fp)
 400322c:	00000106 	br	4003234 <read+0x4c>
 4003230:	e03fff15 	stw	zero,-4(fp)
 4003234:	e0bfff17 	ldw	r2,-4(fp)
 4003238:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400323c:	e0bffa17 	ldw	r2,-24(fp)
 4003240:	1005003a 	cmpeq	r2,r2,zero
 4003244:	1000241e 	bne	r2,zero,40032d8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4003248:	e0bffa17 	ldw	r2,-24(fp)
 400324c:	10800217 	ldw	r2,8(r2)
 4003250:	108000cc 	andi	r2,r2,3
 4003254:	10800060 	cmpeqi	r2,r2,1
 4003258:	10001a1e 	bne	r2,zero,40032c4 <read+0xdc>
 400325c:	e0bffa17 	ldw	r2,-24(fp)
 4003260:	10800017 	ldw	r2,0(r2)
 4003264:	10800517 	ldw	r2,20(r2)
 4003268:	1005003a 	cmpeq	r2,r2,zero
 400326c:	1000151e 	bne	r2,zero,40032c4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4003270:	e0bffa17 	ldw	r2,-24(fp)
 4003274:	10800017 	ldw	r2,0(r2)
 4003278:	10800517 	ldw	r2,20(r2)
 400327c:	e17ffc17 	ldw	r5,-16(fp)
 4003280:	e1bffd17 	ldw	r6,-12(fp)
 4003284:	e13ffa17 	ldw	r4,-24(fp)
 4003288:	103ee83a 	callr	r2
 400328c:	e0bff915 	stw	r2,-28(fp)
 4003290:	e0bff917 	ldw	r2,-28(fp)
 4003294:	1004403a 	cmpge	r2,r2,zero
 4003298:	1000071e 	bne	r2,zero,40032b8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 400329c:	40033080 	call	4003308 <alt_get_errno>
 40032a0:	e0fff917 	ldw	r3,-28(fp)
 40032a4:	00c7c83a 	sub	r3,zero,r3
 40032a8:	10c00015 	stw	r3,0(r2)
          return -1;
 40032ac:	00bfffc4 	movi	r2,-1
 40032b0:	e0bffe15 	stw	r2,-8(fp)
 40032b4:	00000e06 	br	40032f0 <read+0x108>
        }
        return rval;
 40032b8:	e0bff917 	ldw	r2,-28(fp)
 40032bc:	e0bffe15 	stw	r2,-8(fp)
 40032c0:	00000b06 	br	40032f0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40032c4:	40033080 	call	4003308 <alt_get_errno>
 40032c8:	1007883a 	mov	r3,r2
 40032cc:	00800344 	movi	r2,13
 40032d0:	18800015 	stw	r2,0(r3)
 40032d4:	00000406 	br	40032e8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40032d8:	40033080 	call	4003308 <alt_get_errno>
 40032dc:	1007883a 	mov	r3,r2
 40032e0:	00801444 	movi	r2,81
 40032e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40032e8:	00bfffc4 	movi	r2,-1
 40032ec:	e0bffe15 	stw	r2,-8(fp)
 40032f0:	e0bffe17 	ldw	r2,-8(fp)
}
 40032f4:	e037883a 	mov	sp,fp
 40032f8:	dfc00117 	ldw	ra,4(sp)
 40032fc:	df000017 	ldw	fp,0(sp)
 4003300:	dec00204 	addi	sp,sp,8
 4003304:	f800283a 	ret

04003308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003308:	defffd04 	addi	sp,sp,-12
 400330c:	dfc00215 	stw	ra,8(sp)
 4003310:	df000115 	stw	fp,4(sp)
 4003314:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003318:	00810034 	movhi	r2,1024
 400331c:	109c0c04 	addi	r2,r2,28720
 4003320:	10800017 	ldw	r2,0(r2)
 4003324:	1005003a 	cmpeq	r2,r2,zero
 4003328:	1000061e 	bne	r2,zero,4003344 <alt_get_errno+0x3c>
 400332c:	00810034 	movhi	r2,1024
 4003330:	109c0c04 	addi	r2,r2,28720
 4003334:	10800017 	ldw	r2,0(r2)
 4003338:	103ee83a 	callr	r2
 400333c:	e0bfff15 	stw	r2,-4(fp)
 4003340:	00000306 	br	4003350 <alt_get_errno+0x48>
 4003344:	00810074 	movhi	r2,1025
 4003348:	10a2a604 	addi	r2,r2,-30056
 400334c:	e0bfff15 	stw	r2,-4(fp)
 4003350:	e0bfff17 	ldw	r2,-4(fp)
}
 4003354:	e037883a 	mov	sp,fp
 4003358:	dfc00117 	ldw	ra,4(sp)
 400335c:	df000017 	ldw	fp,0(sp)
 4003360:	dec00204 	addi	sp,sp,8
 4003364:	f800283a 	ret

04003368 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4003368:	defffe04 	addi	sp,sp,-8
 400336c:	df000115 	stw	fp,4(sp)
 4003370:	df000104 	addi	fp,sp,4
 4003374:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4003378:	e0bfff17 	ldw	r2,-4(fp)
 400337c:	108000d0 	cmplti	r2,r2,3
 4003380:	10000d1e 	bne	r2,zero,40033b8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4003384:	e0bfff17 	ldw	r2,-4(fp)
 4003388:	00c10034 	movhi	r3,1024
 400338c:	18d78b04 	addi	r3,r3,24108
 4003390:	10800324 	muli	r2,r2,12
 4003394:	10c5883a 	add	r2,r2,r3
 4003398:	10800204 	addi	r2,r2,8
 400339c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40033a0:	e0bfff17 	ldw	r2,-4(fp)
 40033a4:	00c10034 	movhi	r3,1024
 40033a8:	18d78b04 	addi	r3,r3,24108
 40033ac:	10800324 	muli	r2,r2,12
 40033b0:	10c5883a 	add	r2,r2,r3
 40033b4:	10000015 	stw	zero,0(r2)
  }
}
 40033b8:	e037883a 	mov	sp,fp
 40033bc:	df000017 	ldw	fp,0(sp)
 40033c0:	dec00104 	addi	sp,sp,4
 40033c4:	f800283a 	ret

040033c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40033c8:	defff804 	addi	sp,sp,-32
 40033cc:	df000715 	stw	fp,28(sp)
 40033d0:	df000704 	addi	fp,sp,28
 40033d4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40033d8:	0005303a 	rdctl	r2,status
 40033dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40033e0:	e0fffb17 	ldw	r3,-20(fp)
 40033e4:	00bfff84 	movi	r2,-2
 40033e8:	1884703a 	and	r2,r3,r2
 40033ec:	1001703a 	wrctl	status,r2
  
  return context;
 40033f0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40033f4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40033f8:	d0a00a17 	ldw	r2,-32728(gp)
 40033fc:	10c000c4 	addi	r3,r2,3
 4003400:	00bfff04 	movi	r2,-4
 4003404:	1884703a 	and	r2,r3,r2
 4003408:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400340c:	d0e00a17 	ldw	r3,-32728(gp)
 4003410:	e0bffe17 	ldw	r2,-8(fp)
 4003414:	1887883a 	add	r3,r3,r2
 4003418:	00812034 	movhi	r2,1152
 400341c:	10800004 	addi	r2,r2,0
 4003420:	10c0072e 	bgeu	r2,r3,4003440 <sbrk+0x78>
 4003424:	e0bffd17 	ldw	r2,-12(fp)
 4003428:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400342c:	e0bffa17 	ldw	r2,-24(fp)
 4003430:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4003434:	00bfffc4 	movi	r2,-1
 4003438:	e0bfff15 	stw	r2,-4(fp)
 400343c:	00000c06 	br	4003470 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 4003440:	d0a00a17 	ldw	r2,-32728(gp)
 4003444:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 4003448:	d0e00a17 	ldw	r3,-32728(gp)
 400344c:	e0bffe17 	ldw	r2,-8(fp)
 4003450:	1885883a 	add	r2,r3,r2
 4003454:	d0a00a15 	stw	r2,-32728(gp)
 4003458:	e0bffd17 	ldw	r2,-12(fp)
 400345c:	e0bff915 	stw	r2,-28(fp)
 4003460:	e0bff917 	ldw	r2,-28(fp)
 4003464:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4003468:	e0bffc17 	ldw	r2,-16(fp)
 400346c:	e0bfff15 	stw	r2,-4(fp)
 4003470:	e0bfff17 	ldw	r2,-4(fp)
} 
 4003474:	e037883a 	mov	sp,fp
 4003478:	df000017 	ldw	fp,0(sp)
 400347c:	dec00104 	addi	sp,sp,4
 4003480:	f800283a 	ret

04003484 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4003484:	defff704 	addi	sp,sp,-36
 4003488:	dfc00815 	stw	ra,32(sp)
 400348c:	df000715 	stw	fp,28(sp)
 4003490:	df000704 	addi	fp,sp,28
 4003494:	e13ffb15 	stw	r4,-20(fp)
 4003498:	e17ffc15 	stw	r5,-16(fp)
 400349c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40034a0:	e0bffb17 	ldw	r2,-20(fp)
 40034a4:	1004803a 	cmplt	r2,r2,zero
 40034a8:	1000081e 	bne	r2,zero,40034cc <write+0x48>
 40034ac:	e0bffb17 	ldw	r2,-20(fp)
 40034b0:	10800324 	muli	r2,r2,12
 40034b4:	1007883a 	mov	r3,r2
 40034b8:	00810034 	movhi	r2,1024
 40034bc:	10978b04 	addi	r2,r2,24108
 40034c0:	1887883a 	add	r3,r3,r2
 40034c4:	e0ffff15 	stw	r3,-4(fp)
 40034c8:	00000106 	br	40034d0 <write+0x4c>
 40034cc:	e03fff15 	stw	zero,-4(fp)
 40034d0:	e0bfff17 	ldw	r2,-4(fp)
 40034d4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 40034d8:	e0bffa17 	ldw	r2,-24(fp)
 40034dc:	1005003a 	cmpeq	r2,r2,zero
 40034e0:	1000241e 	bne	r2,zero,4003574 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40034e4:	e0bffa17 	ldw	r2,-24(fp)
 40034e8:	10800217 	ldw	r2,8(r2)
 40034ec:	108000cc 	andi	r2,r2,3
 40034f0:	1005003a 	cmpeq	r2,r2,zero
 40034f4:	10001a1e 	bne	r2,zero,4003560 <write+0xdc>
 40034f8:	e0bffa17 	ldw	r2,-24(fp)
 40034fc:	10800017 	ldw	r2,0(r2)
 4003500:	10800617 	ldw	r2,24(r2)
 4003504:	1005003a 	cmpeq	r2,r2,zero
 4003508:	1000151e 	bne	r2,zero,4003560 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400350c:	e0bffa17 	ldw	r2,-24(fp)
 4003510:	10800017 	ldw	r2,0(r2)
 4003514:	10800617 	ldw	r2,24(r2)
 4003518:	e17ffc17 	ldw	r5,-16(fp)
 400351c:	e1bffd17 	ldw	r6,-12(fp)
 4003520:	e13ffa17 	ldw	r4,-24(fp)
 4003524:	103ee83a 	callr	r2
 4003528:	e0bff915 	stw	r2,-28(fp)
 400352c:	e0bff917 	ldw	r2,-28(fp)
 4003530:	1004403a 	cmpge	r2,r2,zero
 4003534:	1000071e 	bne	r2,zero,4003554 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 4003538:	40035a40 	call	40035a4 <alt_get_errno>
 400353c:	e0fff917 	ldw	r3,-28(fp)
 4003540:	00c7c83a 	sub	r3,zero,r3
 4003544:	10c00015 	stw	r3,0(r2)
        return -1;
 4003548:	00bfffc4 	movi	r2,-1
 400354c:	e0bffe15 	stw	r2,-8(fp)
 4003550:	00000e06 	br	400358c <write+0x108>
      }
      return rval;
 4003554:	e0bff917 	ldw	r2,-28(fp)
 4003558:	e0bffe15 	stw	r2,-8(fp)
 400355c:	00000b06 	br	400358c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4003560:	40035a40 	call	40035a4 <alt_get_errno>
 4003564:	1007883a 	mov	r3,r2
 4003568:	00800344 	movi	r2,13
 400356c:	18800015 	stw	r2,0(r3)
 4003570:	00000406 	br	4003584 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4003574:	40035a40 	call	40035a4 <alt_get_errno>
 4003578:	1007883a 	mov	r3,r2
 400357c:	00801444 	movi	r2,81
 4003580:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003584:	00bfffc4 	movi	r2,-1
 4003588:	e0bffe15 	stw	r2,-8(fp)
 400358c:	e0bffe17 	ldw	r2,-8(fp)
}
 4003590:	e037883a 	mov	sp,fp
 4003594:	dfc00117 	ldw	ra,4(sp)
 4003598:	df000017 	ldw	fp,0(sp)
 400359c:	dec00204 	addi	sp,sp,8
 40035a0:	f800283a 	ret

040035a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40035a4:	defffd04 	addi	sp,sp,-12
 40035a8:	dfc00215 	stw	ra,8(sp)
 40035ac:	df000115 	stw	fp,4(sp)
 40035b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40035b4:	00810034 	movhi	r2,1024
 40035b8:	109c0c04 	addi	r2,r2,28720
 40035bc:	10800017 	ldw	r2,0(r2)
 40035c0:	1005003a 	cmpeq	r2,r2,zero
 40035c4:	1000061e 	bne	r2,zero,40035e0 <alt_get_errno+0x3c>
 40035c8:	00810034 	movhi	r2,1024
 40035cc:	109c0c04 	addi	r2,r2,28720
 40035d0:	10800017 	ldw	r2,0(r2)
 40035d4:	103ee83a 	callr	r2
 40035d8:	e0bfff15 	stw	r2,-4(fp)
 40035dc:	00000306 	br	40035ec <alt_get_errno+0x48>
 40035e0:	00810074 	movhi	r2,1025
 40035e4:	10a2a604 	addi	r2,r2,-30056
 40035e8:	e0bfff15 	stw	r2,-4(fp)
 40035ec:	e0bfff17 	ldw	r2,-4(fp)
}
 40035f0:	e037883a 	mov	sp,fp
 40035f4:	dfc00117 	ldw	ra,4(sp)
 40035f8:	df000017 	ldw	fp,0(sp)
 40035fc:	dec00204 	addi	sp,sp,8
 4003600:	f800283a 	ret

04003604 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4003604:	defffd04 	addi	sp,sp,-12
 4003608:	dfc00215 	stw	ra,8(sp)
 400360c:	df000115 	stw	fp,4(sp)
 4003610:	df000104 	addi	fp,sp,4
 4003614:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 4003618:	4004e8c0 	call	4004e8c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400361c:	00800044 	movi	r2,1
 4003620:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4003624:	e037883a 	mov	sp,fp
 4003628:	dfc00117 	ldw	ra,4(sp)
 400362c:	df000017 	ldw	fp,0(sp)
 4003630:	dec00204 	addi	sp,sp,8
 4003634:	f800283a 	ret

04003638 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4003638:	defffe04 	addi	sp,sp,-8
 400363c:	dfc00115 	stw	ra,4(sp)
 4003640:	df000015 	stw	fp,0(sp)
 4003644:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
 4003648:	01020474 	movhi	r4,2065
 400364c:	21240004 	addi	r4,r4,-28672
 4003650:	000b883a 	mov	r5,zero
 4003654:	01800044 	movi	r6,1
 4003658:	01c00044 	movi	r7,1
 400365c:	40041e80 	call	40041e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
 4003660:	01010034 	movhi	r4,1024
 4003664:	2117f504 	addi	r4,r4,24532
 4003668:	000b883a 	mov	r5,zero
 400366c:	000d883a 	mov	r6,zero
 4003670:	40038140 	call	4003814 <altera_avalon_jtag_uart_init>
 4003674:	01010034 	movhi	r4,1024
 4003678:	2117eb04 	addi	r4,r4,24492
 400367c:	40036940 	call	4003694 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 4003680:	e037883a 	mov	sp,fp
 4003684:	dfc00117 	ldw	ra,4(sp)
 4003688:	df000017 	ldw	fp,0(sp)
 400368c:	dec00204 	addi	sp,sp,8
 4003690:	f800283a 	ret

04003694 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4003694:	defffd04 	addi	sp,sp,-12
 4003698:	dfc00215 	stw	ra,8(sp)
 400369c:	df000115 	stw	fp,4(sp)
 40036a0:	df000104 	addi	fp,sp,4
 40036a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40036a8:	e13fff17 	ldw	r4,-4(fp)
 40036ac:	01410034 	movhi	r5,1024
 40036b0:	295c0904 	addi	r5,r5,28708
 40036b4:	40044100 	call	4004410 <alt_dev_llist_insert>
}
 40036b8:	e037883a 	mov	sp,fp
 40036bc:	dfc00117 	ldw	ra,4(sp)
 40036c0:	df000017 	ldw	fp,0(sp)
 40036c4:	dec00204 	addi	sp,sp,8
 40036c8:	f800283a 	ret

040036cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40036cc:	defffa04 	addi	sp,sp,-24
 40036d0:	dfc00515 	stw	ra,20(sp)
 40036d4:	df000415 	stw	fp,16(sp)
 40036d8:	df000404 	addi	fp,sp,16
 40036dc:	e13ffd15 	stw	r4,-12(fp)
 40036e0:	e17ffe15 	stw	r5,-8(fp)
 40036e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40036e8:	e0bffd17 	ldw	r2,-12(fp)
 40036ec:	10800017 	ldw	r2,0(r2)
 40036f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40036f4:	e0bffc17 	ldw	r2,-16(fp)
 40036f8:	11000a04 	addi	r4,r2,40
 40036fc:	e0bffd17 	ldw	r2,-12(fp)
 4003700:	11c00217 	ldw	r7,8(r2)
 4003704:	e17ffe17 	ldw	r5,-8(fp)
 4003708:	e1bfff17 	ldw	r6,-4(fp)
 400370c:	4003d140 	call	4003d14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4003710:	e037883a 	mov	sp,fp
 4003714:	dfc00117 	ldw	ra,4(sp)
 4003718:	df000017 	ldw	fp,0(sp)
 400371c:	dec00204 	addi	sp,sp,8
 4003720:	f800283a 	ret

04003724 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4003724:	defffa04 	addi	sp,sp,-24
 4003728:	dfc00515 	stw	ra,20(sp)
 400372c:	df000415 	stw	fp,16(sp)
 4003730:	df000404 	addi	fp,sp,16
 4003734:	e13ffd15 	stw	r4,-12(fp)
 4003738:	e17ffe15 	stw	r5,-8(fp)
 400373c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003740:	e0bffd17 	ldw	r2,-12(fp)
 4003744:	10800017 	ldw	r2,0(r2)
 4003748:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400374c:	e0bffc17 	ldw	r2,-16(fp)
 4003750:	11000a04 	addi	r4,r2,40
 4003754:	e0bffd17 	ldw	r2,-12(fp)
 4003758:	11c00217 	ldw	r7,8(r2)
 400375c:	e17ffe17 	ldw	r5,-8(fp)
 4003760:	e1bfff17 	ldw	r6,-4(fp)
 4003764:	4003f380 	call	4003f38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4003768:	e037883a 	mov	sp,fp
 400376c:	dfc00117 	ldw	ra,4(sp)
 4003770:	df000017 	ldw	fp,0(sp)
 4003774:	dec00204 	addi	sp,sp,8
 4003778:	f800283a 	ret

0400377c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400377c:	defffc04 	addi	sp,sp,-16
 4003780:	dfc00315 	stw	ra,12(sp)
 4003784:	df000215 	stw	fp,8(sp)
 4003788:	df000204 	addi	fp,sp,8
 400378c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003790:	e0bfff17 	ldw	r2,-4(fp)
 4003794:	10800017 	ldw	r2,0(r2)
 4003798:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400379c:	e0bffe17 	ldw	r2,-8(fp)
 40037a0:	11000a04 	addi	r4,r2,40
 40037a4:	e0bfff17 	ldw	r2,-4(fp)
 40037a8:	11400217 	ldw	r5,8(r2)
 40037ac:	4003bac0 	call	4003bac <altera_avalon_jtag_uart_close>
}
 40037b0:	e037883a 	mov	sp,fp
 40037b4:	dfc00117 	ldw	ra,4(sp)
 40037b8:	df000017 	ldw	fp,0(sp)
 40037bc:	dec00204 	addi	sp,sp,8
 40037c0:	f800283a 	ret

040037c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40037c4:	defffa04 	addi	sp,sp,-24
 40037c8:	dfc00515 	stw	ra,20(sp)
 40037cc:	df000415 	stw	fp,16(sp)
 40037d0:	df000404 	addi	fp,sp,16
 40037d4:	e13ffd15 	stw	r4,-12(fp)
 40037d8:	e17ffe15 	stw	r5,-8(fp)
 40037dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40037e0:	e0bffd17 	ldw	r2,-12(fp)
 40037e4:	10800017 	ldw	r2,0(r2)
 40037e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40037ec:	e0bffc17 	ldw	r2,-16(fp)
 40037f0:	11000a04 	addi	r4,r2,40
 40037f4:	e17ffe17 	ldw	r5,-8(fp)
 40037f8:	e1bfff17 	ldw	r6,-4(fp)
 40037fc:	4003c200 	call	4003c20 <altera_avalon_jtag_uart_ioctl>
}
 4003800:	e037883a 	mov	sp,fp
 4003804:	dfc00117 	ldw	ra,4(sp)
 4003808:	df000017 	ldw	fp,0(sp)
 400380c:	dec00204 	addi	sp,sp,8
 4003810:	f800283a 	ret

04003814 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4003814:	defffa04 	addi	sp,sp,-24
 4003818:	dfc00515 	stw	ra,20(sp)
 400381c:	df000415 	stw	fp,16(sp)
 4003820:	df000404 	addi	fp,sp,16
 4003824:	e13ffd15 	stw	r4,-12(fp)
 4003828:	e17ffe15 	stw	r5,-8(fp)
 400382c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003830:	e0fffd17 	ldw	r3,-12(fp)
 4003834:	00800044 	movi	r2,1
 4003838:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400383c:	e0bffd17 	ldw	r2,-12(fp)
 4003840:	10800017 	ldw	r2,0(r2)
 4003844:	11000104 	addi	r4,r2,4
 4003848:	e0bffd17 	ldw	r2,-12(fp)
 400384c:	10800817 	ldw	r2,32(r2)
 4003850:	1007883a 	mov	r3,r2
 4003854:	2005883a 	mov	r2,r4
 4003858:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400385c:	e13ffe17 	ldw	r4,-8(fp)
 4003860:	e17fff17 	ldw	r5,-4(fp)
 4003864:	d8000015 	stw	zero,0(sp)
 4003868:	01810034 	movhi	r6,1024
 400386c:	318e3504 	addi	r6,r6,14548
 4003870:	e1fffd17 	ldw	r7,-12(fp)
 4003874:	400461c0 	call	400461c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4003878:	e0bffd17 	ldw	r2,-12(fp)
 400387c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4003880:	e0bffd17 	ldw	r2,-12(fp)
 4003884:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4003888:	00810074 	movhi	r2,1025
 400388c:	10a2ab04 	addi	r2,r2,-30036
 4003890:	10800017 	ldw	r2,0(r2)
 4003894:	100b883a 	mov	r5,r2
 4003898:	01810034 	movhi	r6,1024
 400389c:	318ebf04 	addi	r6,r6,15100
 40038a0:	e1fffd17 	ldw	r7,-12(fp)
 40038a4:	40042780 	call	4004278 <alt_alarm_start>
 40038a8:	1004403a 	cmpge	r2,r2,zero
 40038ac:	1000041e 	bne	r2,zero,40038c0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40038b0:	e0fffd17 	ldw	r3,-12(fp)
 40038b4:	00a00034 	movhi	r2,32768
 40038b8:	10bfffc4 	addi	r2,r2,-1
 40038bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40038c0:	e037883a 	mov	sp,fp
 40038c4:	dfc00117 	ldw	ra,4(sp)
 40038c8:	df000017 	ldw	fp,0(sp)
 40038cc:	dec00204 	addi	sp,sp,8
 40038d0:	f800283a 	ret

040038d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40038d4:	defff804 	addi	sp,sp,-32
 40038d8:	df000715 	stw	fp,28(sp)
 40038dc:	df000704 	addi	fp,sp,28
 40038e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40038e4:	e0bfff17 	ldw	r2,-4(fp)
 40038e8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 40038ec:	e0bffe17 	ldw	r2,-8(fp)
 40038f0:	10800017 	ldw	r2,0(r2)
 40038f4:	e0bffd15 	stw	r2,-12(fp)
 40038f8:	00000006 	br	40038fc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40038fc:	e0bffd17 	ldw	r2,-12(fp)
 4003900:	10800104 	addi	r2,r2,4
 4003904:	10800037 	ldwio	r2,0(r2)
 4003908:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400390c:	e0bffc17 	ldw	r2,-16(fp)
 4003910:	1080c00c 	andi	r2,r2,768
 4003914:	1005003a 	cmpeq	r2,r2,zero
 4003918:	1000741e 	bne	r2,zero,4003aec <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400391c:	e0bffc17 	ldw	r2,-16(fp)
 4003920:	1080400c 	andi	r2,r2,256
 4003924:	1005003a 	cmpeq	r2,r2,zero
 4003928:	1000351e 	bne	r2,zero,4003a00 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400392c:	00800074 	movhi	r2,1
 4003930:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003934:	e0bffe17 	ldw	r2,-8(fp)
 4003938:	10800a17 	ldw	r2,40(r2)
 400393c:	10800044 	addi	r2,r2,1
 4003940:	1081ffcc 	andi	r2,r2,2047
 4003944:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 4003948:	e0bffe17 	ldw	r2,-8(fp)
 400394c:	10c00b17 	ldw	r3,44(r2)
 4003950:	e0bffa17 	ldw	r2,-24(fp)
 4003954:	18801626 	beq	r3,r2,40039b0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4003958:	e0bffd17 	ldw	r2,-12(fp)
 400395c:	10800037 	ldwio	r2,0(r2)
 4003960:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4003964:	e0bffb17 	ldw	r2,-20(fp)
 4003968:	10a0000c 	andi	r2,r2,32768
 400396c:	1005003a 	cmpeq	r2,r2,zero
 4003970:	10000f1e 	bne	r2,zero,40039b0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4003974:	e0bffe17 	ldw	r2,-8(fp)
 4003978:	10c00a17 	ldw	r3,40(r2)
 400397c:	e0bffb17 	ldw	r2,-20(fp)
 4003980:	1009883a 	mov	r4,r2
 4003984:	e0bffe17 	ldw	r2,-8(fp)
 4003988:	1885883a 	add	r2,r3,r2
 400398c:	10800e04 	addi	r2,r2,56
 4003990:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003994:	e0bffe17 	ldw	r2,-8(fp)
 4003998:	10800a17 	ldw	r2,40(r2)
 400399c:	10800044 	addi	r2,r2,1
 40039a0:	10c1ffcc 	andi	r3,r2,2047
 40039a4:	e0bffe17 	ldw	r2,-8(fp)
 40039a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40039ac:	003fe106 	br	4003934 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40039b0:	e0bffb17 	ldw	r2,-20(fp)
 40039b4:	10bfffec 	andhi	r2,r2,65535
 40039b8:	1005003a 	cmpeq	r2,r2,zero
 40039bc:	1000101e 	bne	r2,zero,4003a00 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40039c0:	e0bffe17 	ldw	r2,-8(fp)
 40039c4:	10c00817 	ldw	r3,32(r2)
 40039c8:	00bfff84 	movi	r2,-2
 40039cc:	1886703a 	and	r3,r3,r2
 40039d0:	e0bffe17 	ldw	r2,-8(fp)
 40039d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40039d8:	e0bffd17 	ldw	r2,-12(fp)
 40039dc:	11000104 	addi	r4,r2,4
 40039e0:	e0bffe17 	ldw	r2,-8(fp)
 40039e4:	10800817 	ldw	r2,32(r2)
 40039e8:	1007883a 	mov	r3,r2
 40039ec:	2005883a 	mov	r2,r4
 40039f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40039f4:	e0bffd17 	ldw	r2,-12(fp)
 40039f8:	10800104 	addi	r2,r2,4
 40039fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4003a00:	e0bffc17 	ldw	r2,-16(fp)
 4003a04:	1080800c 	andi	r2,r2,512
 4003a08:	1005003a 	cmpeq	r2,r2,zero
 4003a0c:	103fbb1e 	bne	r2,zero,40038fc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4003a10:	e0bffc17 	ldw	r2,-16(fp)
 4003a14:	10bfffec 	andhi	r2,r2,65535
 4003a18:	1004d43a 	srli	r2,r2,16
 4003a1c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4003a20:	00001506 	br	4003a78 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4003a24:	e13ffd17 	ldw	r4,-12(fp)
 4003a28:	e0bffe17 	ldw	r2,-8(fp)
 4003a2c:	10c00d17 	ldw	r3,52(r2)
 4003a30:	e0bffe17 	ldw	r2,-8(fp)
 4003a34:	1885883a 	add	r2,r3,r2
 4003a38:	10820e04 	addi	r2,r2,2104
 4003a3c:	10800003 	ldbu	r2,0(r2)
 4003a40:	10c03fcc 	andi	r3,r2,255
 4003a44:	18c0201c 	xori	r3,r3,128
 4003a48:	18ffe004 	addi	r3,r3,-128
 4003a4c:	2005883a 	mov	r2,r4
 4003a50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003a54:	e0bffe17 	ldw	r2,-8(fp)
 4003a58:	10800d17 	ldw	r2,52(r2)
 4003a5c:	10800044 	addi	r2,r2,1
 4003a60:	10c1ffcc 	andi	r3,r2,2047
 4003a64:	e0bffe17 	ldw	r2,-8(fp)
 4003a68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4003a6c:	e0bff917 	ldw	r2,-28(fp)
 4003a70:	10bfffc4 	addi	r2,r2,-1
 4003a74:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4003a78:	e0bff917 	ldw	r2,-28(fp)
 4003a7c:	1005003a 	cmpeq	r2,r2,zero
 4003a80:	1000051e 	bne	r2,zero,4003a98 <altera_avalon_jtag_uart_irq+0x1c4>
 4003a84:	e0bffe17 	ldw	r2,-8(fp)
 4003a88:	10c00d17 	ldw	r3,52(r2)
 4003a8c:	e0bffe17 	ldw	r2,-8(fp)
 4003a90:	10800c17 	ldw	r2,48(r2)
 4003a94:	18bfe31e 	bne	r3,r2,4003a24 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4003a98:	e0bff917 	ldw	r2,-28(fp)
 4003a9c:	1005003a 	cmpeq	r2,r2,zero
 4003aa0:	103f961e 	bne	r2,zero,40038fc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4003aa4:	e0bffe17 	ldw	r2,-8(fp)
 4003aa8:	10c00817 	ldw	r3,32(r2)
 4003aac:	00bfff44 	movi	r2,-3
 4003ab0:	1886703a 	and	r3,r3,r2
 4003ab4:	e0bffe17 	ldw	r2,-8(fp)
 4003ab8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4003abc:	e0bffe17 	ldw	r2,-8(fp)
 4003ac0:	10800017 	ldw	r2,0(r2)
 4003ac4:	11000104 	addi	r4,r2,4
 4003ac8:	e0bffe17 	ldw	r2,-8(fp)
 4003acc:	10800817 	ldw	r2,32(r2)
 4003ad0:	1007883a 	mov	r3,r2
 4003ad4:	2005883a 	mov	r2,r4
 4003ad8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003adc:	e0bffd17 	ldw	r2,-12(fp)
 4003ae0:	10800104 	addi	r2,r2,4
 4003ae4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4003ae8:	003f8406 	br	40038fc <altera_avalon_jtag_uart_irq+0x28>
}
 4003aec:	e037883a 	mov	sp,fp
 4003af0:	df000017 	ldw	fp,0(sp)
 4003af4:	dec00104 	addi	sp,sp,4
 4003af8:	f800283a 	ret

04003afc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4003afc:	defffc04 	addi	sp,sp,-16
 4003b00:	df000315 	stw	fp,12(sp)
 4003b04:	df000304 	addi	fp,sp,12
 4003b08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4003b0c:	e0bfff17 	ldw	r2,-4(fp)
 4003b10:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4003b14:	e0bffe17 	ldw	r2,-8(fp)
 4003b18:	10800017 	ldw	r2,0(r2)
 4003b1c:	10800104 	addi	r2,r2,4
 4003b20:	10800037 	ldwio	r2,0(r2)
 4003b24:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4003b28:	e0bffd17 	ldw	r2,-12(fp)
 4003b2c:	1081000c 	andi	r2,r2,1024
 4003b30:	1005003a 	cmpeq	r2,r2,zero
 4003b34:	10000c1e 	bne	r2,zero,4003b68 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4003b38:	e0bffe17 	ldw	r2,-8(fp)
 4003b3c:	10800017 	ldw	r2,0(r2)
 4003b40:	11000104 	addi	r4,r2,4
 4003b44:	e0bffe17 	ldw	r2,-8(fp)
 4003b48:	10800817 	ldw	r2,32(r2)
 4003b4c:	10810014 	ori	r2,r2,1024
 4003b50:	1007883a 	mov	r3,r2
 4003b54:	2005883a 	mov	r2,r4
 4003b58:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4003b5c:	e0bffe17 	ldw	r2,-8(fp)
 4003b60:	10000915 	stw	zero,36(r2)
 4003b64:	00000a06 	br	4003b90 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4003b68:	e0bffe17 	ldw	r2,-8(fp)
 4003b6c:	10c00917 	ldw	r3,36(r2)
 4003b70:	00a00034 	movhi	r2,32768
 4003b74:	10bfff04 	addi	r2,r2,-4
 4003b78:	10c00536 	bltu	r2,r3,4003b90 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 4003b7c:	e0bffe17 	ldw	r2,-8(fp)
 4003b80:	10800917 	ldw	r2,36(r2)
 4003b84:	10c00044 	addi	r3,r2,1
 4003b88:	e0bffe17 	ldw	r2,-8(fp)
 4003b8c:	10c00915 	stw	r3,36(r2)
 4003b90:	00810074 	movhi	r2,1025
 4003b94:	10a2ab04 	addi	r2,r2,-30036
 4003b98:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4003b9c:	e037883a 	mov	sp,fp
 4003ba0:	df000017 	ldw	fp,0(sp)
 4003ba4:	dec00104 	addi	sp,sp,4
 4003ba8:	f800283a 	ret

04003bac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4003bac:	defffc04 	addi	sp,sp,-16
 4003bb0:	df000315 	stw	fp,12(sp)
 4003bb4:	df000304 	addi	fp,sp,12
 4003bb8:	e13ffd15 	stw	r4,-12(fp)
 4003bbc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4003bc0:	00000706 	br	4003be0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 4003bc4:	e0bffe17 	ldw	r2,-8(fp)
 4003bc8:	1090000c 	andi	r2,r2,16384
 4003bcc:	1005003a 	cmpeq	r2,r2,zero
 4003bd0:	1000031e 	bne	r2,zero,4003be0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 4003bd4:	00bffd44 	movi	r2,-11
 4003bd8:	e0bfff15 	stw	r2,-4(fp)
 4003bdc:	00000b06 	br	4003c0c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4003be0:	e0bffd17 	ldw	r2,-12(fp)
 4003be4:	10c00d17 	ldw	r3,52(r2)
 4003be8:	e0bffd17 	ldw	r2,-12(fp)
 4003bec:	10800c17 	ldw	r2,48(r2)
 4003bf0:	18800526 	beq	r3,r2,4003c08 <altera_avalon_jtag_uart_close+0x5c>
 4003bf4:	e0bffd17 	ldw	r2,-12(fp)
 4003bf8:	10c00917 	ldw	r3,36(r2)
 4003bfc:	e0bffd17 	ldw	r2,-12(fp)
 4003c00:	10800117 	ldw	r2,4(r2)
 4003c04:	18bfef36 	bltu	r3,r2,4003bc4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4003c08:	e03fff15 	stw	zero,-4(fp)
 4003c0c:	e0bfff17 	ldw	r2,-4(fp)
}
 4003c10:	e037883a 	mov	sp,fp
 4003c14:	df000017 	ldw	fp,0(sp)
 4003c18:	dec00104 	addi	sp,sp,4
 4003c1c:	f800283a 	ret

04003c20 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4003c20:	defff804 	addi	sp,sp,-32
 4003c24:	df000715 	stw	fp,28(sp)
 4003c28:	df000704 	addi	fp,sp,28
 4003c2c:	e13ffb15 	stw	r4,-20(fp)
 4003c30:	e17ffc15 	stw	r5,-16(fp)
 4003c34:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 4003c38:	00bff9c4 	movi	r2,-25
 4003c3c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 4003c40:	e0bffc17 	ldw	r2,-16(fp)
 4003c44:	e0bfff15 	stw	r2,-4(fp)
 4003c48:	e0ffff17 	ldw	r3,-4(fp)
 4003c4c:	189a8060 	cmpeqi	r2,r3,27137
 4003c50:	1000041e 	bne	r2,zero,4003c64 <altera_avalon_jtag_uart_ioctl+0x44>
 4003c54:	e0ffff17 	ldw	r3,-4(fp)
 4003c58:	189a80a0 	cmpeqi	r2,r3,27138
 4003c5c:	10001b1e 	bne	r2,zero,4003ccc <altera_avalon_jtag_uart_ioctl+0xac>
 4003c60:	00002706 	br	4003d00 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4003c64:	e0bffb17 	ldw	r2,-20(fp)
 4003c68:	10c00117 	ldw	r3,4(r2)
 4003c6c:	00a00034 	movhi	r2,32768
 4003c70:	10bfffc4 	addi	r2,r2,-1
 4003c74:	18802226 	beq	r3,r2,4003d00 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 4003c78:	e0bffd17 	ldw	r2,-12(fp)
 4003c7c:	10800017 	ldw	r2,0(r2)
 4003c80:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4003c84:	e0bff917 	ldw	r2,-28(fp)
 4003c88:	10800090 	cmplti	r2,r2,2
 4003c8c:	1000071e 	bne	r2,zero,4003cac <altera_avalon_jtag_uart_ioctl+0x8c>
 4003c90:	e0fff917 	ldw	r3,-28(fp)
 4003c94:	00a00034 	movhi	r2,32768
 4003c98:	10bfffc4 	addi	r2,r2,-1
 4003c9c:	18800326 	beq	r3,r2,4003cac <altera_avalon_jtag_uart_ioctl+0x8c>
 4003ca0:	e0bff917 	ldw	r2,-28(fp)
 4003ca4:	e0bffe15 	stw	r2,-8(fp)
 4003ca8:	00000306 	br	4003cb8 <altera_avalon_jtag_uart_ioctl+0x98>
 4003cac:	00e00034 	movhi	r3,32768
 4003cb0:	18ffff84 	addi	r3,r3,-2
 4003cb4:	e0fffe15 	stw	r3,-8(fp)
 4003cb8:	e0bffb17 	ldw	r2,-20(fp)
 4003cbc:	e0fffe17 	ldw	r3,-8(fp)
 4003cc0:	10c00115 	stw	r3,4(r2)
      rc = 0;
 4003cc4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 4003cc8:	00000d06 	br	4003d00 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4003ccc:	e0bffb17 	ldw	r2,-20(fp)
 4003cd0:	10c00117 	ldw	r3,4(r2)
 4003cd4:	00a00034 	movhi	r2,32768
 4003cd8:	10bfffc4 	addi	r2,r2,-1
 4003cdc:	18800826 	beq	r3,r2,4003d00 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4003ce0:	e13ffd17 	ldw	r4,-12(fp)
 4003ce4:	e0bffb17 	ldw	r2,-20(fp)
 4003ce8:	10c00917 	ldw	r3,36(r2)
 4003cec:	e0bffb17 	ldw	r2,-20(fp)
 4003cf0:	10800117 	ldw	r2,4(r2)
 4003cf4:	1885803a 	cmpltu	r2,r3,r2
 4003cf8:	20800015 	stw	r2,0(r4)
      rc = 0;
 4003cfc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 4003d00:	e0bffa17 	ldw	r2,-24(fp)
}
 4003d04:	e037883a 	mov	sp,fp
 4003d08:	df000017 	ldw	fp,0(sp)
 4003d0c:	dec00104 	addi	sp,sp,4
 4003d10:	f800283a 	ret

04003d14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4003d14:	defff204 	addi	sp,sp,-56
 4003d18:	dfc00d15 	stw	ra,52(sp)
 4003d1c:	df000c15 	stw	fp,48(sp)
 4003d20:	df000c04 	addi	fp,sp,48
 4003d24:	e13ffb15 	stw	r4,-20(fp)
 4003d28:	e17ffc15 	stw	r5,-16(fp)
 4003d2c:	e1bffd15 	stw	r6,-12(fp)
 4003d30:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 4003d34:	e0bffc17 	ldw	r2,-16(fp)
 4003d38:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4003d3c:	00004806 	br	4003e60 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4003d40:	e0bffb17 	ldw	r2,-20(fp)
 4003d44:	10800a17 	ldw	r2,40(r2)
 4003d48:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4003d4c:	e0bffb17 	ldw	r2,-20(fp)
 4003d50:	10800b17 	ldw	r2,44(r2)
 4003d54:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 4003d58:	e0fff717 	ldw	r3,-36(fp)
 4003d5c:	e0bff617 	ldw	r2,-40(fp)
 4003d60:	18800536 	bltu	r3,r2,4003d78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4003d64:	e0bff717 	ldw	r2,-36(fp)
 4003d68:	e0fff617 	ldw	r3,-40(fp)
 4003d6c:	10c5c83a 	sub	r2,r2,r3
 4003d70:	e0bff815 	stw	r2,-32(fp)
 4003d74:	00000406 	br	4003d88 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4003d78:	00820004 	movi	r2,2048
 4003d7c:	e0fff617 	ldw	r3,-40(fp)
 4003d80:	10c5c83a 	sub	r2,r2,r3
 4003d84:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4003d88:	e0bff817 	ldw	r2,-32(fp)
 4003d8c:	1005003a 	cmpeq	r2,r2,zero
 4003d90:	10001f1e 	bne	r2,zero,4003e10 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 4003d94:	e0fffd17 	ldw	r3,-12(fp)
 4003d98:	e0bff817 	ldw	r2,-32(fp)
 4003d9c:	1880022e 	bgeu	r3,r2,4003da8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 4003da0:	e0bffd17 	ldw	r2,-12(fp)
 4003da4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4003da8:	e0bffb17 	ldw	r2,-20(fp)
 4003dac:	10c00e04 	addi	r3,r2,56
 4003db0:	e0bff617 	ldw	r2,-40(fp)
 4003db4:	1887883a 	add	r3,r3,r2
 4003db8:	e0bffa17 	ldw	r2,-24(fp)
 4003dbc:	1009883a 	mov	r4,r2
 4003dc0:	180b883a 	mov	r5,r3
 4003dc4:	e1bff817 	ldw	r6,-32(fp)
 4003dc8:	4000ffc0 	call	4000ffc <memcpy>
      ptr   += n;
 4003dcc:	e0fff817 	ldw	r3,-32(fp)
 4003dd0:	e0bffa17 	ldw	r2,-24(fp)
 4003dd4:	10c5883a 	add	r2,r2,r3
 4003dd8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 4003ddc:	e0fffd17 	ldw	r3,-12(fp)
 4003de0:	e0bff817 	ldw	r2,-32(fp)
 4003de4:	1885c83a 	sub	r2,r3,r2
 4003de8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003dec:	e0fff617 	ldw	r3,-40(fp)
 4003df0:	e0bff817 	ldw	r2,-32(fp)
 4003df4:	1885883a 	add	r2,r3,r2
 4003df8:	10c1ffcc 	andi	r3,r2,2047
 4003dfc:	e0bffb17 	ldw	r2,-20(fp)
 4003e00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4003e04:	e0bffd17 	ldw	r2,-12(fp)
 4003e08:	10800048 	cmpgei	r2,r2,1
 4003e0c:	103fcc1e 	bne	r2,zero,4003d40 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 4003e10:	e0fffa17 	ldw	r3,-24(fp)
 4003e14:	e0bffc17 	ldw	r2,-16(fp)
 4003e18:	1880141e 	bne	r3,r2,4003e6c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4003e1c:	e0bffe17 	ldw	r2,-8(fp)
 4003e20:	1090000c 	andi	r2,r2,16384
 4003e24:	1004c03a 	cmpne	r2,r2,zero
 4003e28:	1000101e 	bne	r2,zero,4003e6c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4003e2c:	e0bffb17 	ldw	r2,-20(fp)
 4003e30:	10c00a17 	ldw	r3,40(r2)
 4003e34:	e0bff717 	ldw	r2,-36(fp)
 4003e38:	1880051e 	bne	r3,r2,4003e50 <altera_avalon_jtag_uart_read+0x13c>
 4003e3c:	e0bffb17 	ldw	r2,-20(fp)
 4003e40:	10c00917 	ldw	r3,36(r2)
 4003e44:	e0bffb17 	ldw	r2,-20(fp)
 4003e48:	10800117 	ldw	r2,4(r2)
 4003e4c:	18bff736 	bltu	r3,r2,4003e2c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4003e50:	e0bffb17 	ldw	r2,-20(fp)
 4003e54:	10c00a17 	ldw	r3,40(r2)
 4003e58:	e0bff717 	ldw	r2,-36(fp)
 4003e5c:	18800326 	beq	r3,r2,4003e6c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4003e60:	e0bffd17 	ldw	r2,-12(fp)
 4003e64:	10800048 	cmpgei	r2,r2,1
 4003e68:	103fb51e 	bne	r2,zero,4003d40 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4003e6c:	e0fffa17 	ldw	r3,-24(fp)
 4003e70:	e0bffc17 	ldw	r2,-16(fp)
 4003e74:	18801926 	beq	r3,r2,4003edc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003e78:	0005303a 	rdctl	r2,status
 4003e7c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003e80:	e0fff517 	ldw	r3,-44(fp)
 4003e84:	00bfff84 	movi	r2,-2
 4003e88:	1884703a 	and	r2,r3,r2
 4003e8c:	1001703a 	wrctl	status,r2
  
  return context;
 4003e90:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4003e94:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003e98:	e0bffb17 	ldw	r2,-20(fp)
 4003e9c:	10800817 	ldw	r2,32(r2)
 4003ea0:	10c00054 	ori	r3,r2,1
 4003ea4:	e0bffb17 	ldw	r2,-20(fp)
 4003ea8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4003eac:	e0bffb17 	ldw	r2,-20(fp)
 4003eb0:	10800017 	ldw	r2,0(r2)
 4003eb4:	11000104 	addi	r4,r2,4
 4003eb8:	e0bffb17 	ldw	r2,-20(fp)
 4003ebc:	10800817 	ldw	r2,32(r2)
 4003ec0:	1007883a 	mov	r3,r2
 4003ec4:	2005883a 	mov	r2,r4
 4003ec8:	10c00035 	stwio	r3,0(r2)
 4003ecc:	e0bff917 	ldw	r2,-28(fp)
 4003ed0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003ed4:	e0bff417 	ldw	r2,-48(fp)
 4003ed8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4003edc:	e0fffa17 	ldw	r3,-24(fp)
 4003ee0:	e0bffc17 	ldw	r2,-16(fp)
 4003ee4:	18800526 	beq	r3,r2,4003efc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 4003ee8:	e0fffa17 	ldw	r3,-24(fp)
 4003eec:	e0bffc17 	ldw	r2,-16(fp)
 4003ef0:	1887c83a 	sub	r3,r3,r2
 4003ef4:	e0ffff15 	stw	r3,-4(fp)
 4003ef8:	00000906 	br	4003f20 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 4003efc:	e0bffe17 	ldw	r2,-8(fp)
 4003f00:	1090000c 	andi	r2,r2,16384
 4003f04:	1005003a 	cmpeq	r2,r2,zero
 4003f08:	1000031e 	bne	r2,zero,4003f18 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4003f0c:	00bffd44 	movi	r2,-11
 4003f10:	e0bfff15 	stw	r2,-4(fp)
 4003f14:	00000206 	br	4003f20 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 4003f18:	00bffec4 	movi	r2,-5
 4003f1c:	e0bfff15 	stw	r2,-4(fp)
 4003f20:	e0bfff17 	ldw	r2,-4(fp)
}
 4003f24:	e037883a 	mov	sp,fp
 4003f28:	dfc00117 	ldw	ra,4(sp)
 4003f2c:	df000017 	ldw	fp,0(sp)
 4003f30:	dec00204 	addi	sp,sp,8
 4003f34:	f800283a 	ret

04003f38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4003f38:	defff204 	addi	sp,sp,-56
 4003f3c:	dfc00d15 	stw	ra,52(sp)
 4003f40:	df000c15 	stw	fp,48(sp)
 4003f44:	df000c04 	addi	fp,sp,48
 4003f48:	e13ffb15 	stw	r4,-20(fp)
 4003f4c:	e17ffc15 	stw	r5,-16(fp)
 4003f50:	e1bffd15 	stw	r6,-12(fp)
 4003f54:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4003f58:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4003f5c:	e0bffc17 	ldw	r2,-16(fp)
 4003f60:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4003f64:	00003a06 	br	4004050 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4003f68:	e0bffb17 	ldw	r2,-20(fp)
 4003f6c:	10800c17 	ldw	r2,48(r2)
 4003f70:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 4003f74:	e0bffb17 	ldw	r2,-20(fp)
 4003f78:	10800d17 	ldw	r2,52(r2)
 4003f7c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 4003f80:	e0fffa17 	ldw	r3,-24(fp)
 4003f84:	e0bff917 	ldw	r2,-28(fp)
 4003f88:	1880062e 	bgeu	r3,r2,4003fa4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4003f8c:	e0fff917 	ldw	r3,-28(fp)
 4003f90:	e0bffa17 	ldw	r2,-24(fp)
 4003f94:	1885c83a 	sub	r2,r3,r2
 4003f98:	10bfffc4 	addi	r2,r2,-1
 4003f9c:	e0bff815 	stw	r2,-32(fp)
 4003fa0:	00000c06 	br	4003fd4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 4003fa4:	e0bff917 	ldw	r2,-28(fp)
 4003fa8:	1005003a 	cmpeq	r2,r2,zero
 4003fac:	1000051e 	bne	r2,zero,4003fc4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4003fb0:	00820004 	movi	r2,2048
 4003fb4:	e0fffa17 	ldw	r3,-24(fp)
 4003fb8:	10c5c83a 	sub	r2,r2,r3
 4003fbc:	e0bff815 	stw	r2,-32(fp)
 4003fc0:	00000406 	br	4003fd4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4003fc4:	0081ffc4 	movi	r2,2047
 4003fc8:	e0fffa17 	ldw	r3,-24(fp)
 4003fcc:	10c5c83a 	sub	r2,r2,r3
 4003fd0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4003fd4:	e0bff817 	ldw	r2,-32(fp)
 4003fd8:	1005003a 	cmpeq	r2,r2,zero
 4003fdc:	10001f1e 	bne	r2,zero,400405c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 4003fe0:	e0fffd17 	ldw	r3,-12(fp)
 4003fe4:	e0bff817 	ldw	r2,-32(fp)
 4003fe8:	1880022e 	bgeu	r3,r2,4003ff4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 4003fec:	e0bffd17 	ldw	r2,-12(fp)
 4003ff0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4003ff4:	e0bffb17 	ldw	r2,-20(fp)
 4003ff8:	10c20e04 	addi	r3,r2,2104
 4003ffc:	e0bffa17 	ldw	r2,-24(fp)
 4004000:	1885883a 	add	r2,r3,r2
 4004004:	e0fffc17 	ldw	r3,-16(fp)
 4004008:	1009883a 	mov	r4,r2
 400400c:	180b883a 	mov	r5,r3
 4004010:	e1bff817 	ldw	r6,-32(fp)
 4004014:	4000ffc0 	call	4000ffc <memcpy>
      ptr   += n;
 4004018:	e0fff817 	ldw	r3,-32(fp)
 400401c:	e0bffc17 	ldw	r2,-16(fp)
 4004020:	10c5883a 	add	r2,r2,r3
 4004024:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 4004028:	e0fffd17 	ldw	r3,-12(fp)
 400402c:	e0bff817 	ldw	r2,-32(fp)
 4004030:	1885c83a 	sub	r2,r3,r2
 4004034:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004038:	e0fffa17 	ldw	r3,-24(fp)
 400403c:	e0bff817 	ldw	r2,-32(fp)
 4004040:	1885883a 	add	r2,r3,r2
 4004044:	10c1ffcc 	andi	r3,r2,2047
 4004048:	e0bffb17 	ldw	r2,-20(fp)
 400404c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4004050:	e0bffd17 	ldw	r2,-12(fp)
 4004054:	10800048 	cmpgei	r2,r2,1
 4004058:	103fc31e 	bne	r2,zero,4003f68 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400405c:	0005303a 	rdctl	r2,status
 4004060:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004064:	e0fff517 	ldw	r3,-44(fp)
 4004068:	00bfff84 	movi	r2,-2
 400406c:	1884703a 	and	r2,r3,r2
 4004070:	1001703a 	wrctl	status,r2
  
  return context;
 4004074:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4004078:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400407c:	e0bffb17 	ldw	r2,-20(fp)
 4004080:	10800817 	ldw	r2,32(r2)
 4004084:	10c00094 	ori	r3,r2,2
 4004088:	e0bffb17 	ldw	r2,-20(fp)
 400408c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004090:	e0bffb17 	ldw	r2,-20(fp)
 4004094:	10800017 	ldw	r2,0(r2)
 4004098:	11000104 	addi	r4,r2,4
 400409c:	e0bffb17 	ldw	r2,-20(fp)
 40040a0:	10800817 	ldw	r2,32(r2)
 40040a4:	1007883a 	mov	r3,r2
 40040a8:	2005883a 	mov	r2,r4
 40040ac:	10c00035 	stwio	r3,0(r2)
 40040b0:	e0bff717 	ldw	r2,-36(fp)
 40040b4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40040b8:	e0bff417 	ldw	r2,-48(fp)
 40040bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40040c0:	e0bffd17 	ldw	r2,-12(fp)
 40040c4:	10800050 	cmplti	r2,r2,1
 40040c8:	1000111e 	bne	r2,zero,4004110 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 40040cc:	e0bffe17 	ldw	r2,-8(fp)
 40040d0:	1090000c 	andi	r2,r2,16384
 40040d4:	1004c03a 	cmpne	r2,r2,zero
 40040d8:	1000101e 	bne	r2,zero,400411c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40040dc:	e0bffb17 	ldw	r2,-20(fp)
 40040e0:	10c00d17 	ldw	r3,52(r2)
 40040e4:	e0bff917 	ldw	r2,-28(fp)
 40040e8:	1880051e 	bne	r3,r2,4004100 <altera_avalon_jtag_uart_write+0x1c8>
 40040ec:	e0bffb17 	ldw	r2,-20(fp)
 40040f0:	10c00917 	ldw	r3,36(r2)
 40040f4:	e0bffb17 	ldw	r2,-20(fp)
 40040f8:	10800117 	ldw	r2,4(r2)
 40040fc:	18bff736 	bltu	r3,r2,40040dc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4004100:	e0bffb17 	ldw	r2,-20(fp)
 4004104:	10c00d17 	ldw	r3,52(r2)
 4004108:	e0bff917 	ldw	r2,-28(fp)
 400410c:	18800326 	beq	r3,r2,400411c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 4004110:	e0bffd17 	ldw	r2,-12(fp)
 4004114:	10800048 	cmpgei	r2,r2,1
 4004118:	103fcd1e 	bne	r2,zero,4004050 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400411c:	e0fffc17 	ldw	r3,-16(fp)
 4004120:	e0bff617 	ldw	r2,-40(fp)
 4004124:	18800526 	beq	r3,r2,400413c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 4004128:	e0fffc17 	ldw	r3,-16(fp)
 400412c:	e0bff617 	ldw	r2,-40(fp)
 4004130:	1887c83a 	sub	r3,r3,r2
 4004134:	e0ffff15 	stw	r3,-4(fp)
 4004138:	00000906 	br	4004160 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 400413c:	e0bffe17 	ldw	r2,-8(fp)
 4004140:	1090000c 	andi	r2,r2,16384
 4004144:	1005003a 	cmpeq	r2,r2,zero
 4004148:	1000031e 	bne	r2,zero,4004158 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 400414c:	00bffd44 	movi	r2,-11
 4004150:	e0bfff15 	stw	r2,-4(fp)
 4004154:	00000206 	br	4004160 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4004158:	00bffec4 	movi	r2,-5
 400415c:	e0bfff15 	stw	r2,-4(fp)
 4004160:	e0bfff17 	ldw	r2,-4(fp)
}
 4004164:	e037883a 	mov	sp,fp
 4004168:	dfc00117 	ldw	ra,4(sp)
 400416c:	df000017 	ldw	fp,0(sp)
 4004170:	dec00204 	addi	sp,sp,8
 4004174:	f800283a 	ret

04004178 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4004178:	defffa04 	addi	sp,sp,-24
 400417c:	dfc00515 	stw	ra,20(sp)
 4004180:	df000415 	stw	fp,16(sp)
 4004184:	df000404 	addi	fp,sp,16
 4004188:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 400418c:	e0bfff17 	ldw	r2,-4(fp)
 4004190:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4004194:	e0bfff17 	ldw	r2,-4(fp)
 4004198:	10800104 	addi	r2,r2,4
 400419c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40041a0:	0005303a 	rdctl	r2,status
 40041a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40041a8:	e0fffd17 	ldw	r3,-12(fp)
 40041ac:	00bfff84 	movi	r2,-2
 40041b0:	1884703a 	and	r2,r3,r2
 40041b4:	1001703a 	wrctl	status,r2
  
  return context;
 40041b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40041bc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 40041c0:	4004d800 	call	4004d80 <alt_tick>
 40041c4:	e0bffe17 	ldw	r2,-8(fp)
 40041c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40041cc:	e0bffc17 	ldw	r2,-16(fp)
 40041d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40041d4:	e037883a 	mov	sp,fp
 40041d8:	dfc00117 	ldw	ra,4(sp)
 40041dc:	df000017 	ldw	fp,0(sp)
 40041e0:	dec00204 	addi	sp,sp,8
 40041e4:	f800283a 	ret

040041e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40041e8:	defff804 	addi	sp,sp,-32
 40041ec:	dfc00715 	stw	ra,28(sp)
 40041f0:	df000615 	stw	fp,24(sp)
 40041f4:	df000604 	addi	fp,sp,24
 40041f8:	e13ffc15 	stw	r4,-16(fp)
 40041fc:	e17ffd15 	stw	r5,-12(fp)
 4004200:	e1bffe15 	stw	r6,-8(fp)
 4004204:	e1ffff15 	stw	r7,-4(fp)
 4004208:	e0bfff17 	ldw	r2,-4(fp)
 400420c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4004210:	00810074 	movhi	r2,1025
 4004214:	10a2ab04 	addi	r2,r2,-30036
 4004218:	10800017 	ldw	r2,0(r2)
 400421c:	1004c03a 	cmpne	r2,r2,zero
 4004220:	1000041e 	bne	r2,zero,4004234 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4004224:	00c10074 	movhi	r3,1025
 4004228:	18e2ab04 	addi	r3,r3,-30036
 400422c:	e0bffb17 	ldw	r2,-20(fp)
 4004230:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4004234:	e0bffc17 	ldw	r2,-16(fp)
 4004238:	10800104 	addi	r2,r2,4
 400423c:	1007883a 	mov	r3,r2
 4004240:	008001c4 	movi	r2,7
 4004244:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4004248:	d8000015 	stw	zero,0(sp)
 400424c:	e13ffd17 	ldw	r4,-12(fp)
 4004250:	e17ffe17 	ldw	r5,-8(fp)
 4004254:	01810034 	movhi	r6,1024
 4004258:	31905e04 	addi	r6,r6,16760
 400425c:	e1fffc17 	ldw	r7,-16(fp)
 4004260:	400461c0 	call	400461c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4004264:	e037883a 	mov	sp,fp
 4004268:	dfc00117 	ldw	ra,4(sp)
 400426c:	df000017 	ldw	fp,0(sp)
 4004270:	dec00204 	addi	sp,sp,8
 4004274:	f800283a 	ret

04004278 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4004278:	defff404 	addi	sp,sp,-48
 400427c:	df000b15 	stw	fp,44(sp)
 4004280:	df000b04 	addi	fp,sp,44
 4004284:	e13ffb15 	stw	r4,-20(fp)
 4004288:	e17ffc15 	stw	r5,-16(fp)
 400428c:	e1bffd15 	stw	r6,-12(fp)
 4004290:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4004294:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004298:	00810074 	movhi	r2,1025
 400429c:	10a2ab04 	addi	r2,r2,-30036
 40042a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 40042a4:	1005003a 	cmpeq	r2,r2,zero
 40042a8:	1000411e 	bne	r2,zero,40043b0 <alt_alarm_start+0x138>
  {
    if (alarm)
 40042ac:	e0bffb17 	ldw	r2,-20(fp)
 40042b0:	1005003a 	cmpeq	r2,r2,zero
 40042b4:	10003b1e 	bne	r2,zero,40043a4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 40042b8:	e0fffb17 	ldw	r3,-20(fp)
 40042bc:	e0bffd17 	ldw	r2,-12(fp)
 40042c0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 40042c4:	e0fffb17 	ldw	r3,-20(fp)
 40042c8:	e0bffe17 	ldw	r2,-8(fp)
 40042cc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40042d0:	0005303a 	rdctl	r2,status
 40042d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40042d8:	e0fff817 	ldw	r3,-32(fp)
 40042dc:	00bfff84 	movi	r2,-2
 40042e0:	1884703a 	and	r2,r3,r2
 40042e4:	1001703a 	wrctl	status,r2
  
  return context;
 40042e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 40042ec:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40042f0:	00810074 	movhi	r2,1025
 40042f4:	10a2ac04 	addi	r2,r2,-30032
 40042f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 40042fc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4004300:	e0fffc17 	ldw	r3,-16(fp)
 4004304:	e0bff917 	ldw	r2,-28(fp)
 4004308:	1885883a 	add	r2,r3,r2
 400430c:	10c00044 	addi	r3,r2,1
 4004310:	e0bffb17 	ldw	r2,-20(fp)
 4004314:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4004318:	e0bffb17 	ldw	r2,-20(fp)
 400431c:	10c00217 	ldw	r3,8(r2)
 4004320:	e0bff917 	ldw	r2,-28(fp)
 4004324:	1880042e 	bgeu	r3,r2,4004338 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 4004328:	e0fffb17 	ldw	r3,-20(fp)
 400432c:	00800044 	movi	r2,1
 4004330:	18800405 	stb	r2,16(r3)
 4004334:	00000206 	br	4004340 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 4004338:	e0bffb17 	ldw	r2,-20(fp)
 400433c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4004340:	e0fffb17 	ldw	r3,-20(fp)
 4004344:	00810034 	movhi	r2,1024
 4004348:	109c0f04 	addi	r2,r2,28732
 400434c:	e0bff615 	stw	r2,-40(fp)
 4004350:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004354:	e0fff717 	ldw	r3,-36(fp)
 4004358:	e0bff617 	ldw	r2,-40(fp)
 400435c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4004360:	e0bff617 	ldw	r2,-40(fp)
 4004364:	10c00017 	ldw	r3,0(r2)
 4004368:	e0bff717 	ldw	r2,-36(fp)
 400436c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4004370:	e0bff617 	ldw	r2,-40(fp)
 4004374:	10c00017 	ldw	r3,0(r2)
 4004378:	e0bff717 	ldw	r2,-36(fp)
 400437c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4004380:	e0fff617 	ldw	r3,-40(fp)
 4004384:	e0bff717 	ldw	r2,-36(fp)
 4004388:	18800015 	stw	r2,0(r3)
 400438c:	e0bffa17 	ldw	r2,-24(fp)
 4004390:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004394:	e0bff517 	ldw	r2,-44(fp)
 4004398:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400439c:	e03fff15 	stw	zero,-4(fp)
 40043a0:	00000506 	br	40043b8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 40043a4:	00bffa84 	movi	r2,-22
 40043a8:	e0bfff15 	stw	r2,-4(fp)
 40043ac:	00000206 	br	40043b8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 40043b0:	00bfde84 	movi	r2,-134
 40043b4:	e0bfff15 	stw	r2,-4(fp)
 40043b8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 40043bc:	e037883a 	mov	sp,fp
 40043c0:	df000017 	ldw	fp,0(sp)
 40043c4:	dec00104 	addi	sp,sp,4
 40043c8:	f800283a 	ret

040043cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40043cc:	defffe04 	addi	sp,sp,-8
 40043d0:	df000115 	stw	fp,4(sp)
 40043d4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40043d8:	e03fff15 	stw	zero,-4(fp)
 40043dc:	00000506 	br	40043f4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 40043e0:	e0bfff17 	ldw	r2,-4(fp)
 40043e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40043e8:	e0bfff17 	ldw	r2,-4(fp)
 40043ec:	10800804 	addi	r2,r2,32
 40043f0:	e0bfff15 	stw	r2,-4(fp)
 40043f4:	e0bfff17 	ldw	r2,-4(fp)
 40043f8:	10820030 	cmpltui	r2,r2,2048
 40043fc:	103ff81e 	bne	r2,zero,40043e0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4004400:	e037883a 	mov	sp,fp
 4004404:	df000017 	ldw	fp,0(sp)
 4004408:	dec00104 	addi	sp,sp,4
 400440c:	f800283a 	ret

04004410 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4004410:	defff904 	addi	sp,sp,-28
 4004414:	dfc00615 	stw	ra,24(sp)
 4004418:	df000515 	stw	fp,20(sp)
 400441c:	df000504 	addi	fp,sp,20
 4004420:	e13ffd15 	stw	r4,-12(fp)
 4004424:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4004428:	e0bffd17 	ldw	r2,-12(fp)
 400442c:	1005003a 	cmpeq	r2,r2,zero
 4004430:	1000041e 	bne	r2,zero,4004444 <alt_dev_llist_insert+0x34>
 4004434:	e0bffd17 	ldw	r2,-12(fp)
 4004438:	10800217 	ldw	r2,8(r2)
 400443c:	1004c03a 	cmpne	r2,r2,zero
 4004440:	1000071e 	bne	r2,zero,4004460 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4004444:	40044c40 	call	40044c4 <alt_get_errno>
 4004448:	1007883a 	mov	r3,r2
 400444c:	00800584 	movi	r2,22
 4004450:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4004454:	00bffa84 	movi	r2,-22
 4004458:	e0bfff15 	stw	r2,-4(fp)
 400445c:	00001306 	br	40044ac <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4004460:	e0fffd17 	ldw	r3,-12(fp)
 4004464:	e0bffe17 	ldw	r2,-8(fp)
 4004468:	e0bffb15 	stw	r2,-20(fp)
 400446c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004470:	e0fffc17 	ldw	r3,-16(fp)
 4004474:	e0bffb17 	ldw	r2,-20(fp)
 4004478:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 400447c:	e0bffb17 	ldw	r2,-20(fp)
 4004480:	10c00017 	ldw	r3,0(r2)
 4004484:	e0bffc17 	ldw	r2,-16(fp)
 4004488:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400448c:	e0bffb17 	ldw	r2,-20(fp)
 4004490:	10c00017 	ldw	r3,0(r2)
 4004494:	e0bffc17 	ldw	r2,-16(fp)
 4004498:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 400449c:	e0fffb17 	ldw	r3,-20(fp)
 40044a0:	e0bffc17 	ldw	r2,-16(fp)
 40044a4:	18800015 	stw	r2,0(r3)

  return 0;  
 40044a8:	e03fff15 	stw	zero,-4(fp)
 40044ac:	e0bfff17 	ldw	r2,-4(fp)
}
 40044b0:	e037883a 	mov	sp,fp
 40044b4:	dfc00117 	ldw	ra,4(sp)
 40044b8:	df000017 	ldw	fp,0(sp)
 40044bc:	dec00204 	addi	sp,sp,8
 40044c0:	f800283a 	ret

040044c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40044c4:	defffd04 	addi	sp,sp,-12
 40044c8:	dfc00215 	stw	ra,8(sp)
 40044cc:	df000115 	stw	fp,4(sp)
 40044d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40044d4:	00810034 	movhi	r2,1024
 40044d8:	109c0c04 	addi	r2,r2,28720
 40044dc:	10800017 	ldw	r2,0(r2)
 40044e0:	1005003a 	cmpeq	r2,r2,zero
 40044e4:	1000061e 	bne	r2,zero,4004500 <alt_get_errno+0x3c>
 40044e8:	00810034 	movhi	r2,1024
 40044ec:	109c0c04 	addi	r2,r2,28720
 40044f0:	10800017 	ldw	r2,0(r2)
 40044f4:	103ee83a 	callr	r2
 40044f8:	e0bfff15 	stw	r2,-4(fp)
 40044fc:	00000306 	br	400450c <alt_get_errno+0x48>
 4004500:	00810074 	movhi	r2,1025
 4004504:	10a2a604 	addi	r2,r2,-30056
 4004508:	e0bfff15 	stw	r2,-4(fp)
 400450c:	e0bfff17 	ldw	r2,-4(fp)
}
 4004510:	e037883a 	mov	sp,fp
 4004514:	dfc00117 	ldw	ra,4(sp)
 4004518:	df000017 	ldw	fp,0(sp)
 400451c:	dec00204 	addi	sp,sp,8
 4004520:	f800283a 	ret

04004524 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4004524:	defffd04 	addi	sp,sp,-12
 4004528:	dfc00215 	stw	ra,8(sp)
 400452c:	df000115 	stw	fp,4(sp)
 4004530:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004534:	00bfff04 	movi	r2,-4
 4004538:	00c10034 	movhi	r3,1024
 400453c:	18d56d04 	addi	r3,r3,21940
 4004540:	1885883a 	add	r2,r3,r2
 4004544:	e0bfff15 	stw	r2,-4(fp)
 4004548:	00000606 	br	4004564 <_do_ctors+0x40>
        (*ctor) (); 
 400454c:	e0bfff17 	ldw	r2,-4(fp)
 4004550:	10800017 	ldw	r2,0(r2)
 4004554:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004558:	e0bfff17 	ldw	r2,-4(fp)
 400455c:	10bfff04 	addi	r2,r2,-4
 4004560:	e0bfff15 	stw	r2,-4(fp)
 4004564:	e0ffff17 	ldw	r3,-4(fp)
 4004568:	00810034 	movhi	r2,1024
 400456c:	10956c04 	addi	r2,r2,21936
 4004570:	18bff62e 	bgeu	r3,r2,400454c <_do_ctors+0x28>
        (*ctor) (); 
}
 4004574:	e037883a 	mov	sp,fp
 4004578:	dfc00117 	ldw	ra,4(sp)
 400457c:	df000017 	ldw	fp,0(sp)
 4004580:	dec00204 	addi	sp,sp,8
 4004584:	f800283a 	ret

04004588 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4004588:	defffd04 	addi	sp,sp,-12
 400458c:	dfc00215 	stw	ra,8(sp)
 4004590:	df000115 	stw	fp,4(sp)
 4004594:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4004598:	00bfff04 	movi	r2,-4
 400459c:	00c10034 	movhi	r3,1024
 40045a0:	18d56d04 	addi	r3,r3,21940
 40045a4:	1885883a 	add	r2,r3,r2
 40045a8:	e0bfff15 	stw	r2,-4(fp)
 40045ac:	00000606 	br	40045c8 <_do_dtors+0x40>
        (*dtor) (); 
 40045b0:	e0bfff17 	ldw	r2,-4(fp)
 40045b4:	10800017 	ldw	r2,0(r2)
 40045b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40045bc:	e0bfff17 	ldw	r2,-4(fp)
 40045c0:	10bfff04 	addi	r2,r2,-4
 40045c4:	e0bfff15 	stw	r2,-4(fp)
 40045c8:	e0ffff17 	ldw	r3,-4(fp)
 40045cc:	00810034 	movhi	r2,1024
 40045d0:	10956d04 	addi	r2,r2,21940
 40045d4:	18bff62e 	bgeu	r3,r2,40045b0 <_do_dtors+0x28>
        (*dtor) (); 
}
 40045d8:	e037883a 	mov	sp,fp
 40045dc:	dfc00117 	ldw	ra,4(sp)
 40045e0:	df000017 	ldw	fp,0(sp)
 40045e4:	dec00204 	addi	sp,sp,8
 40045e8:	f800283a 	ret

040045ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40045ec:	defffe04 	addi	sp,sp,-8
 40045f0:	dfc00115 	stw	ra,4(sp)
 40045f4:	df000015 	stw	fp,0(sp)
 40045f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40045fc:	0009883a 	mov	r4,zero
 4004600:	01420004 	movi	r5,2048
 4004604:	40051180 	call	4005118 <alt_icache_flush>
#endif
}
 4004608:	e037883a 	mov	sp,fp
 400460c:	dfc00117 	ldw	ra,4(sp)
 4004610:	df000017 	ldw	fp,0(sp)
 4004614:	dec00204 	addi	sp,sp,8
 4004618:	f800283a 	ret

0400461c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400461c:	defff904 	addi	sp,sp,-28
 4004620:	dfc00615 	stw	ra,24(sp)
 4004624:	df000515 	stw	fp,20(sp)
 4004628:	df000504 	addi	fp,sp,20
 400462c:	e13ffc15 	stw	r4,-16(fp)
 4004630:	e17ffd15 	stw	r5,-12(fp)
 4004634:	e1bffe15 	stw	r6,-8(fp)
 4004638:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400463c:	e0800217 	ldw	r2,8(fp)
 4004640:	d8800015 	stw	r2,0(sp)
 4004644:	e13ffc17 	ldw	r4,-16(fp)
 4004648:	e17ffd17 	ldw	r5,-12(fp)
 400464c:	e1bffe17 	ldw	r6,-8(fp)
 4004650:	e1ffff17 	ldw	r7,-4(fp)
 4004654:	40047f00 	call	40047f0 <alt_iic_isr_register>
}  
 4004658:	e037883a 	mov	sp,fp
 400465c:	dfc00117 	ldw	ra,4(sp)
 4004660:	df000017 	ldw	fp,0(sp)
 4004664:	dec00204 	addi	sp,sp,8
 4004668:	f800283a 	ret

0400466c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400466c:	defff904 	addi	sp,sp,-28
 4004670:	df000615 	stw	fp,24(sp)
 4004674:	df000604 	addi	fp,sp,24
 4004678:	e13ffe15 	stw	r4,-8(fp)
 400467c:	e17fff15 	stw	r5,-4(fp)
 4004680:	e0bfff17 	ldw	r2,-4(fp)
 4004684:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004688:	0005303a 	rdctl	r2,status
 400468c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004690:	e0fffb17 	ldw	r3,-20(fp)
 4004694:	00bfff84 	movi	r2,-2
 4004698:	1884703a 	and	r2,r3,r2
 400469c:	1001703a 	wrctl	status,r2
  
  return context;
 40046a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40046a4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 40046a8:	e0fffc17 	ldw	r3,-16(fp)
 40046ac:	00800044 	movi	r2,1
 40046b0:	10c4983a 	sll	r2,r2,r3
 40046b4:	1007883a 	mov	r3,r2
 40046b8:	00810074 	movhi	r2,1025
 40046bc:	10a2aa04 	addi	r2,r2,-30040
 40046c0:	10800017 	ldw	r2,0(r2)
 40046c4:	1886b03a 	or	r3,r3,r2
 40046c8:	00810074 	movhi	r2,1025
 40046cc:	10a2aa04 	addi	r2,r2,-30040
 40046d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40046d4:	00810074 	movhi	r2,1025
 40046d8:	10a2aa04 	addi	r2,r2,-30040
 40046dc:	10800017 	ldw	r2,0(r2)
 40046e0:	100170fa 	wrctl	ienable,r2
 40046e4:	e0bffd17 	ldw	r2,-12(fp)
 40046e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40046ec:	e0bffa17 	ldw	r2,-24(fp)
 40046f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40046f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 40046f8:	e037883a 	mov	sp,fp
 40046fc:	df000017 	ldw	fp,0(sp)
 4004700:	dec00104 	addi	sp,sp,4
 4004704:	f800283a 	ret

04004708 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4004708:	defff904 	addi	sp,sp,-28
 400470c:	df000615 	stw	fp,24(sp)
 4004710:	df000604 	addi	fp,sp,24
 4004714:	e13ffe15 	stw	r4,-8(fp)
 4004718:	e17fff15 	stw	r5,-4(fp)
 400471c:	e0bfff17 	ldw	r2,-4(fp)
 4004720:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004724:	0005303a 	rdctl	r2,status
 4004728:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400472c:	e0fffb17 	ldw	r3,-20(fp)
 4004730:	00bfff84 	movi	r2,-2
 4004734:	1884703a 	and	r2,r3,r2
 4004738:	1001703a 	wrctl	status,r2
  
  return context;
 400473c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4004740:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 4004744:	e0fffc17 	ldw	r3,-16(fp)
 4004748:	00800044 	movi	r2,1
 400474c:	10c4983a 	sll	r2,r2,r3
 4004750:	0084303a 	nor	r2,zero,r2
 4004754:	1007883a 	mov	r3,r2
 4004758:	00810074 	movhi	r2,1025
 400475c:	10a2aa04 	addi	r2,r2,-30040
 4004760:	10800017 	ldw	r2,0(r2)
 4004764:	1886703a 	and	r3,r3,r2
 4004768:	00810074 	movhi	r2,1025
 400476c:	10a2aa04 	addi	r2,r2,-30040
 4004770:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4004774:	00810074 	movhi	r2,1025
 4004778:	10a2aa04 	addi	r2,r2,-30040
 400477c:	10800017 	ldw	r2,0(r2)
 4004780:	100170fa 	wrctl	ienable,r2
 4004784:	e0bffd17 	ldw	r2,-12(fp)
 4004788:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400478c:	e0bffa17 	ldw	r2,-24(fp)
 4004790:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4004794:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4004798:	e037883a 	mov	sp,fp
 400479c:	df000017 	ldw	fp,0(sp)
 40047a0:	dec00104 	addi	sp,sp,4
 40047a4:	f800283a 	ret

040047a8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40047a8:	defffc04 	addi	sp,sp,-16
 40047ac:	df000315 	stw	fp,12(sp)
 40047b0:	df000304 	addi	fp,sp,12
 40047b4:	e13ffe15 	stw	r4,-8(fp)
 40047b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40047bc:	000530fa 	rdctl	r2,ienable
 40047c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40047c4:	e0ffff17 	ldw	r3,-4(fp)
 40047c8:	00800044 	movi	r2,1
 40047cc:	10c4983a 	sll	r2,r2,r3
 40047d0:	1007883a 	mov	r3,r2
 40047d4:	e0bffd17 	ldw	r2,-12(fp)
 40047d8:	1884703a 	and	r2,r3,r2
 40047dc:	1004c03a 	cmpne	r2,r2,zero
}
 40047e0:	e037883a 	mov	sp,fp
 40047e4:	df000017 	ldw	fp,0(sp)
 40047e8:	dec00104 	addi	sp,sp,4
 40047ec:	f800283a 	ret

040047f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40047f0:	defff404 	addi	sp,sp,-48
 40047f4:	dfc00b15 	stw	ra,44(sp)
 40047f8:	df000a15 	stw	fp,40(sp)
 40047fc:	df000a04 	addi	fp,sp,40
 4004800:	e13ffb15 	stw	r4,-20(fp)
 4004804:	e17ffc15 	stw	r5,-16(fp)
 4004808:	e1bffd15 	stw	r6,-12(fp)
 400480c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 4004810:	00bffa84 	movi	r2,-22
 4004814:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4004818:	e0bffc17 	ldw	r2,-16(fp)
 400481c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4004820:	e0bff917 	ldw	r2,-28(fp)
 4004824:	10800808 	cmpgei	r2,r2,32
 4004828:	1000291e 	bne	r2,zero,40048d0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400482c:	0005303a 	rdctl	r2,status
 4004830:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004834:	e0fff717 	ldw	r3,-36(fp)
 4004838:	00bfff84 	movi	r2,-2
 400483c:	1884703a 	and	r2,r3,r2
 4004840:	1001703a 	wrctl	status,r2
  
  return context;
 4004844:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4004848:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 400484c:	e0bff917 	ldw	r2,-28(fp)
 4004850:	00c10074 	movhi	r3,1025
 4004854:	18e2b704 	addi	r3,r3,-29988
 4004858:	100490fa 	slli	r2,r2,3
 400485c:	10c7883a 	add	r3,r2,r3
 4004860:	e0bffd17 	ldw	r2,-12(fp)
 4004864:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 4004868:	e0bff917 	ldw	r2,-28(fp)
 400486c:	00c10074 	movhi	r3,1025
 4004870:	18e2b704 	addi	r3,r3,-29988
 4004874:	100490fa 	slli	r2,r2,3
 4004878:	10c5883a 	add	r2,r2,r3
 400487c:	10c00104 	addi	r3,r2,4
 4004880:	e0bffe17 	ldw	r2,-8(fp)
 4004884:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4004888:	e0bffd17 	ldw	r2,-12(fp)
 400488c:	1005003a 	cmpeq	r2,r2,zero
 4004890:	1000051e 	bne	r2,zero,40048a8 <alt_iic_isr_register+0xb8>
 4004894:	e17ff917 	ldw	r5,-28(fp)
 4004898:	e13ffb17 	ldw	r4,-20(fp)
 400489c:	400466c0 	call	400466c <alt_ic_irq_enable>
 40048a0:	e0bfff15 	stw	r2,-4(fp)
 40048a4:	00000406 	br	40048b8 <alt_iic_isr_register+0xc8>
 40048a8:	e17ff917 	ldw	r5,-28(fp)
 40048ac:	e13ffb17 	ldw	r4,-20(fp)
 40048b0:	40047080 	call	4004708 <alt_ic_irq_disable>
 40048b4:	e0bfff15 	stw	r2,-4(fp)
 40048b8:	e0bfff17 	ldw	r2,-4(fp)
 40048bc:	e0bffa15 	stw	r2,-24(fp)
 40048c0:	e0bff817 	ldw	r2,-32(fp)
 40048c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40048c8:	e0bff617 	ldw	r2,-40(fp)
 40048cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40048d0:	e0bffa17 	ldw	r2,-24(fp)
}
 40048d4:	e037883a 	mov	sp,fp
 40048d8:	dfc00117 	ldw	ra,4(sp)
 40048dc:	df000017 	ldw	fp,0(sp)
 40048e0:	dec00204 	addi	sp,sp,8
 40048e4:	f800283a 	ret

040048e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40048e8:	defff904 	addi	sp,sp,-28
 40048ec:	dfc00615 	stw	ra,24(sp)
 40048f0:	df000515 	stw	fp,20(sp)
 40048f4:	df000504 	addi	fp,sp,20
 40048f8:	e13ffc15 	stw	r4,-16(fp)
 40048fc:	e17ffd15 	stw	r5,-12(fp)
 4004900:	e1bffe15 	stw	r6,-8(fp)
 4004904:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4004908:	e13ffd17 	ldw	r4,-12(fp)
 400490c:	e17ffe17 	ldw	r5,-8(fp)
 4004910:	e1bfff17 	ldw	r6,-4(fp)
 4004914:	4004b000 	call	4004b00 <open>
 4004918:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400491c:	e0bffb17 	ldw	r2,-20(fp)
 4004920:	1004803a 	cmplt	r2,r2,zero
 4004924:	10001c1e 	bne	r2,zero,4004998 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 4004928:	e0bffb17 	ldw	r2,-20(fp)
 400492c:	00c10034 	movhi	r3,1024
 4004930:	18d78b04 	addi	r3,r3,24108
 4004934:	10800324 	muli	r2,r2,12
 4004938:	10c5883a 	add	r2,r2,r3
 400493c:	10c00017 	ldw	r3,0(r2)
 4004940:	e0bffc17 	ldw	r2,-16(fp)
 4004944:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4004948:	e0bffb17 	ldw	r2,-20(fp)
 400494c:	00c10034 	movhi	r3,1024
 4004950:	18d78b04 	addi	r3,r3,24108
 4004954:	10800324 	muli	r2,r2,12
 4004958:	10c5883a 	add	r2,r2,r3
 400495c:	10800104 	addi	r2,r2,4
 4004960:	10c00017 	ldw	r3,0(r2)
 4004964:	e0bffc17 	ldw	r2,-16(fp)
 4004968:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400496c:	e0bffb17 	ldw	r2,-20(fp)
 4004970:	00c10034 	movhi	r3,1024
 4004974:	18d78b04 	addi	r3,r3,24108
 4004978:	10800324 	muli	r2,r2,12
 400497c:	10c5883a 	add	r2,r2,r3
 4004980:	10800204 	addi	r2,r2,8
 4004984:	10c00017 	ldw	r3,0(r2)
 4004988:	e0bffc17 	ldw	r2,-16(fp)
 400498c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4004990:	e13ffb17 	ldw	r4,-20(fp)
 4004994:	40033680 	call	4003368 <alt_release_fd>
  }
} 
 4004998:	e037883a 	mov	sp,fp
 400499c:	dfc00117 	ldw	ra,4(sp)
 40049a0:	df000017 	ldw	fp,0(sp)
 40049a4:	dec00204 	addi	sp,sp,8
 40049a8:	f800283a 	ret

040049ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40049ac:	defffb04 	addi	sp,sp,-20
 40049b0:	dfc00415 	stw	ra,16(sp)
 40049b4:	df000315 	stw	fp,12(sp)
 40049b8:	df000304 	addi	fp,sp,12
 40049bc:	e13ffd15 	stw	r4,-12(fp)
 40049c0:	e17ffe15 	stw	r5,-8(fp)
 40049c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40049c8:	01010034 	movhi	r4,1024
 40049cc:	21178e04 	addi	r4,r4,24120
 40049d0:	e17ffd17 	ldw	r5,-12(fp)
 40049d4:	01800044 	movi	r6,1
 40049d8:	01c07fc4 	movi	r7,511
 40049dc:	40048e80 	call	40048e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40049e0:	01010034 	movhi	r4,1024
 40049e4:	21178b04 	addi	r4,r4,24108
 40049e8:	e17ffe17 	ldw	r5,-8(fp)
 40049ec:	000d883a 	mov	r6,zero
 40049f0:	01c07fc4 	movi	r7,511
 40049f4:	40048e80 	call	40048e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40049f8:	01010034 	movhi	r4,1024
 40049fc:	21179104 	addi	r4,r4,24132
 4004a00:	e17fff17 	ldw	r5,-4(fp)
 4004a04:	01800044 	movi	r6,1
 4004a08:	01c07fc4 	movi	r7,511
 4004a0c:	40048e80 	call	40048e8 <alt_open_fd>
}  
 4004a10:	e037883a 	mov	sp,fp
 4004a14:	dfc00117 	ldw	ra,4(sp)
 4004a18:	df000017 	ldw	fp,0(sp)
 4004a1c:	dec00204 	addi	sp,sp,8
 4004a20:	f800283a 	ret

04004a24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4004a24:	defffc04 	addi	sp,sp,-16
 4004a28:	df000315 	stw	fp,12(sp)
 4004a2c:	df000304 	addi	fp,sp,12
 4004a30:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4004a34:	e0bffe17 	ldw	r2,-8(fp)
 4004a38:	10800217 	ldw	r2,8(r2)
 4004a3c:	10d00034 	orhi	r3,r2,16384
 4004a40:	e0bffe17 	ldw	r2,-8(fp)
 4004a44:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4004a48:	e03ffd15 	stw	zero,-12(fp)
 4004a4c:	00002006 	br	4004ad0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4004a50:	e0bffd17 	ldw	r2,-12(fp)
 4004a54:	00c10034 	movhi	r3,1024
 4004a58:	18d78b04 	addi	r3,r3,24108
 4004a5c:	10800324 	muli	r2,r2,12
 4004a60:	10c5883a 	add	r2,r2,r3
 4004a64:	10c00017 	ldw	r3,0(r2)
 4004a68:	e0bffe17 	ldw	r2,-8(fp)
 4004a6c:	10800017 	ldw	r2,0(r2)
 4004a70:	1880141e 	bne	r3,r2,4004ac4 <alt_file_locked+0xa0>
 4004a74:	e0bffd17 	ldw	r2,-12(fp)
 4004a78:	00c10034 	movhi	r3,1024
 4004a7c:	18d78b04 	addi	r3,r3,24108
 4004a80:	10800324 	muli	r2,r2,12
 4004a84:	10c5883a 	add	r2,r2,r3
 4004a88:	10800204 	addi	r2,r2,8
 4004a8c:	10800017 	ldw	r2,0(r2)
 4004a90:	1004403a 	cmpge	r2,r2,zero
 4004a94:	10000b1e 	bne	r2,zero,4004ac4 <alt_file_locked+0xa0>
 4004a98:	e0bffd17 	ldw	r2,-12(fp)
 4004a9c:	10800324 	muli	r2,r2,12
 4004aa0:	1007883a 	mov	r3,r2
 4004aa4:	00810034 	movhi	r2,1024
 4004aa8:	10978b04 	addi	r2,r2,24108
 4004aac:	1887883a 	add	r3,r3,r2
 4004ab0:	e0bffe17 	ldw	r2,-8(fp)
 4004ab4:	18800326 	beq	r3,r2,4004ac4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4004ab8:	00bffcc4 	movi	r2,-13
 4004abc:	e0bfff15 	stw	r2,-4(fp)
 4004ac0:	00000a06 	br	4004aec <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4004ac4:	e0bffd17 	ldw	r2,-12(fp)
 4004ac8:	10800044 	addi	r2,r2,1
 4004acc:	e0bffd15 	stw	r2,-12(fp)
 4004ad0:	00810034 	movhi	r2,1024
 4004ad4:	109c0b04 	addi	r2,r2,28716
 4004ad8:	10800017 	ldw	r2,0(r2)
 4004adc:	1007883a 	mov	r3,r2
 4004ae0:	e0bffd17 	ldw	r2,-12(fp)
 4004ae4:	18bfda2e 	bgeu	r3,r2,4004a50 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4004ae8:	e03fff15 	stw	zero,-4(fp)
 4004aec:	e0bfff17 	ldw	r2,-4(fp)
}
 4004af0:	e037883a 	mov	sp,fp
 4004af4:	df000017 	ldw	fp,0(sp)
 4004af8:	dec00104 	addi	sp,sp,4
 4004afc:	f800283a 	ret

04004b00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4004b00:	defff404 	addi	sp,sp,-48
 4004b04:	dfc00b15 	stw	ra,44(sp)
 4004b08:	df000a15 	stw	fp,40(sp)
 4004b0c:	df000a04 	addi	fp,sp,40
 4004b10:	e13ffb15 	stw	r4,-20(fp)
 4004b14:	e17ffc15 	stw	r5,-16(fp)
 4004b18:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4004b1c:	00bfffc4 	movi	r2,-1
 4004b20:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4004b24:	00bffb44 	movi	r2,-19
 4004b28:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 4004b2c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4004b30:	e13ffb17 	ldw	r4,-20(fp)
 4004b34:	01410034 	movhi	r5,1024
 4004b38:	295c0904 	addi	r5,r5,28708
 4004b3c:	4004eac0 	call	4004eac <alt_find_dev>
 4004b40:	e0bffa15 	stw	r2,-24(fp)
 4004b44:	e0bffa17 	ldw	r2,-24(fp)
 4004b48:	1004c03a 	cmpne	r2,r2,zero
 4004b4c:	1000051e 	bne	r2,zero,4004b64 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4004b50:	e13ffb17 	ldw	r4,-20(fp)
 4004b54:	4004f400 	call	4004f40 <alt_find_file>
 4004b58:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 4004b5c:	00800044 	movi	r2,1
 4004b60:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4004b64:	e0bffa17 	ldw	r2,-24(fp)
 4004b68:	1005003a 	cmpeq	r2,r2,zero
 4004b6c:	1000301e 	bne	r2,zero,4004c30 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4004b70:	e13ffa17 	ldw	r4,-24(fp)
 4004b74:	40050600 	call	4005060 <alt_get_fd>
 4004b78:	e0bff815 	stw	r2,-32(fp)
 4004b7c:	e0bff817 	ldw	r2,-32(fp)
 4004b80:	1004403a 	cmpge	r2,r2,zero
 4004b84:	1000031e 	bne	r2,zero,4004b94 <open+0x94>
    {
      status = index;
 4004b88:	e0bff817 	ldw	r2,-32(fp)
 4004b8c:	e0bff715 	stw	r2,-36(fp)
 4004b90:	00002906 	br	4004c38 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 4004b94:	e0bff817 	ldw	r2,-32(fp)
 4004b98:	10800324 	muli	r2,r2,12
 4004b9c:	1007883a 	mov	r3,r2
 4004ba0:	00810034 	movhi	r2,1024
 4004ba4:	10978b04 	addi	r2,r2,24108
 4004ba8:	1885883a 	add	r2,r3,r2
 4004bac:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4004bb0:	e0fffc17 	ldw	r3,-16(fp)
 4004bb4:	00900034 	movhi	r2,16384
 4004bb8:	10bfffc4 	addi	r2,r2,-1
 4004bbc:	1886703a 	and	r3,r3,r2
 4004bc0:	e0bff917 	ldw	r2,-28(fp)
 4004bc4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4004bc8:	e0bff617 	ldw	r2,-40(fp)
 4004bcc:	1004c03a 	cmpne	r2,r2,zero
 4004bd0:	1000061e 	bne	r2,zero,4004bec <open+0xec>
 4004bd4:	e13ff917 	ldw	r4,-28(fp)
 4004bd8:	4004a240 	call	4004a24 <alt_file_locked>
 4004bdc:	e0bff715 	stw	r2,-36(fp)
 4004be0:	e0bff717 	ldw	r2,-36(fp)
 4004be4:	1004803a 	cmplt	r2,r2,zero
 4004be8:	1000131e 	bne	r2,zero,4004c38 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4004bec:	e0bffa17 	ldw	r2,-24(fp)
 4004bf0:	10800317 	ldw	r2,12(r2)
 4004bf4:	1005003a 	cmpeq	r2,r2,zero
 4004bf8:	1000091e 	bne	r2,zero,4004c20 <open+0x120>
 4004bfc:	e0bffa17 	ldw	r2,-24(fp)
 4004c00:	10800317 	ldw	r2,12(r2)
 4004c04:	e13ff917 	ldw	r4,-28(fp)
 4004c08:	e17ffb17 	ldw	r5,-20(fp)
 4004c0c:	e1bffc17 	ldw	r6,-16(fp)
 4004c10:	e1fffd17 	ldw	r7,-12(fp)
 4004c14:	103ee83a 	callr	r2
 4004c18:	e0bfff15 	stw	r2,-4(fp)
 4004c1c:	00000106 	br	4004c24 <open+0x124>
 4004c20:	e03fff15 	stw	zero,-4(fp)
 4004c24:	e0bfff17 	ldw	r2,-4(fp)
 4004c28:	e0bff715 	stw	r2,-36(fp)
 4004c2c:	00000206 	br	4004c38 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4004c30:	00bffb44 	movi	r2,-19
 4004c34:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4004c38:	e0bff717 	ldw	r2,-36(fp)
 4004c3c:	1004403a 	cmpge	r2,r2,zero
 4004c40:	1000091e 	bne	r2,zero,4004c68 <open+0x168>
  {
    alt_release_fd (index);  
 4004c44:	e13ff817 	ldw	r4,-32(fp)
 4004c48:	40033680 	call	4003368 <alt_release_fd>
    ALT_ERRNO = -status;
 4004c4c:	4004c880 	call	4004c88 <alt_get_errno>
 4004c50:	e0fff717 	ldw	r3,-36(fp)
 4004c54:	00c7c83a 	sub	r3,zero,r3
 4004c58:	10c00015 	stw	r3,0(r2)
    return -1;
 4004c5c:	00bfffc4 	movi	r2,-1
 4004c60:	e0bffe15 	stw	r2,-8(fp)
 4004c64:	00000206 	br	4004c70 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 4004c68:	e0bff817 	ldw	r2,-32(fp)
 4004c6c:	e0bffe15 	stw	r2,-8(fp)
 4004c70:	e0bffe17 	ldw	r2,-8(fp)
}
 4004c74:	e037883a 	mov	sp,fp
 4004c78:	dfc00117 	ldw	ra,4(sp)
 4004c7c:	df000017 	ldw	fp,0(sp)
 4004c80:	dec00204 	addi	sp,sp,8
 4004c84:	f800283a 	ret

04004c88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004c88:	defffd04 	addi	sp,sp,-12
 4004c8c:	dfc00215 	stw	ra,8(sp)
 4004c90:	df000115 	stw	fp,4(sp)
 4004c94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4004c98:	00810034 	movhi	r2,1024
 4004c9c:	109c0c04 	addi	r2,r2,28720
 4004ca0:	10800017 	ldw	r2,0(r2)
 4004ca4:	1005003a 	cmpeq	r2,r2,zero
 4004ca8:	1000061e 	bne	r2,zero,4004cc4 <alt_get_errno+0x3c>
 4004cac:	00810034 	movhi	r2,1024
 4004cb0:	109c0c04 	addi	r2,r2,28720
 4004cb4:	10800017 	ldw	r2,0(r2)
 4004cb8:	103ee83a 	callr	r2
 4004cbc:	e0bfff15 	stw	r2,-4(fp)
 4004cc0:	00000306 	br	4004cd0 <alt_get_errno+0x48>
 4004cc4:	00810074 	movhi	r2,1025
 4004cc8:	10a2a604 	addi	r2,r2,-30056
 4004ccc:	e0bfff15 	stw	r2,-4(fp)
 4004cd0:	e0bfff17 	ldw	r2,-4(fp)
}
 4004cd4:	e037883a 	mov	sp,fp
 4004cd8:	dfc00117 	ldw	ra,4(sp)
 4004cdc:	df000017 	ldw	fp,0(sp)
 4004ce0:	dec00204 	addi	sp,sp,8
 4004ce4:	f800283a 	ret

04004ce8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4004ce8:	defffa04 	addi	sp,sp,-24
 4004cec:	df000515 	stw	fp,20(sp)
 4004cf0:	df000504 	addi	fp,sp,20
 4004cf4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004cf8:	0005303a 	rdctl	r2,status
 4004cfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004d00:	e0fffd17 	ldw	r3,-12(fp)
 4004d04:	00bfff84 	movi	r2,-2
 4004d08:	1884703a 	and	r2,r3,r2
 4004d0c:	1001703a 	wrctl	status,r2
  
  return context;
 4004d10:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4004d14:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 4004d18:	e0bfff17 	ldw	r2,-4(fp)
 4004d1c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4004d20:	e0bffc17 	ldw	r2,-16(fp)
 4004d24:	10c00017 	ldw	r3,0(r2)
 4004d28:	e0bffc17 	ldw	r2,-16(fp)
 4004d2c:	10800117 	ldw	r2,4(r2)
 4004d30:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4004d34:	e0bffc17 	ldw	r2,-16(fp)
 4004d38:	10c00117 	ldw	r3,4(r2)
 4004d3c:	e0bffc17 	ldw	r2,-16(fp)
 4004d40:	10800017 	ldw	r2,0(r2)
 4004d44:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4004d48:	e0fffc17 	ldw	r3,-16(fp)
 4004d4c:	e0bffc17 	ldw	r2,-16(fp)
 4004d50:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4004d54:	e0fffc17 	ldw	r3,-16(fp)
 4004d58:	e0bffc17 	ldw	r2,-16(fp)
 4004d5c:	18800015 	stw	r2,0(r3)
 4004d60:	e0bffe17 	ldw	r2,-8(fp)
 4004d64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004d68:	e0bffb17 	ldw	r2,-20(fp)
 4004d6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4004d70:	e037883a 	mov	sp,fp
 4004d74:	df000017 	ldw	fp,0(sp)
 4004d78:	dec00104 	addi	sp,sp,4
 4004d7c:	f800283a 	ret

04004d80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4004d80:	defffb04 	addi	sp,sp,-20
 4004d84:	dfc00415 	stw	ra,16(sp)
 4004d88:	df000315 	stw	fp,12(sp)
 4004d8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4004d90:	d0a00c17 	ldw	r2,-32720(gp)
 4004d94:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4004d98:	d0a6a917 	ldw	r2,-25948(gp)
 4004d9c:	10800044 	addi	r2,r2,1
 4004da0:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4004da4:	00003106 	br	4004e6c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4004da8:	e0bffe17 	ldw	r2,-8(fp)
 4004dac:	10800017 	ldw	r2,0(r2)
 4004db0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4004db4:	e0bffe17 	ldw	r2,-8(fp)
 4004db8:	10800403 	ldbu	r2,16(r2)
 4004dbc:	10803fcc 	andi	r2,r2,255
 4004dc0:	1005003a 	cmpeq	r2,r2,zero
 4004dc4:	1000051e 	bne	r2,zero,4004ddc <alt_tick+0x5c>
 4004dc8:	d0a6a917 	ldw	r2,-25948(gp)
 4004dcc:	1004c03a 	cmpne	r2,r2,zero
 4004dd0:	1000021e 	bne	r2,zero,4004ddc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4004dd4:	e0bffe17 	ldw	r2,-8(fp)
 4004dd8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4004ddc:	e0bffe17 	ldw	r2,-8(fp)
 4004de0:	10c00217 	ldw	r3,8(r2)
 4004de4:	d0a6a917 	ldw	r2,-25948(gp)
 4004de8:	10c01e36 	bltu	r2,r3,4004e64 <alt_tick+0xe4>
 4004dec:	e0bffe17 	ldw	r2,-8(fp)
 4004df0:	10800403 	ldbu	r2,16(r2)
 4004df4:	10803fcc 	andi	r2,r2,255
 4004df8:	1004c03a 	cmpne	r2,r2,zero
 4004dfc:	1000191e 	bne	r2,zero,4004e64 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4004e00:	e0bffe17 	ldw	r2,-8(fp)
 4004e04:	10c00317 	ldw	r3,12(r2)
 4004e08:	e0bffe17 	ldw	r2,-8(fp)
 4004e0c:	11000517 	ldw	r4,20(r2)
 4004e10:	183ee83a 	callr	r3
 4004e14:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4004e18:	e0bffd17 	ldw	r2,-12(fp)
 4004e1c:	1004c03a 	cmpne	r2,r2,zero
 4004e20:	1000031e 	bne	r2,zero,4004e30 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4004e24:	e13ffe17 	ldw	r4,-8(fp)
 4004e28:	4004ce80 	call	4004ce8 <alt_alarm_stop>
 4004e2c:	00000d06 	br	4004e64 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4004e30:	e0bffe17 	ldw	r2,-8(fp)
 4004e34:	10c00217 	ldw	r3,8(r2)
 4004e38:	e0bffd17 	ldw	r2,-12(fp)
 4004e3c:	1887883a 	add	r3,r3,r2
 4004e40:	e0bffe17 	ldw	r2,-8(fp)
 4004e44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4004e48:	e0bffe17 	ldw	r2,-8(fp)
 4004e4c:	10c00217 	ldw	r3,8(r2)
 4004e50:	d0a6a917 	ldw	r2,-25948(gp)
 4004e54:	1880032e 	bgeu	r3,r2,4004e64 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4004e58:	e0fffe17 	ldw	r3,-8(fp)
 4004e5c:	00800044 	movi	r2,1
 4004e60:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4004e64:	e0bfff17 	ldw	r2,-4(fp)
 4004e68:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4004e6c:	d0e00c04 	addi	r3,gp,-32720
 4004e70:	e0bffe17 	ldw	r2,-8(fp)
 4004e74:	10ffcc1e 	bne	r2,r3,4004da8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4004e78:	e037883a 	mov	sp,fp
 4004e7c:	dfc00117 	ldw	ra,4(sp)
 4004e80:	df000017 	ldw	fp,0(sp)
 4004e84:	dec00204 	addi	sp,sp,8
 4004e88:	f800283a 	ret

04004e8c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4004e8c:	deffff04 	addi	sp,sp,-4
 4004e90:	df000015 	stw	fp,0(sp)
 4004e94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4004e98:	000170fa 	wrctl	ienable,zero
}
 4004e9c:	e037883a 	mov	sp,fp
 4004ea0:	df000017 	ldw	fp,0(sp)
 4004ea4:	dec00104 	addi	sp,sp,4
 4004ea8:	f800283a 	ret

04004eac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4004eac:	defff904 	addi	sp,sp,-28
 4004eb0:	dfc00615 	stw	ra,24(sp)
 4004eb4:	df000515 	stw	fp,20(sp)
 4004eb8:	df000504 	addi	fp,sp,20
 4004ebc:	e13ffd15 	stw	r4,-12(fp)
 4004ec0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4004ec4:	e0bffe17 	ldw	r2,-8(fp)
 4004ec8:	10800017 	ldw	r2,0(r2)
 4004ecc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4004ed0:	e13ffd17 	ldw	r4,-12(fp)
 4004ed4:	40002c80 	call	40002c8 <strlen>
 4004ed8:	10800044 	addi	r2,r2,1
 4004edc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4004ee0:	00000d06 	br	4004f18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4004ee4:	e0bffc17 	ldw	r2,-16(fp)
 4004ee8:	11000217 	ldw	r4,8(r2)
 4004eec:	e1bffb17 	ldw	r6,-20(fp)
 4004ef0:	e17ffd17 	ldw	r5,-12(fp)
 4004ef4:	40051f40 	call	40051f4 <memcmp>
 4004ef8:	1004c03a 	cmpne	r2,r2,zero
 4004efc:	1000031e 	bne	r2,zero,4004f0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4004f00:	e0bffc17 	ldw	r2,-16(fp)
 4004f04:	e0bfff15 	stw	r2,-4(fp)
 4004f08:	00000706 	br	4004f28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4004f0c:	e0bffc17 	ldw	r2,-16(fp)
 4004f10:	10800017 	ldw	r2,0(r2)
 4004f14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4004f18:	e0fffe17 	ldw	r3,-8(fp)
 4004f1c:	e0bffc17 	ldw	r2,-16(fp)
 4004f20:	10fff01e 	bne	r2,r3,4004ee4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4004f24:	e03fff15 	stw	zero,-4(fp)
 4004f28:	e0bfff17 	ldw	r2,-4(fp)
}
 4004f2c:	e037883a 	mov	sp,fp
 4004f30:	dfc00117 	ldw	ra,4(sp)
 4004f34:	df000017 	ldw	fp,0(sp)
 4004f38:	dec00204 	addi	sp,sp,8
 4004f3c:	f800283a 	ret

04004f40 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4004f40:	defffa04 	addi	sp,sp,-24
 4004f44:	dfc00515 	stw	ra,20(sp)
 4004f48:	df000415 	stw	fp,16(sp)
 4004f4c:	df000404 	addi	fp,sp,16
 4004f50:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4004f54:	00810034 	movhi	r2,1024
 4004f58:	109c0704 	addi	r2,r2,28700
 4004f5c:	10800017 	ldw	r2,0(r2)
 4004f60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4004f64:	00003306 	br	4005034 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4004f68:	e0bffd17 	ldw	r2,-12(fp)
 4004f6c:	11000217 	ldw	r4,8(r2)
 4004f70:	40002c80 	call	40002c8 <strlen>
 4004f74:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4004f78:	e0bffd17 	ldw	r2,-12(fp)
 4004f7c:	10c00217 	ldw	r3,8(r2)
 4004f80:	e0bffc17 	ldw	r2,-16(fp)
 4004f84:	1885883a 	add	r2,r3,r2
 4004f88:	10bfffc4 	addi	r2,r2,-1
 4004f8c:	10800003 	ldbu	r2,0(r2)
 4004f90:	10803fcc 	andi	r2,r2,255
 4004f94:	1080201c 	xori	r2,r2,128
 4004f98:	10bfe004 	addi	r2,r2,-128
 4004f9c:	10800bd8 	cmpnei	r2,r2,47
 4004fa0:	1000031e 	bne	r2,zero,4004fb0 <alt_find_file+0x70>
    {
      len -= 1;
 4004fa4:	e0bffc17 	ldw	r2,-16(fp)
 4004fa8:	10bfffc4 	addi	r2,r2,-1
 4004fac:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4004fb0:	e0bffc17 	ldw	r2,-16(fp)
 4004fb4:	1007883a 	mov	r3,r2
 4004fb8:	e0bffe17 	ldw	r2,-8(fp)
 4004fbc:	1885883a 	add	r2,r3,r2
 4004fc0:	10800003 	ldbu	r2,0(r2)
 4004fc4:	10803fcc 	andi	r2,r2,255
 4004fc8:	1080201c 	xori	r2,r2,128
 4004fcc:	10bfe004 	addi	r2,r2,-128
 4004fd0:	10800be0 	cmpeqi	r2,r2,47
 4004fd4:	10000a1e 	bne	r2,zero,4005000 <alt_find_file+0xc0>
 4004fd8:	e0bffc17 	ldw	r2,-16(fp)
 4004fdc:	1007883a 	mov	r3,r2
 4004fe0:	e0bffe17 	ldw	r2,-8(fp)
 4004fe4:	1885883a 	add	r2,r3,r2
 4004fe8:	10800003 	ldbu	r2,0(r2)
 4004fec:	10803fcc 	andi	r2,r2,255
 4004ff0:	1080201c 	xori	r2,r2,128
 4004ff4:	10bfe004 	addi	r2,r2,-128
 4004ff8:	1004c03a 	cmpne	r2,r2,zero
 4004ffc:	10000a1e 	bne	r2,zero,4005028 <alt_find_file+0xe8>
 4005000:	e0bffd17 	ldw	r2,-12(fp)
 4005004:	11000217 	ldw	r4,8(r2)
 4005008:	e1bffc17 	ldw	r6,-16(fp)
 400500c:	e17ffe17 	ldw	r5,-8(fp)
 4005010:	40051f40 	call	40051f4 <memcmp>
 4005014:	1004c03a 	cmpne	r2,r2,zero
 4005018:	1000031e 	bne	r2,zero,4005028 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400501c:	e0bffd17 	ldw	r2,-12(fp)
 4005020:	e0bfff15 	stw	r2,-4(fp)
 4005024:	00000806 	br	4005048 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4005028:	e0bffd17 	ldw	r2,-12(fp)
 400502c:	10800017 	ldw	r2,0(r2)
 4005030:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4005034:	00c10034 	movhi	r3,1024
 4005038:	18dc0704 	addi	r3,r3,28700
 400503c:	e0bffd17 	ldw	r2,-12(fp)
 4005040:	10ffc91e 	bne	r2,r3,4004f68 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4005044:	e03fff15 	stw	zero,-4(fp)
 4005048:	e0bfff17 	ldw	r2,-4(fp)
}
 400504c:	e037883a 	mov	sp,fp
 4005050:	dfc00117 	ldw	ra,4(sp)
 4005054:	df000017 	ldw	fp,0(sp)
 4005058:	dec00204 	addi	sp,sp,8
 400505c:	f800283a 	ret

04005060 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4005060:	defffc04 	addi	sp,sp,-16
 4005064:	df000315 	stw	fp,12(sp)
 4005068:	df000304 	addi	fp,sp,12
 400506c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4005070:	00bffa04 	movi	r2,-24
 4005074:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4005078:	e03ffe15 	stw	zero,-8(fp)
 400507c:	00001e06 	br	40050f8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 4005080:	e0bffe17 	ldw	r2,-8(fp)
 4005084:	00c10034 	movhi	r3,1024
 4005088:	18d78b04 	addi	r3,r3,24108
 400508c:	10800324 	muli	r2,r2,12
 4005090:	10c5883a 	add	r2,r2,r3
 4005094:	10800017 	ldw	r2,0(r2)
 4005098:	1004c03a 	cmpne	r2,r2,zero
 400509c:	1000131e 	bne	r2,zero,40050ec <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 40050a0:	e0bffe17 	ldw	r2,-8(fp)
 40050a4:	00c10034 	movhi	r3,1024
 40050a8:	18d78b04 	addi	r3,r3,24108
 40050ac:	10800324 	muli	r2,r2,12
 40050b0:	10c7883a 	add	r3,r2,r3
 40050b4:	e0bfff17 	ldw	r2,-4(fp)
 40050b8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 40050bc:	00810034 	movhi	r2,1024
 40050c0:	109c0b04 	addi	r2,r2,28716
 40050c4:	10c00017 	ldw	r3,0(r2)
 40050c8:	e0bffe17 	ldw	r2,-8(fp)
 40050cc:	1880040e 	bge	r3,r2,40050e0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 40050d0:	00c10034 	movhi	r3,1024
 40050d4:	18dc0b04 	addi	r3,r3,28716
 40050d8:	e0bffe17 	ldw	r2,-8(fp)
 40050dc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 40050e0:	e0bffe17 	ldw	r2,-8(fp)
 40050e4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40050e8:	00000606 	br	4005104 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40050ec:	e0bffe17 	ldw	r2,-8(fp)
 40050f0:	10800044 	addi	r2,r2,1
 40050f4:	e0bffe15 	stw	r2,-8(fp)
 40050f8:	e0bffe17 	ldw	r2,-8(fp)
 40050fc:	10800810 	cmplti	r2,r2,32
 4005100:	103fdf1e 	bne	r2,zero,4005080 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4005104:	e0bffd17 	ldw	r2,-12(fp)
}
 4005108:	e037883a 	mov	sp,fp
 400510c:	df000017 	ldw	fp,0(sp)
 4005110:	dec00104 	addi	sp,sp,4
 4005114:	f800283a 	ret

04005118 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4005118:	defffb04 	addi	sp,sp,-20
 400511c:	df000415 	stw	fp,16(sp)
 4005120:	df000404 	addi	fp,sp,16
 4005124:	e13ffe15 	stw	r4,-8(fp)
 4005128:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400512c:	e0bfff17 	ldw	r2,-4(fp)
 4005130:	10820070 	cmpltui	r2,r2,2049
 4005134:	1000021e 	bne	r2,zero,4005140 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4005138:	00820004 	movi	r2,2048
 400513c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4005140:	e0fffe17 	ldw	r3,-8(fp)
 4005144:	e0bfff17 	ldw	r2,-4(fp)
 4005148:	1885883a 	add	r2,r3,r2
 400514c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4005150:	e0bffe17 	ldw	r2,-8(fp)
 4005154:	e0bffd15 	stw	r2,-12(fp)
 4005158:	00000506 	br	4005170 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400515c:	e0bffd17 	ldw	r2,-12(fp)
 4005160:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4005164:	e0bffd17 	ldw	r2,-12(fp)
 4005168:	10800804 	addi	r2,r2,32
 400516c:	e0bffd15 	stw	r2,-12(fp)
 4005170:	e0fffd17 	ldw	r3,-12(fp)
 4005174:	e0bffc17 	ldw	r2,-16(fp)
 4005178:	18bff836 	bltu	r3,r2,400515c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400517c:	e0bffe17 	ldw	r2,-8(fp)
 4005180:	108007cc 	andi	r2,r2,31
 4005184:	1005003a 	cmpeq	r2,r2,zero
 4005188:	1000021e 	bne	r2,zero,4005194 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400518c:	e0bffd17 	ldw	r2,-12(fp)
 4005190:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4005194:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4005198:	e037883a 	mov	sp,fp
 400519c:	df000017 	ldw	fp,0(sp)
 40051a0:	dec00104 	addi	sp,sp,4
 40051a4:	f800283a 	ret

040051a8 <atexit>:
 40051a8:	200b883a 	mov	r5,r4
 40051ac:	000d883a 	mov	r6,zero
 40051b0:	0009883a 	mov	r4,zero
 40051b4:	000f883a 	mov	r7,zero
 40051b8:	40052681 	jmpi	4005268 <__register_exitproc>

040051bc <exit>:
 40051bc:	defffe04 	addi	sp,sp,-8
 40051c0:	000b883a 	mov	r5,zero
 40051c4:	dc000015 	stw	r16,0(sp)
 40051c8:	dfc00115 	stw	ra,4(sp)
 40051cc:	2021883a 	mov	r16,r4
 40051d0:	40053a00 	call	40053a0 <__call_exitprocs>
 40051d4:	00810034 	movhi	r2,1024
 40051d8:	109c0404 	addi	r2,r2,28688
 40051dc:	11000017 	ldw	r4,0(r2)
 40051e0:	20800f17 	ldw	r2,60(r4)
 40051e4:	10000126 	beq	r2,zero,40051ec <exit+0x30>
 40051e8:	103ee83a 	callr	r2
 40051ec:	8009883a 	mov	r4,r16
 40051f0:	40055900 	call	4005590 <_exit>

040051f4 <memcmp>:
 40051f4:	00c000c4 	movi	r3,3
 40051f8:	1980032e 	bgeu	r3,r6,4005208 <memcmp+0x14>
 40051fc:	2144b03a 	or	r2,r4,r5
 4005200:	10c4703a 	and	r2,r2,r3
 4005204:	10000f26 	beq	r2,zero,4005244 <memcmp+0x50>
 4005208:	31ffffc4 	addi	r7,r6,-1
 400520c:	3000061e 	bne	r6,zero,4005228 <memcmp+0x34>
 4005210:	00000a06 	br	400523c <memcmp+0x48>
 4005214:	39ffffc4 	addi	r7,r7,-1
 4005218:	00bfffc4 	movi	r2,-1
 400521c:	21000044 	addi	r4,r4,1
 4005220:	29400044 	addi	r5,r5,1
 4005224:	38800526 	beq	r7,r2,400523c <memcmp+0x48>
 4005228:	20c00003 	ldbu	r3,0(r4)
 400522c:	28800003 	ldbu	r2,0(r5)
 4005230:	18bff826 	beq	r3,r2,4005214 <memcmp+0x20>
 4005234:	1885c83a 	sub	r2,r3,r2
 4005238:	f800283a 	ret
 400523c:	0005883a 	mov	r2,zero
 4005240:	f800283a 	ret
 4005244:	180f883a 	mov	r7,r3
 4005248:	20c00017 	ldw	r3,0(r4)
 400524c:	28800017 	ldw	r2,0(r5)
 4005250:	18bfed1e 	bne	r3,r2,4005208 <memcmp+0x14>
 4005254:	31bfff04 	addi	r6,r6,-4
 4005258:	21000104 	addi	r4,r4,4
 400525c:	29400104 	addi	r5,r5,4
 4005260:	39bff936 	bltu	r7,r6,4005248 <memcmp+0x54>
 4005264:	003fe806 	br	4005208 <memcmp+0x14>

04005268 <__register_exitproc>:
 4005268:	defffa04 	addi	sp,sp,-24
 400526c:	00810034 	movhi	r2,1024
 4005270:	109c0404 	addi	r2,r2,28688
 4005274:	dc000015 	stw	r16,0(sp)
 4005278:	14000017 	ldw	r16,0(r2)
 400527c:	dd000415 	stw	r20,16(sp)
 4005280:	2829883a 	mov	r20,r5
 4005284:	81405217 	ldw	r5,328(r16)
 4005288:	dcc00315 	stw	r19,12(sp)
 400528c:	dc800215 	stw	r18,8(sp)
 4005290:	dc400115 	stw	r17,4(sp)
 4005294:	dfc00515 	stw	ra,20(sp)
 4005298:	2023883a 	mov	r17,r4
 400529c:	3027883a 	mov	r19,r6
 40052a0:	3825883a 	mov	r18,r7
 40052a4:	28002526 	beq	r5,zero,400533c <__register_exitproc+0xd4>
 40052a8:	29000117 	ldw	r4,4(r5)
 40052ac:	008007c4 	movi	r2,31
 40052b0:	11002716 	blt	r2,r4,4005350 <__register_exitproc+0xe8>
 40052b4:	8800101e 	bne	r17,zero,40052f8 <__register_exitproc+0x90>
 40052b8:	2105883a 	add	r2,r4,r4
 40052bc:	1085883a 	add	r2,r2,r2
 40052c0:	20c00044 	addi	r3,r4,1
 40052c4:	1145883a 	add	r2,r2,r5
 40052c8:	0009883a 	mov	r4,zero
 40052cc:	15000215 	stw	r20,8(r2)
 40052d0:	28c00115 	stw	r3,4(r5)
 40052d4:	2005883a 	mov	r2,r4
 40052d8:	dfc00517 	ldw	ra,20(sp)
 40052dc:	dd000417 	ldw	r20,16(sp)
 40052e0:	dcc00317 	ldw	r19,12(sp)
 40052e4:	dc800217 	ldw	r18,8(sp)
 40052e8:	dc400117 	ldw	r17,4(sp)
 40052ec:	dc000017 	ldw	r16,0(sp)
 40052f0:	dec00604 	addi	sp,sp,24
 40052f4:	f800283a 	ret
 40052f8:	29802204 	addi	r6,r5,136
 40052fc:	00800044 	movi	r2,1
 4005300:	110e983a 	sll	r7,r2,r4
 4005304:	30c04017 	ldw	r3,256(r6)
 4005308:	2105883a 	add	r2,r4,r4
 400530c:	1085883a 	add	r2,r2,r2
 4005310:	1185883a 	add	r2,r2,r6
 4005314:	19c6b03a 	or	r3,r3,r7
 4005318:	14802015 	stw	r18,128(r2)
 400531c:	14c00015 	stw	r19,0(r2)
 4005320:	00800084 	movi	r2,2
 4005324:	30c04015 	stw	r3,256(r6)
 4005328:	88bfe31e 	bne	r17,r2,40052b8 <__register_exitproc+0x50>
 400532c:	30804117 	ldw	r2,260(r6)
 4005330:	11c4b03a 	or	r2,r2,r7
 4005334:	30804115 	stw	r2,260(r6)
 4005338:	003fdf06 	br	40052b8 <__register_exitproc+0x50>
 400533c:	00810074 	movhi	r2,1025
 4005340:	10a2f704 	addi	r2,r2,-29732
 4005344:	100b883a 	mov	r5,r2
 4005348:	80805215 	stw	r2,328(r16)
 400534c:	003fd606 	br	40052a8 <__register_exitproc+0x40>
 4005350:	00800034 	movhi	r2,0
 4005354:	10800004 	addi	r2,r2,0
 4005358:	1000021e 	bne	r2,zero,4005364 <__register_exitproc+0xfc>
 400535c:	013fffc4 	movi	r4,-1
 4005360:	003fdc06 	br	40052d4 <__register_exitproc+0x6c>
 4005364:	01006404 	movi	r4,400
 4005368:	103ee83a 	callr	r2
 400536c:	1007883a 	mov	r3,r2
 4005370:	103ffa26 	beq	r2,zero,400535c <__register_exitproc+0xf4>
 4005374:	80805217 	ldw	r2,328(r16)
 4005378:	180b883a 	mov	r5,r3
 400537c:	18000115 	stw	zero,4(r3)
 4005380:	18800015 	stw	r2,0(r3)
 4005384:	80c05215 	stw	r3,328(r16)
 4005388:	18006215 	stw	zero,392(r3)
 400538c:	18006315 	stw	zero,396(r3)
 4005390:	0009883a 	mov	r4,zero
 4005394:	883fc826 	beq	r17,zero,40052b8 <__register_exitproc+0x50>
 4005398:	003fd706 	br	40052f8 <__register_exitproc+0x90>

0400539c <register_fini>:
 400539c:	f800283a 	ret

040053a0 <__call_exitprocs>:
 40053a0:	00810034 	movhi	r2,1024
 40053a4:	109c0404 	addi	r2,r2,28688
 40053a8:	10800017 	ldw	r2,0(r2)
 40053ac:	defff304 	addi	sp,sp,-52
 40053b0:	df000b15 	stw	fp,44(sp)
 40053b4:	d8800115 	stw	r2,4(sp)
 40053b8:	00800034 	movhi	r2,0
 40053bc:	10800004 	addi	r2,r2,0
 40053c0:	1005003a 	cmpeq	r2,r2,zero
 40053c4:	d8800215 	stw	r2,8(sp)
 40053c8:	d8800117 	ldw	r2,4(sp)
 40053cc:	dd400815 	stw	r21,32(sp)
 40053d0:	dd000715 	stw	r20,28(sp)
 40053d4:	10805204 	addi	r2,r2,328
 40053d8:	dfc00c15 	stw	ra,48(sp)
 40053dc:	ddc00a15 	stw	r23,40(sp)
 40053e0:	dd800915 	stw	r22,36(sp)
 40053e4:	dcc00615 	stw	r19,24(sp)
 40053e8:	dc800515 	stw	r18,20(sp)
 40053ec:	dc400415 	stw	r17,16(sp)
 40053f0:	dc000315 	stw	r16,12(sp)
 40053f4:	282b883a 	mov	r21,r5
 40053f8:	2039883a 	mov	fp,r4
 40053fc:	d8800015 	stw	r2,0(sp)
 4005400:	2829003a 	cmpeq	r20,r5,zero
 4005404:	d8800117 	ldw	r2,4(sp)
 4005408:	14405217 	ldw	r17,328(r2)
 400540c:	88001026 	beq	r17,zero,4005450 <__call_exitprocs+0xb0>
 4005410:	ddc00017 	ldw	r23,0(sp)
 4005414:	88800117 	ldw	r2,4(r17)
 4005418:	8c802204 	addi	r18,r17,136
 400541c:	143fffc4 	addi	r16,r2,-1
 4005420:	80000916 	blt	r16,zero,4005448 <__call_exitprocs+0xa8>
 4005424:	05bfffc4 	movi	r22,-1
 4005428:	a000151e 	bne	r20,zero,4005480 <__call_exitprocs+0xe0>
 400542c:	8409883a 	add	r4,r16,r16
 4005430:	2105883a 	add	r2,r4,r4
 4005434:	1485883a 	add	r2,r2,r18
 4005438:	10c02017 	ldw	r3,128(r2)
 400543c:	a8c01126 	beq	r21,r3,4005484 <__call_exitprocs+0xe4>
 4005440:	843fffc4 	addi	r16,r16,-1
 4005444:	85bff81e 	bne	r16,r22,4005428 <__call_exitprocs+0x88>
 4005448:	d8800217 	ldw	r2,8(sp)
 400544c:	10003126 	beq	r2,zero,4005514 <__call_exitprocs+0x174>
 4005450:	dfc00c17 	ldw	ra,48(sp)
 4005454:	df000b17 	ldw	fp,44(sp)
 4005458:	ddc00a17 	ldw	r23,40(sp)
 400545c:	dd800917 	ldw	r22,36(sp)
 4005460:	dd400817 	ldw	r21,32(sp)
 4005464:	dd000717 	ldw	r20,28(sp)
 4005468:	dcc00617 	ldw	r19,24(sp)
 400546c:	dc800517 	ldw	r18,20(sp)
 4005470:	dc400417 	ldw	r17,16(sp)
 4005474:	dc000317 	ldw	r16,12(sp)
 4005478:	dec00d04 	addi	sp,sp,52
 400547c:	f800283a 	ret
 4005480:	8409883a 	add	r4,r16,r16
 4005484:	88c00117 	ldw	r3,4(r17)
 4005488:	2105883a 	add	r2,r4,r4
 400548c:	1445883a 	add	r2,r2,r17
 4005490:	18ffffc4 	addi	r3,r3,-1
 4005494:	11800217 	ldw	r6,8(r2)
 4005498:	1c001526 	beq	r3,r16,40054f0 <__call_exitprocs+0x150>
 400549c:	10000215 	stw	zero,8(r2)
 40054a0:	303fe726 	beq	r6,zero,4005440 <__call_exitprocs+0xa0>
 40054a4:	00c00044 	movi	r3,1
 40054a8:	1c06983a 	sll	r3,r3,r16
 40054ac:	90804017 	ldw	r2,256(r18)
 40054b0:	8cc00117 	ldw	r19,4(r17)
 40054b4:	1884703a 	and	r2,r3,r2
 40054b8:	10001426 	beq	r2,zero,400550c <__call_exitprocs+0x16c>
 40054bc:	90804117 	ldw	r2,260(r18)
 40054c0:	1884703a 	and	r2,r3,r2
 40054c4:	10000c1e 	bne	r2,zero,40054f8 <__call_exitprocs+0x158>
 40054c8:	2105883a 	add	r2,r4,r4
 40054cc:	1485883a 	add	r2,r2,r18
 40054d0:	11400017 	ldw	r5,0(r2)
 40054d4:	e009883a 	mov	r4,fp
 40054d8:	303ee83a 	callr	r6
 40054dc:	88800117 	ldw	r2,4(r17)
 40054e0:	98bfc81e 	bne	r19,r2,4005404 <__call_exitprocs+0x64>
 40054e4:	b8800017 	ldw	r2,0(r23)
 40054e8:	147fd526 	beq	r2,r17,4005440 <__call_exitprocs+0xa0>
 40054ec:	003fc506 	br	4005404 <__call_exitprocs+0x64>
 40054f0:	8c000115 	stw	r16,4(r17)
 40054f4:	003fea06 	br	40054a0 <__call_exitprocs+0x100>
 40054f8:	2105883a 	add	r2,r4,r4
 40054fc:	1485883a 	add	r2,r2,r18
 4005500:	11000017 	ldw	r4,0(r2)
 4005504:	303ee83a 	callr	r6
 4005508:	003ff406 	br	40054dc <__call_exitprocs+0x13c>
 400550c:	303ee83a 	callr	r6
 4005510:	003ff206 	br	40054dc <__call_exitprocs+0x13c>
 4005514:	88800117 	ldw	r2,4(r17)
 4005518:	1000081e 	bne	r2,zero,400553c <__call_exitprocs+0x19c>
 400551c:	89000017 	ldw	r4,0(r17)
 4005520:	20000726 	beq	r4,zero,4005540 <__call_exitprocs+0x1a0>
 4005524:	b9000015 	stw	r4,0(r23)
 4005528:	8809883a 	mov	r4,r17
 400552c:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>
 4005530:	bc400017 	ldw	r17,0(r23)
 4005534:	883fb71e 	bne	r17,zero,4005414 <__call_exitprocs+0x74>
 4005538:	003fc506 	br	4005450 <__call_exitprocs+0xb0>
 400553c:	89000017 	ldw	r4,0(r17)
 4005540:	882f883a 	mov	r23,r17
 4005544:	2023883a 	mov	r17,r4
 4005548:	883fb21e 	bne	r17,zero,4005414 <__call_exitprocs+0x74>
 400554c:	003fc006 	br	4005450 <__call_exitprocs+0xb0>

04005550 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4005550:	defffd04 	addi	sp,sp,-12
 4005554:	df000215 	stw	fp,8(sp)
 4005558:	df000204 	addi	fp,sp,8
 400555c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4005560:	e0bfff17 	ldw	r2,-4(fp)
 4005564:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4005568:	e0bffe17 	ldw	r2,-8(fp)
 400556c:	1005003a 	cmpeq	r2,r2,zero
 4005570:	1000021e 	bne	r2,zero,400557c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4005574:	002af070 	cmpltui	zero,zero,43969
 4005578:	00000106 	br	4005580 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 400557c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4005580:	e037883a 	mov	sp,fp
 4005584:	df000017 	ldw	fp,0(sp)
 4005588:	dec00104 	addi	sp,sp,4
 400558c:	f800283a 	ret

04005590 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4005590:	defffd04 	addi	sp,sp,-12
 4005594:	dfc00215 	stw	ra,8(sp)
 4005598:	df000115 	stw	fp,4(sp)
 400559c:	df000104 	addi	fp,sp,4
 40055a0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 40055a4:	e13fff17 	ldw	r4,-4(fp)
 40055a8:	40055500 	call	4005550 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40055ac:	003fff06 	br	40055ac <_exit+0x1c>
 40055b0:	0400539c 	xori	r16,zero,334
