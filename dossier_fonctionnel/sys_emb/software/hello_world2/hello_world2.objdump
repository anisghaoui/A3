
hello_world2.elf:     file format elf32-littlenios2
hello_world2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000194

Program Header:
    LOAD off    0x00001020 vaddr 0x08104020 paddr 0x04000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x04000194 paddr 0x04000194 align 2**12
         filesz 0x00001b08 memsz 0x00001b08 flags r-x
    LOAD off    0x00003c9c vaddr 0x04001c9c paddr 0x04001f7c align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x0000425c vaddr 0x0400225c paddr 0x0400225c align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-
    LOAD off    0x00004000 vaddr 0x08104000 paddr 0x08104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08104000  08104000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08104020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001ac4  04000194  04000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  04001c58  04001c58  00003c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  04001c9c  04001f7c  00003c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0400225c  0400225c  0000425c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000004d8  00000000  00000000  00004048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000006d3  00000000  00000000  00004520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000088a6  00000000  00000000  00004bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f7f  00000000  00000000  0000d499  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000059bb  00000000  00000000  0000f418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007b4  00000000  00000000  00014dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a18  00000000  00000000  00015588  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c60  00000000  00000000  00015fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00016c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00016c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00018535  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00018538  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001853b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001853c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001853d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00018541  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00018545  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00018549  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00018552  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001855b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00018564  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0001856f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000480c5  00000000  00000000  0001859e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08104000 l    d  .entry	00000000 .entry
08104020 l    d  .exceptions	00000000 .exceptions
04000194 l    d  .text	00000000 .text
04001c58 l    d  .rodata	00000000 .rodata
04001c9c l    d  .rwdata	00000000 .rwdata
0400225c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001dc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
04001c9c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
04000488 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
04000670 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04001d7c l     O .rwdata	0000002c JTAG_UART
0400074c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040009dc l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
04000bd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04000c7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04000d5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040010b8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040011f4 l     F .text	000000dc alt_file_locked
04001458 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04001a34 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04001bf4 l     F .text	00000040 alt_sim_halt
040004f4 g     F .text	0000005c alt_main
04000210 g     F .text	00000090 _puts_r
04002278 g     O .bss	00000100 alt_irq
04001f7c g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
08104000 g     F .entry	0000001c __reset
08104000 g       *ABS*	00000000 __alt_mem_ONCHIP
04000000 g       *ABS*	00000000 __flash_exceptions_start
0400225c g     O .bss	00000004 errno
04002264 g     O .bss	00000004 alt_argv
04009f50 g       *ABS*	00000000 _gp
04001dd0 g     O .rwdata	00000180 alt_fd_list
040016dc g     F .text	00000094 alt_find_dev
0400117c g     F .text	00000078 alt_io_redirect
040002a0 g     F .text	00000014 puts
04000834 g     F .text	00000104 altera_avalon_jtag_uart_read
04001948 g     F .text	00000090 alt_icache_flush
04001f68 g     O .rwdata	00000004 alt_max_fd
04001f54 g     O .rwdata	00000004 _global_impure_ptr
04002378 g       *ABS*	00000000 __bss_end
04000fc0 g     F .text	000000f8 alt_iic_isr_register
040015b0 g     F .text	0000010c alt_tick
04000f78 g     F .text	00000048 alt_ic_irq_enabled
04001518 g     F .text	00000098 alt_alarm_stop
0400226c g     O .bss	00000004 alt_irq_active
081040ec g     F .exceptions	000000c8 alt_irq_handler
04001da8 g     O .rwdata	00000028 alt_dev_null
08080000 g       *ABS*	00000000 __alt_mem_SSRAM_CONTROLLER
04000c38 g     F .text	00000044 alt_dcache_flush_all
04001f7c g       *ABS*	00000000 __ram_rwdata_end
04001f60 g     O .rwdata	00000008 alt_dev_list
04000550 g     F .text	00000120 write
04001c9c g       *ABS*	00000000 __ram_rodata_end
04002378 g       *ABS*	00000000 end
04800000 g       *ABS*	00000000 __alt_stack_pointer
04000a4c g     F .text	00000090 alt_avalon_timer_sc_init
04000938 g     F .text	000000a4 altera_avalon_jtag_uart_write
04001a38 g     F .text	000001bc __call_exitprocs
04000194 g     F .text	0000004c _start
04002270 g     O .bss	00000004 _alt_tick_rate
04002274 g     O .bss	00000004 _alt_nticks
04000704 g     F .text	00000048 alt_sys_init
04001c9c g       *ABS*	00000000 __ram_rwdata_start
04001c58 g       *ABS*	00000000 __ram_rodata_start
04000784 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04001890 g     F .text	000000b8 alt_get_fd
040019f8 g     F .text	0000003c memcmp
04002378 g       *ABS*	00000000 __alt_stack_base
04001770 g     F .text	00000120 alt_find_file
04000ca8 g     F .text	000000b4 alt_dev_llist_insert
040002d4 g     F .text	000000bc __sfvwrite_small_dev
0400225c g       *ABS*	00000000 __bss_start
040001e0 g     F .text	00000030 main
04000000 g       *ABS*	00000000 __alt_mem_SDRAM_CONTROLLER
04002268 g     O .bss	00000004 alt_envp
040007dc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04001f6c g     O .rwdata	00000004 alt_errno
04001c58 g       *ABS*	00000000 __flash_rodata_start
040006d0 g     F .text	00000034 alt_irq_init
040014b8 g     F .text	00000060 alt_release_fd
04000390 g     F .text	00000078 _write_r
04001f50 g     O .rwdata	00000004 _impure_ptr
04002260 g     O .bss	00000004 alt_argc
08104020 g       .exceptions	00000000 alt_irq_entry
04001f58 g     O .rwdata	00000008 alt_fs_list
08104020 g       *ABS*	00000000 __ram_exceptions_start
04000dec g     F .text	00000050 alt_ic_isr_register
04001f7c g       *ABS*	00000000 _edata
04002378 g       *ABS*	00000000 _end
081041b4 g       *ABS*	00000000 __ram_exceptions_end
04000ed8 g     F .text	000000a0 alt_ic_irq_disable
040016bc g     F .text	00000020 altera_nios2_qsys_irq_init
040019d8 g     F .text	00000020 exit
04800000 g       *ABS*	00000000 __alt_data_end
08104020 g     F .exceptions	00000000 alt_exception
04001c34 g     F .text	00000020 _exit
040002b4 g     F .text	00000020 strlen
040012d0 g     F .text	00000188 open
04000dbc g     F .text	00000030 alt_icache_flush_all
04001f70 g     O .rwdata	00000004 alt_priority_mask
04000e3c g     F .text	0000009c alt_ic_irq_enable
04001f74 g     O .rwdata	00000008 alt_alarm_list
04000adc g     F .text	000000fc close
04000408 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08104000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8104000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 8104004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8104008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 810400c:	00bffd16 	blt	zero,r2,8104004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8104010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8104014:	08406514 	ori	at,at,404
    jmp r1
 8104018:	0800683a 	jmp	at
 810401c:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>

Disassembly of section .exceptions:

08104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 810402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 810403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 810404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 810405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 810406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 810407c:	10000326 	beq	r2,zero,810408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8104080:	20000226 	beq	r4,zero,810408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8104084:	81040ec0 	call	81040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8104088:	00000306 	br	8104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 810408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 810409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 81040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 81040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 81040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 81040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 81040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 81040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 81040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 81040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 81040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 81040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 81040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 81040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 81040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 81040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 81040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 81040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 81040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 81040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 81040e8:	ef80083a 	eret

081040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 81040ec:	defff904 	addi	sp,sp,-28
 81040f0:	dfc00615 	stw	ra,24(sp)
 81040f4:	df000515 	stw	fp,20(sp)
 81040f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 81040fc:	0005313a 	rdctl	r2,ipending
 8104100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8104104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8104108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 810410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8104110:	00800044 	movi	r2,1
 8104114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8104118:	e0ffff17 	ldw	r3,-4(fp)
 810411c:	e0bffe17 	ldw	r2,-8(fp)
 8104120:	1884703a 	and	r2,r3,r2
 8104124:	1005003a 	cmpeq	r2,r2,zero
 8104128:	1000161e 	bne	r2,zero,8104184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 810412c:	e0bffd17 	ldw	r2,-12(fp)
 8104130:	00c10034 	movhi	r3,1024
 8104134:	18c89e04 	addi	r3,r3,8824
 8104138:	100490fa 	slli	r2,r2,3
 810413c:	10c5883a 	add	r2,r2,r3
 8104140:	11400017 	ldw	r5,0(r2)
 8104144:	e0bffd17 	ldw	r2,-12(fp)
 8104148:	00c10034 	movhi	r3,1024
 810414c:	18c89e04 	addi	r3,r3,8824
 8104150:	100490fa 	slli	r2,r2,3
 8104154:	10c5883a 	add	r2,r2,r3
 8104158:	10800104 	addi	r2,r2,4
 810415c:	11000017 	ldw	r4,0(r2)
 8104160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8104164:	0005313a 	rdctl	r2,ipending
 8104168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 810416c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8104170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8104174:	e0bfff17 	ldw	r2,-4(fp)
 8104178:	1004c03a 	cmpne	r2,r2,zero
 810417c:	103fe31e 	bne	r2,zero,810410c <alt_irq_handler+0x20>
 8104180:	00000706 	br	81041a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8104184:	e0bffe17 	ldw	r2,-8(fp)
 8104188:	1085883a 	add	r2,r2,r2
 810418c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8104190:	e0bffd17 	ldw	r2,-12(fp)
 8104194:	10800044 	addi	r2,r2,1
 8104198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 810419c:	003fde06 	br	8104118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 81041a0:	e037883a 	mov	sp,fp
 81041a4:	dfc00117 	ldw	ra,4(sp)
 81041a8:	df000017 	ldw	fp,0(sp)
 81041ac:	dec00204 	addi	sp,sp,8
 81041b0:	f800283a 	ret

Disassembly of section .text:

04000194 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000194:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000198:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400019c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 40001a0:	00bffd16 	blt	zero,r2,4000198 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001a4:	06c12034 	movhi	sp,1152
    ori sp, sp, %lo(__alt_stack_pointer)
 40001a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001ac:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 40001b0:	d6a7d414 	ori	gp,gp,40784
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001b4:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001b8:	10889714 	ori	r2,r2,8796

    movhi r3, %hi(__bss_end)
 40001bc:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001c0:	18c8de14 	ori	r3,r3,9080

    beq r2, r3, 1f
 40001c4:	10c00326 	beq	r2,r3,40001d4 <_start+0x40>

0:
    stw zero, (r2)
 40001c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001d0:	10fffd36 	bltu	r2,r3,40001c8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001d4:	40004080 	call	4000408 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001d8:	40004f40 	call	40004f4 <alt_main>

040001dc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001dc:	003fff06 	br	40001dc <alt_after_alt_main>

040001e0 <main>:
 */

#include <stdio.h>
#include "../hello_world2_bsp/system.h"
int main()
{
 40001e0:	defffe04 	addi	sp,sp,-8
 40001e4:	dfc00115 	stw	ra,4(sp)
 40001e8:	df000015 	stw	fp,0(sp)
 40001ec:	d839883a 	mov	fp,sp
	*((char*)LEDR_BASE) =0xAA;
 40001f0:	00c20474 	movhi	r3,2065
 40001f4:	18e40804 	addi	r3,r3,-28640
 40001f8:	00bfea84 	movi	r2,-86
 40001fc:	18800005 	stb	r2,0(r3)
for(;;)
  printf("Hello from Nios II!\n");
 4000200:	01010034 	movhi	r4,1024
 4000204:	21071604 	addi	r4,r4,7256
 4000208:	40002a00 	call	40002a0 <puts>
 400020c:	003ffc06 	br	4000200 <main+0x20>

04000210 <_puts_r>:
 4000210:	defffd04 	addi	sp,sp,-12
 4000214:	dc000015 	stw	r16,0(sp)
 4000218:	2021883a 	mov	r16,r4
 400021c:	2809883a 	mov	r4,r5
 4000220:	dfc00215 	stw	ra,8(sp)
 4000224:	dc400115 	stw	r17,4(sp)
 4000228:	2823883a 	mov	r17,r5
 400022c:	40002b40 	call	40002b4 <strlen>
 4000230:	80c00217 	ldw	r3,8(r16)
 4000234:	02010034 	movhi	r8,1024
 4000238:	4200b504 	addi	r8,r8,724
 400023c:	880d883a 	mov	r6,r17
 4000240:	100f883a 	mov	r7,r2
 4000244:	8009883a 	mov	r4,r16
 4000248:	180b883a 	mov	r5,r3
 400024c:	1a000115 	stw	r8,4(r3)
 4000250:	403ee83a 	callr	r8
 4000254:	047fffc4 	movi	r17,-1
 4000258:	8009883a 	mov	r4,r16
 400025c:	01810034 	movhi	r6,1024
 4000260:	31871b04 	addi	r6,r6,7276
 4000264:	01c00044 	movi	r7,1
 4000268:	1440071e 	bne	r2,r17,4000288 <_puts_r+0x78>
 400026c:	00ffffc4 	movi	r3,-1
 4000270:	1805883a 	mov	r2,r3
 4000274:	dfc00217 	ldw	ra,8(sp)
 4000278:	dc400117 	ldw	r17,4(sp)
 400027c:	dc000017 	ldw	r16,0(sp)
 4000280:	dec00304 	addi	sp,sp,12
 4000284:	f800283a 	ret
 4000288:	81400217 	ldw	r5,8(r16)
 400028c:	28c00117 	ldw	r3,4(r5)
 4000290:	183ee83a 	callr	r3
 4000294:	0007883a 	mov	r3,zero
 4000298:	147ff51e 	bne	r2,r17,4000270 <_puts_r+0x60>
 400029c:	003ff306 	br	400026c <_puts_r+0x5c>

040002a0 <puts>:
 40002a0:	00810034 	movhi	r2,1024
 40002a4:	1087d404 	addi	r2,r2,8016
 40002a8:	200b883a 	mov	r5,r4
 40002ac:	11000017 	ldw	r4,0(r2)
 40002b0:	40002101 	jmpi	4000210 <_puts_r>

040002b4 <strlen>:
 40002b4:	20800007 	ldb	r2,0(r4)
 40002b8:	10000526 	beq	r2,zero,40002d0 <strlen+0x1c>
 40002bc:	2007883a 	mov	r3,r4
 40002c0:	18c00044 	addi	r3,r3,1
 40002c4:	18800007 	ldb	r2,0(r3)
 40002c8:	103ffd1e 	bne	r2,zero,40002c0 <strlen+0xc>
 40002cc:	1905c83a 	sub	r2,r3,r4
 40002d0:	f800283a 	ret

040002d4 <__sfvwrite_small_dev>:
 40002d4:	2880000b 	ldhu	r2,0(r5)
 40002d8:	defffa04 	addi	sp,sp,-24
 40002dc:	dcc00315 	stw	r19,12(sp)
 40002e0:	1080020c 	andi	r2,r2,8
 40002e4:	dc800215 	stw	r18,8(sp)
 40002e8:	dc400115 	stw	r17,4(sp)
 40002ec:	dfc00515 	stw	ra,20(sp)
 40002f0:	dd000415 	stw	r20,16(sp)
 40002f4:	dc000015 	stw	r16,0(sp)
 40002f8:	2825883a 	mov	r18,r5
 40002fc:	2027883a 	mov	r19,r4
 4000300:	3023883a 	mov	r17,r6
 4000304:	10002026 	beq	r2,zero,4000388 <__sfvwrite_small_dev+0xb4>
 4000308:	2940008f 	ldh	r5,2(r5)
 400030c:	28000f16 	blt	r5,zero,400034c <__sfvwrite_small_dev+0x78>
 4000310:	01c01b0e 	bge	zero,r7,4000380 <__sfvwrite_small_dev+0xac>
 4000314:	3821883a 	mov	r16,r7
 4000318:	05010004 	movi	r20,1024
 400031c:	00000206 	br	4000328 <__sfvwrite_small_dev+0x54>
 4000320:	0400170e 	bge	zero,r16,4000380 <__sfvwrite_small_dev+0xac>
 4000324:	9140008f 	ldh	r5,2(r18)
 4000328:	880d883a 	mov	r6,r17
 400032c:	9809883a 	mov	r4,r19
 4000330:	800f883a 	mov	r7,r16
 4000334:	a400010e 	bge	r20,r16,400033c <__sfvwrite_small_dev+0x68>
 4000338:	01c10004 	movi	r7,1024
 400033c:	40003900 	call	4000390 <_write_r>
 4000340:	88a3883a 	add	r17,r17,r2
 4000344:	80a1c83a 	sub	r16,r16,r2
 4000348:	00bff516 	blt	zero,r2,4000320 <__sfvwrite_small_dev+0x4c>
 400034c:	9080000b 	ldhu	r2,0(r18)
 4000350:	00ffffc4 	movi	r3,-1
 4000354:	10801014 	ori	r2,r2,64
 4000358:	9080000d 	sth	r2,0(r18)
 400035c:	1805883a 	mov	r2,r3
 4000360:	dfc00517 	ldw	ra,20(sp)
 4000364:	dd000417 	ldw	r20,16(sp)
 4000368:	dcc00317 	ldw	r19,12(sp)
 400036c:	dc800217 	ldw	r18,8(sp)
 4000370:	dc400117 	ldw	r17,4(sp)
 4000374:	dc000017 	ldw	r16,0(sp)
 4000378:	dec00604 	addi	sp,sp,24
 400037c:	f800283a 	ret
 4000380:	0007883a 	mov	r3,zero
 4000384:	003ff506 	br	400035c <__sfvwrite_small_dev+0x88>
 4000388:	00ffffc4 	movi	r3,-1
 400038c:	003ff306 	br	400035c <__sfvwrite_small_dev+0x88>

04000390 <_write_r>:
 4000390:	defffd04 	addi	sp,sp,-12
 4000394:	dc000015 	stw	r16,0(sp)
 4000398:	04010034 	movhi	r16,1024
 400039c:	84089704 	addi	r16,r16,8796
 40003a0:	dc400115 	stw	r17,4(sp)
 40003a4:	80000015 	stw	zero,0(r16)
 40003a8:	2023883a 	mov	r17,r4
 40003ac:	2809883a 	mov	r4,r5
 40003b0:	300b883a 	mov	r5,r6
 40003b4:	380d883a 	mov	r6,r7
 40003b8:	dfc00215 	stw	ra,8(sp)
 40003bc:	40005500 	call	4000550 <write>
 40003c0:	1007883a 	mov	r3,r2
 40003c4:	00bfffc4 	movi	r2,-1
 40003c8:	18800626 	beq	r3,r2,40003e4 <_write_r+0x54>
 40003cc:	1805883a 	mov	r2,r3
 40003d0:	dfc00217 	ldw	ra,8(sp)
 40003d4:	dc400117 	ldw	r17,4(sp)
 40003d8:	dc000017 	ldw	r16,0(sp)
 40003dc:	dec00304 	addi	sp,sp,12
 40003e0:	f800283a 	ret
 40003e4:	80800017 	ldw	r2,0(r16)
 40003e8:	103ff826 	beq	r2,zero,40003cc <_write_r+0x3c>
 40003ec:	88800015 	stw	r2,0(r17)
 40003f0:	1805883a 	mov	r2,r3
 40003f4:	dfc00217 	ldw	ra,8(sp)
 40003f8:	dc400117 	ldw	r17,4(sp)
 40003fc:	dc000017 	ldw	r16,0(sp)
 4000400:	dec00304 	addi	sp,sp,12
 4000404:	f800283a 	ret

04000408 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000408:	defffe04 	addi	sp,sp,-8
 400040c:	dfc00115 	stw	ra,4(sp)
 4000410:	df000015 	stw	fp,0(sp)
 4000414:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4000418:	01010034 	movhi	r4,1024
 400041c:	2107df04 	addi	r4,r4,8060
 4000420:	01410034 	movhi	r5,1024
 4000424:	29472704 	addi	r5,r5,7324
 4000428:	01810034 	movhi	r6,1024
 400042c:	3187df04 	addi	r6,r6,8060
 4000430:	40004880 	call	4000488 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4000434:	01010034 	movhi	r4,1024
 4000438:	21000004 	addi	r4,r4,0
 400043c:	01420434 	movhi	r5,2064
 4000440:	29500804 	addi	r5,r5,16416
 4000444:	01820434 	movhi	r6,2064
 4000448:	31906d04 	addi	r6,r6,16820
 400044c:	40004880 	call	4000488 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4000450:	01010034 	movhi	r4,1024
 4000454:	21071604 	addi	r4,r4,7256
 4000458:	01410034 	movhi	r5,1024
 400045c:	29471604 	addi	r5,r5,7256
 4000460:	01810034 	movhi	r6,1024
 4000464:	31872704 	addi	r6,r6,7324
 4000468:	40004880 	call	4000488 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400046c:	4000c380 	call	4000c38 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4000470:	4000dbc0 	call	4000dbc <alt_icache_flush_all>
}
 4000474:	e037883a 	mov	sp,fp
 4000478:	dfc00117 	ldw	ra,4(sp)
 400047c:	df000017 	ldw	fp,0(sp)
 4000480:	dec00204 	addi	sp,sp,8
 4000484:	f800283a 	ret

04000488 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4000488:	defffc04 	addi	sp,sp,-16
 400048c:	df000315 	stw	fp,12(sp)
 4000490:	df000304 	addi	fp,sp,12
 4000494:	e13ffd15 	stw	r4,-12(fp)
 4000498:	e17ffe15 	stw	r5,-8(fp)
 400049c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40004a0:	e0fffe17 	ldw	r3,-8(fp)
 40004a4:	e0bffd17 	ldw	r2,-12(fp)
 40004a8:	18800e26 	beq	r3,r2,40004e4 <alt_load_section+0x5c>
  {
    while( to != end )
 40004ac:	00000a06 	br	40004d8 <alt_load_section+0x50>
    {
      *to++ = *from++;
 40004b0:	e0bffd17 	ldw	r2,-12(fp)
 40004b4:	10c00017 	ldw	r3,0(r2)
 40004b8:	e0bffe17 	ldw	r2,-8(fp)
 40004bc:	10c00015 	stw	r3,0(r2)
 40004c0:	e0bffe17 	ldw	r2,-8(fp)
 40004c4:	10800104 	addi	r2,r2,4
 40004c8:	e0bffe15 	stw	r2,-8(fp)
 40004cc:	e0bffd17 	ldw	r2,-12(fp)
 40004d0:	10800104 	addi	r2,r2,4
 40004d4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40004d8:	e0fffe17 	ldw	r3,-8(fp)
 40004dc:	e0bfff17 	ldw	r2,-4(fp)
 40004e0:	18bff31e 	bne	r3,r2,40004b0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 40004e4:	e037883a 	mov	sp,fp
 40004e8:	df000017 	ldw	fp,0(sp)
 40004ec:	dec00104 	addi	sp,sp,4
 40004f0:	f800283a 	ret

040004f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40004f4:	defffd04 	addi	sp,sp,-12
 40004f8:	dfc00215 	stw	ra,8(sp)
 40004fc:	df000115 	stw	fp,4(sp)
 4000500:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000504:	0009883a 	mov	r4,zero
 4000508:	40006d00 	call	40006d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400050c:	40007040 	call	4000704 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4000510:	01010034 	movhi	r4,1024
 4000514:	21071c04 	addi	r4,r4,7280
 4000518:	01410034 	movhi	r5,1024
 400051c:	29471c04 	addi	r5,r5,7280
 4000520:	01810034 	movhi	r6,1024
 4000524:	31871c04 	addi	r6,r6,7280
 4000528:	400117c0 	call	400117c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400052c:	d120c417 	ldw	r4,-31984(gp)
 4000530:	d160c517 	ldw	r5,-31980(gp)
 4000534:	d1a0c617 	ldw	r6,-31976(gp)
 4000538:	40001e00 	call	40001e0 <main>
 400053c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4000540:	01000044 	movi	r4,1
 4000544:	4000adc0 	call	4000adc <close>
  exit (result);
 4000548:	e13fff17 	ldw	r4,-4(fp)
 400054c:	40019d80 	call	40019d8 <exit>

04000550 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4000550:	defff704 	addi	sp,sp,-36
 4000554:	dfc00815 	stw	ra,32(sp)
 4000558:	df000715 	stw	fp,28(sp)
 400055c:	df000704 	addi	fp,sp,28
 4000560:	e13ffb15 	stw	r4,-20(fp)
 4000564:	e17ffc15 	stw	r5,-16(fp)
 4000568:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400056c:	e0bffb17 	ldw	r2,-20(fp)
 4000570:	1004803a 	cmplt	r2,r2,zero
 4000574:	1000081e 	bne	r2,zero,4000598 <write+0x48>
 4000578:	e0bffb17 	ldw	r2,-20(fp)
 400057c:	10800324 	muli	r2,r2,12
 4000580:	1007883a 	mov	r3,r2
 4000584:	00810034 	movhi	r2,1024
 4000588:	10877404 	addi	r2,r2,7632
 400058c:	1887883a 	add	r3,r3,r2
 4000590:	e0ffff15 	stw	r3,-4(fp)
 4000594:	00000106 	br	400059c <write+0x4c>
 4000598:	e03fff15 	stw	zero,-4(fp)
 400059c:	e0bfff17 	ldw	r2,-4(fp)
 40005a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 40005a4:	e0bffa17 	ldw	r2,-24(fp)
 40005a8:	1005003a 	cmpeq	r2,r2,zero
 40005ac:	1000241e 	bne	r2,zero,4000640 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40005b0:	e0bffa17 	ldw	r2,-24(fp)
 40005b4:	10800217 	ldw	r2,8(r2)
 40005b8:	108000cc 	andi	r2,r2,3
 40005bc:	1005003a 	cmpeq	r2,r2,zero
 40005c0:	10001a1e 	bne	r2,zero,400062c <write+0xdc>
 40005c4:	e0bffa17 	ldw	r2,-24(fp)
 40005c8:	10800017 	ldw	r2,0(r2)
 40005cc:	10800617 	ldw	r2,24(r2)
 40005d0:	1005003a 	cmpeq	r2,r2,zero
 40005d4:	1000151e 	bne	r2,zero,400062c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40005d8:	e0bffa17 	ldw	r2,-24(fp)
 40005dc:	10800017 	ldw	r2,0(r2)
 40005e0:	10800617 	ldw	r2,24(r2)
 40005e4:	e17ffc17 	ldw	r5,-16(fp)
 40005e8:	e1bffd17 	ldw	r6,-12(fp)
 40005ec:	e13ffa17 	ldw	r4,-24(fp)
 40005f0:	103ee83a 	callr	r2
 40005f4:	e0bff915 	stw	r2,-28(fp)
 40005f8:	e0bff917 	ldw	r2,-28(fp)
 40005fc:	1004403a 	cmpge	r2,r2,zero
 4000600:	1000071e 	bne	r2,zero,4000620 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 4000604:	40006700 	call	4000670 <alt_get_errno>
 4000608:	e0fff917 	ldw	r3,-28(fp)
 400060c:	00c7c83a 	sub	r3,zero,r3
 4000610:	10c00015 	stw	r3,0(r2)
        return -1;
 4000614:	00bfffc4 	movi	r2,-1
 4000618:	e0bffe15 	stw	r2,-8(fp)
 400061c:	00000e06 	br	4000658 <write+0x108>
      }
      return rval;
 4000620:	e0bff917 	ldw	r2,-28(fp)
 4000624:	e0bffe15 	stw	r2,-8(fp)
 4000628:	00000b06 	br	4000658 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400062c:	40006700 	call	4000670 <alt_get_errno>
 4000630:	1007883a 	mov	r3,r2
 4000634:	00800344 	movi	r2,13
 4000638:	18800015 	stw	r2,0(r3)
 400063c:	00000406 	br	4000650 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4000640:	40006700 	call	4000670 <alt_get_errno>
 4000644:	1007883a 	mov	r3,r2
 4000648:	00801444 	movi	r2,81
 400064c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4000650:	00bfffc4 	movi	r2,-1
 4000654:	e0bffe15 	stw	r2,-8(fp)
 4000658:	e0bffe17 	ldw	r2,-8(fp)
}
 400065c:	e037883a 	mov	sp,fp
 4000660:	dfc00117 	ldw	ra,4(sp)
 4000664:	df000017 	ldw	fp,0(sp)
 4000668:	dec00204 	addi	sp,sp,8
 400066c:	f800283a 	ret

04000670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000670:	defffd04 	addi	sp,sp,-12
 4000674:	dfc00215 	stw	ra,8(sp)
 4000678:	df000115 	stw	fp,4(sp)
 400067c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4000680:	00810034 	movhi	r2,1024
 4000684:	1087db04 	addi	r2,r2,8044
 4000688:	10800017 	ldw	r2,0(r2)
 400068c:	1005003a 	cmpeq	r2,r2,zero
 4000690:	1000061e 	bne	r2,zero,40006ac <alt_get_errno+0x3c>
 4000694:	00810034 	movhi	r2,1024
 4000698:	1087db04 	addi	r2,r2,8044
 400069c:	10800017 	ldw	r2,0(r2)
 40006a0:	103ee83a 	callr	r2
 40006a4:	e0bfff15 	stw	r2,-4(fp)
 40006a8:	00000306 	br	40006b8 <alt_get_errno+0x48>
 40006ac:	00810034 	movhi	r2,1024
 40006b0:	10889704 	addi	r2,r2,8796
 40006b4:	e0bfff15 	stw	r2,-4(fp)
 40006b8:	e0bfff17 	ldw	r2,-4(fp)
}
 40006bc:	e037883a 	mov	sp,fp
 40006c0:	dfc00117 	ldw	ra,4(sp)
 40006c4:	df000017 	ldw	fp,0(sp)
 40006c8:	dec00204 	addi	sp,sp,8
 40006cc:	f800283a 	ret

040006d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40006d0:	defffd04 	addi	sp,sp,-12
 40006d4:	dfc00215 	stw	ra,8(sp)
 40006d8:	df000115 	stw	fp,4(sp)
 40006dc:	df000104 	addi	fp,sp,4
 40006e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 40006e4:	40016bc0 	call	40016bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40006e8:	00800044 	movi	r2,1
 40006ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40006f0:	e037883a 	mov	sp,fp
 40006f4:	dfc00117 	ldw	ra,4(sp)
 40006f8:	df000017 	ldw	fp,0(sp)
 40006fc:	dec00204 	addi	sp,sp,8
 4000700:	f800283a 	ret

04000704 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000704:	defffe04 	addi	sp,sp,-8
 4000708:	dfc00115 	stw	ra,4(sp)
 400070c:	df000015 	stw	fp,0(sp)
 4000710:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
 4000714:	01020474 	movhi	r4,2065
 4000718:	21240004 	addi	r4,r4,-28672
 400071c:	000b883a 	mov	r5,zero
 4000720:	01800044 	movi	r6,1
 4000724:	01c00044 	movi	r7,1
 4000728:	4000a4c0 	call	4000a4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
 400072c:	01010034 	movhi	r4,1024
 4000730:	21075f04 	addi	r4,r4,7548
 4000734:	400074c0 	call	400074c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 4000738:	e037883a 	mov	sp,fp
 400073c:	dfc00117 	ldw	ra,4(sp)
 4000740:	df000017 	ldw	fp,0(sp)
 4000744:	dec00204 	addi	sp,sp,8
 4000748:	f800283a 	ret

0400074c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400074c:	defffd04 	addi	sp,sp,-12
 4000750:	dfc00215 	stw	ra,8(sp)
 4000754:	df000115 	stw	fp,4(sp)
 4000758:	df000104 	addi	fp,sp,4
 400075c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000760:	e13fff17 	ldw	r4,-4(fp)
 4000764:	01410034 	movhi	r5,1024
 4000768:	2947d804 	addi	r5,r5,8032
 400076c:	4000ca80 	call	4000ca8 <alt_dev_llist_insert>
}
 4000770:	e037883a 	mov	sp,fp
 4000774:	dfc00117 	ldw	ra,4(sp)
 4000778:	df000017 	ldw	fp,0(sp)
 400077c:	dec00204 	addi	sp,sp,8
 4000780:	f800283a 	ret

04000784 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4000784:	defffa04 	addi	sp,sp,-24
 4000788:	dfc00515 	stw	ra,20(sp)
 400078c:	df000415 	stw	fp,16(sp)
 4000790:	df000404 	addi	fp,sp,16
 4000794:	e13ffd15 	stw	r4,-12(fp)
 4000798:	e17ffe15 	stw	r5,-8(fp)
 400079c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40007a0:	e0bffd17 	ldw	r2,-12(fp)
 40007a4:	10800017 	ldw	r2,0(r2)
 40007a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40007ac:	e0bffc17 	ldw	r2,-16(fp)
 40007b0:	11000a04 	addi	r4,r2,40
 40007b4:	e0bffd17 	ldw	r2,-12(fp)
 40007b8:	11c00217 	ldw	r7,8(r2)
 40007bc:	e17ffe17 	ldw	r5,-8(fp)
 40007c0:	e1bfff17 	ldw	r6,-4(fp)
 40007c4:	40008340 	call	4000834 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40007c8:	e037883a 	mov	sp,fp
 40007cc:	dfc00117 	ldw	ra,4(sp)
 40007d0:	df000017 	ldw	fp,0(sp)
 40007d4:	dec00204 	addi	sp,sp,8
 40007d8:	f800283a 	ret

040007dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40007dc:	defffa04 	addi	sp,sp,-24
 40007e0:	dfc00515 	stw	ra,20(sp)
 40007e4:	df000415 	stw	fp,16(sp)
 40007e8:	df000404 	addi	fp,sp,16
 40007ec:	e13ffd15 	stw	r4,-12(fp)
 40007f0:	e17ffe15 	stw	r5,-8(fp)
 40007f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40007f8:	e0bffd17 	ldw	r2,-12(fp)
 40007fc:	10800017 	ldw	r2,0(r2)
 4000800:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000804:	e0bffc17 	ldw	r2,-16(fp)
 4000808:	11000a04 	addi	r4,r2,40
 400080c:	e0bffd17 	ldw	r2,-12(fp)
 4000810:	11c00217 	ldw	r7,8(r2)
 4000814:	e17ffe17 	ldw	r5,-8(fp)
 4000818:	e1bfff17 	ldw	r6,-4(fp)
 400081c:	40009380 	call	4000938 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4000820:	e037883a 	mov	sp,fp
 4000824:	dfc00117 	ldw	ra,4(sp)
 4000828:	df000017 	ldw	fp,0(sp)
 400082c:	dec00204 	addi	sp,sp,8
 4000830:	f800283a 	ret

04000834 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 4000834:	defff604 	addi	sp,sp,-40
 4000838:	df000915 	stw	fp,36(sp)
 400083c:	df000904 	addi	fp,sp,36
 4000840:	e13ffb15 	stw	r4,-20(fp)
 4000844:	e17ffc15 	stw	r5,-16(fp)
 4000848:	e1bffd15 	stw	r6,-12(fp)
 400084c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
 4000850:	e0bffb17 	ldw	r2,-20(fp)
 4000854:	10800017 	ldw	r2,0(r2)
 4000858:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
 400085c:	e0bffc17 	ldw	r2,-16(fp)
 4000860:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
 4000864:	e0bffd17 	ldw	r2,-12(fp)
 4000868:	1007883a 	mov	r3,r2
 400086c:	e0bffc17 	ldw	r2,-16(fp)
 4000870:	10c5883a 	add	r2,r2,r3
 4000874:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
 4000878:	00001606 	br	40008d4 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400087c:	e0bffa17 	ldw	r2,-24(fp)
 4000880:	10800037 	ldwio	r2,0(r2)
 4000884:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4000888:	e0bff717 	ldw	r2,-36(fp)
 400088c:	10a0000c 	andi	r2,r2,32768
 4000890:	1005003a 	cmpeq	r2,r2,zero
 4000894:	1000081e 	bne	r2,zero,40008b8 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000898:	e0bff717 	ldw	r2,-36(fp)
 400089c:	1007883a 	mov	r3,r2
 40008a0:	e0bff917 	ldw	r2,-28(fp)
 40008a4:	10c00005 	stb	r3,0(r2)
 40008a8:	e0bff917 	ldw	r2,-28(fp)
 40008ac:	10800044 	addi	r2,r2,1
 40008b0:	e0bff915 	stw	r2,-28(fp)
 40008b4:	00000706 	br	40008d4 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 40008b8:	e0fff917 	ldw	r3,-28(fp)
 40008bc:	e0bffc17 	ldw	r2,-16(fp)
 40008c0:	1880071e 	bne	r3,r2,40008e0 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
 40008c4:	e0bffe17 	ldw	r2,-8(fp)
 40008c8:	1090000c 	andi	r2,r2,16384
 40008cc:	1004c03a 	cmpne	r2,r2,zero
 40008d0:	1000031e 	bne	r2,zero,40008e0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 40008d4:	e0fff917 	ldw	r3,-28(fp)
 40008d8:	e0bff817 	ldw	r2,-32(fp)
 40008dc:	18bfe736 	bltu	r3,r2,400087c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 40008e0:	e0fff917 	ldw	r3,-28(fp)
 40008e4:	e0bffc17 	ldw	r2,-16(fp)
 40008e8:	18800526 	beq	r3,r2,4000900 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
 40008ec:	e0fff917 	ldw	r3,-28(fp)
 40008f0:	e0bffc17 	ldw	r2,-16(fp)
 40008f4:	1887c83a 	sub	r3,r3,r2
 40008f8:	e0ffff15 	stw	r3,-4(fp)
 40008fc:	00000906 	br	4000924 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
 4000900:	e0bffe17 	ldw	r2,-8(fp)
 4000904:	1090000c 	andi	r2,r2,16384
 4000908:	1005003a 	cmpeq	r2,r2,zero
 400090c:	1000031e 	bne	r2,zero,400091c <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
 4000910:	00bffd44 	movi	r2,-11
 4000914:	e0bfff15 	stw	r2,-4(fp)
 4000918:	00000206 	br	4000924 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
 400091c:	00bffec4 	movi	r2,-5
 4000920:	e0bfff15 	stw	r2,-4(fp)
 4000924:	e0bfff17 	ldw	r2,-4(fp)
}
 4000928:	e037883a 	mov	sp,fp
 400092c:	df000017 	ldw	fp,0(sp)
 4000930:	dec00104 	addi	sp,sp,4
 4000934:	f800283a 	ret

04000938 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000938:	defff904 	addi	sp,sp,-28
 400093c:	df000615 	stw	fp,24(sp)
 4000940:	df000604 	addi	fp,sp,24
 4000944:	e13ffc15 	stw	r4,-16(fp)
 4000948:	e17ffd15 	stw	r5,-12(fp)
 400094c:	e1bffe15 	stw	r6,-8(fp)
 4000950:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4000954:	e0bffc17 	ldw	r2,-16(fp)
 4000958:	10800017 	ldw	r2,0(r2)
 400095c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
 4000960:	e0bffe17 	ldw	r2,-8(fp)
 4000964:	1007883a 	mov	r3,r2
 4000968:	e0bffd17 	ldw	r2,-12(fp)
 400096c:	10c5883a 	add	r2,r2,r3
 4000970:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 4000974:	00001106 	br	40009bc <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000978:	e0bffb17 	ldw	r2,-20(fp)
 400097c:	10800104 	addi	r2,r2,4
 4000980:	10800037 	ldwio	r2,0(r2)
 4000984:	10bfffec 	andhi	r2,r2,65535
 4000988:	1005003a 	cmpeq	r2,r2,zero
 400098c:	10000b1e 	bne	r2,zero,40009bc <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4000990:	e13ffb17 	ldw	r4,-20(fp)
 4000994:	e0bffd17 	ldw	r2,-12(fp)
 4000998:	10800003 	ldbu	r2,0(r2)
 400099c:	10c03fcc 	andi	r3,r2,255
 40009a0:	18c0201c 	xori	r3,r3,128
 40009a4:	18ffe004 	addi	r3,r3,-128
 40009a8:	e0bffd17 	ldw	r2,-12(fp)
 40009ac:	10800044 	addi	r2,r2,1
 40009b0:	e0bffd15 	stw	r2,-12(fp)
 40009b4:	2005883a 	mov	r2,r4
 40009b8:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 40009bc:	e0fffd17 	ldw	r3,-12(fp)
 40009c0:	e0bffa17 	ldw	r2,-24(fp)
 40009c4:	18bfec36 	bltu	r3,r2,4000978 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 40009c8:	e0bffe17 	ldw	r2,-8(fp)
}
 40009cc:	e037883a 	mov	sp,fp
 40009d0:	df000017 	ldw	fp,0(sp)
 40009d4:	dec00104 	addi	sp,sp,4
 40009d8:	f800283a 	ret

040009dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40009dc:	defffa04 	addi	sp,sp,-24
 40009e0:	dfc00515 	stw	ra,20(sp)
 40009e4:	df000415 	stw	fp,16(sp)
 40009e8:	df000404 	addi	fp,sp,16
 40009ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40009f0:	e0bfff17 	ldw	r2,-4(fp)
 40009f4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40009f8:	e0bfff17 	ldw	r2,-4(fp)
 40009fc:	10800104 	addi	r2,r2,4
 4000a00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000a04:	0005303a 	rdctl	r2,status
 4000a08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000a0c:	e0fffd17 	ldw	r3,-12(fp)
 4000a10:	00bfff84 	movi	r2,-2
 4000a14:	1884703a 	and	r2,r3,r2
 4000a18:	1001703a 	wrctl	status,r2
  
  return context;
 4000a1c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4000a20:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4000a24:	40015b00 	call	40015b0 <alt_tick>
 4000a28:	e0bffe17 	ldw	r2,-8(fp)
 4000a2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000a30:	e0bffc17 	ldw	r2,-16(fp)
 4000a34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4000a38:	e037883a 	mov	sp,fp
 4000a3c:	dfc00117 	ldw	ra,4(sp)
 4000a40:	df000017 	ldw	fp,0(sp)
 4000a44:	dec00204 	addi	sp,sp,8
 4000a48:	f800283a 	ret

04000a4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4000a4c:	defff804 	addi	sp,sp,-32
 4000a50:	dfc00715 	stw	ra,28(sp)
 4000a54:	df000615 	stw	fp,24(sp)
 4000a58:	df000604 	addi	fp,sp,24
 4000a5c:	e13ffc15 	stw	r4,-16(fp)
 4000a60:	e17ffd15 	stw	r5,-12(fp)
 4000a64:	e1bffe15 	stw	r6,-8(fp)
 4000a68:	e1ffff15 	stw	r7,-4(fp)
 4000a6c:	e0bfff17 	ldw	r2,-4(fp)
 4000a70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4000a74:	00810034 	movhi	r2,1024
 4000a78:	10889c04 	addi	r2,r2,8816
 4000a7c:	10800017 	ldw	r2,0(r2)
 4000a80:	1004c03a 	cmpne	r2,r2,zero
 4000a84:	1000041e 	bne	r2,zero,4000a98 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4000a88:	00c10034 	movhi	r3,1024
 4000a8c:	18c89c04 	addi	r3,r3,8816
 4000a90:	e0bffb17 	ldw	r2,-20(fp)
 4000a94:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4000a98:	e0bffc17 	ldw	r2,-16(fp)
 4000a9c:	10800104 	addi	r2,r2,4
 4000aa0:	1007883a 	mov	r3,r2
 4000aa4:	008001c4 	movi	r2,7
 4000aa8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4000aac:	d8000015 	stw	zero,0(sp)
 4000ab0:	e13ffd17 	ldw	r4,-12(fp)
 4000ab4:	e17ffe17 	ldw	r5,-8(fp)
 4000ab8:	01810034 	movhi	r6,1024
 4000abc:	31827704 	addi	r6,r6,2524
 4000ac0:	e1fffc17 	ldw	r7,-16(fp)
 4000ac4:	4000dec0 	call	4000dec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4000ac8:	e037883a 	mov	sp,fp
 4000acc:	dfc00117 	ldw	ra,4(sp)
 4000ad0:	df000017 	ldw	fp,0(sp)
 4000ad4:	dec00204 	addi	sp,sp,8
 4000ad8:	f800283a 	ret

04000adc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4000adc:	defff804 	addi	sp,sp,-32
 4000ae0:	dfc00715 	stw	ra,28(sp)
 4000ae4:	df000615 	stw	fp,24(sp)
 4000ae8:	df000604 	addi	fp,sp,24
 4000aec:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4000af0:	e0bffc17 	ldw	r2,-16(fp)
 4000af4:	1004803a 	cmplt	r2,r2,zero
 4000af8:	1000081e 	bne	r2,zero,4000b1c <close+0x40>
 4000afc:	e0bffc17 	ldw	r2,-16(fp)
 4000b00:	10800324 	muli	r2,r2,12
 4000b04:	1007883a 	mov	r3,r2
 4000b08:	00810034 	movhi	r2,1024
 4000b0c:	10877404 	addi	r2,r2,7632
 4000b10:	1887883a 	add	r3,r3,r2
 4000b14:	e0ffff15 	stw	r3,-4(fp)
 4000b18:	00000106 	br	4000b20 <close+0x44>
 4000b1c:	e03fff15 	stw	zero,-4(fp)
 4000b20:	e0bfff17 	ldw	r2,-4(fp)
 4000b24:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4000b28:	e0bffb17 	ldw	r2,-20(fp)
 4000b2c:	1005003a 	cmpeq	r2,r2,zero
 4000b30:	10001d1e 	bne	r2,zero,4000ba8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4000b34:	e0bffb17 	ldw	r2,-20(fp)
 4000b38:	10800017 	ldw	r2,0(r2)
 4000b3c:	10800417 	ldw	r2,16(r2)
 4000b40:	1005003a 	cmpeq	r2,r2,zero
 4000b44:	1000071e 	bne	r2,zero,4000b64 <close+0x88>
 4000b48:	e0bffb17 	ldw	r2,-20(fp)
 4000b4c:	10800017 	ldw	r2,0(r2)
 4000b50:	10800417 	ldw	r2,16(r2)
 4000b54:	e13ffb17 	ldw	r4,-20(fp)
 4000b58:	103ee83a 	callr	r2
 4000b5c:	e0bffe15 	stw	r2,-8(fp)
 4000b60:	00000106 	br	4000b68 <close+0x8c>
 4000b64:	e03ffe15 	stw	zero,-8(fp)
 4000b68:	e0bffe17 	ldw	r2,-8(fp)
 4000b6c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4000b70:	e13ffc17 	ldw	r4,-16(fp)
 4000b74:	40014b80 	call	40014b8 <alt_release_fd>
    if (rval < 0)
 4000b78:	e0bffa17 	ldw	r2,-24(fp)
 4000b7c:	1004403a 	cmpge	r2,r2,zero
 4000b80:	1000071e 	bne	r2,zero,4000ba0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 4000b84:	4000bd80 	call	4000bd8 <alt_get_errno>
 4000b88:	e0fffa17 	ldw	r3,-24(fp)
 4000b8c:	00c7c83a 	sub	r3,zero,r3
 4000b90:	10c00015 	stw	r3,0(r2)
      return -1;
 4000b94:	00bfffc4 	movi	r2,-1
 4000b98:	e0bffd15 	stw	r2,-12(fp)
 4000b9c:	00000806 	br	4000bc0 <close+0xe4>
    }
    return 0;
 4000ba0:	e03ffd15 	stw	zero,-12(fp)
 4000ba4:	00000606 	br	4000bc0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4000ba8:	4000bd80 	call	4000bd8 <alt_get_errno>
 4000bac:	1007883a 	mov	r3,r2
 4000bb0:	00801444 	movi	r2,81
 4000bb4:	18800015 	stw	r2,0(r3)
    return -1;
 4000bb8:	00bfffc4 	movi	r2,-1
 4000bbc:	e0bffd15 	stw	r2,-12(fp)
 4000bc0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4000bc4:	e037883a 	mov	sp,fp
 4000bc8:	dfc00117 	ldw	ra,4(sp)
 4000bcc:	df000017 	ldw	fp,0(sp)
 4000bd0:	dec00204 	addi	sp,sp,8
 4000bd4:	f800283a 	ret

04000bd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000bd8:	defffd04 	addi	sp,sp,-12
 4000bdc:	dfc00215 	stw	ra,8(sp)
 4000be0:	df000115 	stw	fp,4(sp)
 4000be4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4000be8:	00810034 	movhi	r2,1024
 4000bec:	1087db04 	addi	r2,r2,8044
 4000bf0:	10800017 	ldw	r2,0(r2)
 4000bf4:	1005003a 	cmpeq	r2,r2,zero
 4000bf8:	1000061e 	bne	r2,zero,4000c14 <alt_get_errno+0x3c>
 4000bfc:	00810034 	movhi	r2,1024
 4000c00:	1087db04 	addi	r2,r2,8044
 4000c04:	10800017 	ldw	r2,0(r2)
 4000c08:	103ee83a 	callr	r2
 4000c0c:	e0bfff15 	stw	r2,-4(fp)
 4000c10:	00000306 	br	4000c20 <alt_get_errno+0x48>
 4000c14:	00810034 	movhi	r2,1024
 4000c18:	10889704 	addi	r2,r2,8796
 4000c1c:	e0bfff15 	stw	r2,-4(fp)
 4000c20:	e0bfff17 	ldw	r2,-4(fp)
}
 4000c24:	e037883a 	mov	sp,fp
 4000c28:	dfc00117 	ldw	ra,4(sp)
 4000c2c:	df000017 	ldw	fp,0(sp)
 4000c30:	dec00204 	addi	sp,sp,8
 4000c34:	f800283a 	ret

04000c38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4000c38:	defffe04 	addi	sp,sp,-8
 4000c3c:	df000115 	stw	fp,4(sp)
 4000c40:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000c44:	e03fff15 	stw	zero,-4(fp)
 4000c48:	00000506 	br	4000c60 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4000c4c:	e0bfff17 	ldw	r2,-4(fp)
 4000c50:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000c54:	e0bfff17 	ldw	r2,-4(fp)
 4000c58:	10800804 	addi	r2,r2,32
 4000c5c:	e0bfff15 	stw	r2,-4(fp)
 4000c60:	e0bfff17 	ldw	r2,-4(fp)
 4000c64:	10820030 	cmpltui	r2,r2,2048
 4000c68:	103ff81e 	bne	r2,zero,4000c4c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4000c6c:	e037883a 	mov	sp,fp
 4000c70:	df000017 	ldw	fp,0(sp)
 4000c74:	dec00104 	addi	sp,sp,4
 4000c78:	f800283a 	ret

04000c7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4000c7c:	defffc04 	addi	sp,sp,-16
 4000c80:	df000315 	stw	fp,12(sp)
 4000c84:	df000304 	addi	fp,sp,12
 4000c88:	e13ffd15 	stw	r4,-12(fp)
 4000c8c:	e17ffe15 	stw	r5,-8(fp)
 4000c90:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4000c94:	e0bfff17 	ldw	r2,-4(fp)
}
 4000c98:	e037883a 	mov	sp,fp
 4000c9c:	df000017 	ldw	fp,0(sp)
 4000ca0:	dec00104 	addi	sp,sp,4
 4000ca4:	f800283a 	ret

04000ca8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4000ca8:	defff904 	addi	sp,sp,-28
 4000cac:	dfc00615 	stw	ra,24(sp)
 4000cb0:	df000515 	stw	fp,20(sp)
 4000cb4:	df000504 	addi	fp,sp,20
 4000cb8:	e13ffd15 	stw	r4,-12(fp)
 4000cbc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4000cc0:	e0bffd17 	ldw	r2,-12(fp)
 4000cc4:	1005003a 	cmpeq	r2,r2,zero
 4000cc8:	1000041e 	bne	r2,zero,4000cdc <alt_dev_llist_insert+0x34>
 4000ccc:	e0bffd17 	ldw	r2,-12(fp)
 4000cd0:	10800217 	ldw	r2,8(r2)
 4000cd4:	1004c03a 	cmpne	r2,r2,zero
 4000cd8:	1000071e 	bne	r2,zero,4000cf8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4000cdc:	4000d5c0 	call	4000d5c <alt_get_errno>
 4000ce0:	1007883a 	mov	r3,r2
 4000ce4:	00800584 	movi	r2,22
 4000ce8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4000cec:	00bffa84 	movi	r2,-22
 4000cf0:	e0bfff15 	stw	r2,-4(fp)
 4000cf4:	00001306 	br	4000d44 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4000cf8:	e0fffd17 	ldw	r3,-12(fp)
 4000cfc:	e0bffe17 	ldw	r2,-8(fp)
 4000d00:	e0bffb15 	stw	r2,-20(fp)
 4000d04:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4000d08:	e0fffc17 	ldw	r3,-16(fp)
 4000d0c:	e0bffb17 	ldw	r2,-20(fp)
 4000d10:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4000d14:	e0bffb17 	ldw	r2,-20(fp)
 4000d18:	10c00017 	ldw	r3,0(r2)
 4000d1c:	e0bffc17 	ldw	r2,-16(fp)
 4000d20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4000d24:	e0bffb17 	ldw	r2,-20(fp)
 4000d28:	10c00017 	ldw	r3,0(r2)
 4000d2c:	e0bffc17 	ldw	r2,-16(fp)
 4000d30:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4000d34:	e0fffb17 	ldw	r3,-20(fp)
 4000d38:	e0bffc17 	ldw	r2,-16(fp)
 4000d3c:	18800015 	stw	r2,0(r3)

  return 0;  
 4000d40:	e03fff15 	stw	zero,-4(fp)
 4000d44:	e0bfff17 	ldw	r2,-4(fp)
}
 4000d48:	e037883a 	mov	sp,fp
 4000d4c:	dfc00117 	ldw	ra,4(sp)
 4000d50:	df000017 	ldw	fp,0(sp)
 4000d54:	dec00204 	addi	sp,sp,8
 4000d58:	f800283a 	ret

04000d5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000d5c:	defffd04 	addi	sp,sp,-12
 4000d60:	dfc00215 	stw	ra,8(sp)
 4000d64:	df000115 	stw	fp,4(sp)
 4000d68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4000d6c:	00810034 	movhi	r2,1024
 4000d70:	1087db04 	addi	r2,r2,8044
 4000d74:	10800017 	ldw	r2,0(r2)
 4000d78:	1005003a 	cmpeq	r2,r2,zero
 4000d7c:	1000061e 	bne	r2,zero,4000d98 <alt_get_errno+0x3c>
 4000d80:	00810034 	movhi	r2,1024
 4000d84:	1087db04 	addi	r2,r2,8044
 4000d88:	10800017 	ldw	r2,0(r2)
 4000d8c:	103ee83a 	callr	r2
 4000d90:	e0bfff15 	stw	r2,-4(fp)
 4000d94:	00000306 	br	4000da4 <alt_get_errno+0x48>
 4000d98:	00810034 	movhi	r2,1024
 4000d9c:	10889704 	addi	r2,r2,8796
 4000da0:	e0bfff15 	stw	r2,-4(fp)
 4000da4:	e0bfff17 	ldw	r2,-4(fp)
}
 4000da8:	e037883a 	mov	sp,fp
 4000dac:	dfc00117 	ldw	ra,4(sp)
 4000db0:	df000017 	ldw	fp,0(sp)
 4000db4:	dec00204 	addi	sp,sp,8
 4000db8:	f800283a 	ret

04000dbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4000dbc:	defffe04 	addi	sp,sp,-8
 4000dc0:	dfc00115 	stw	ra,4(sp)
 4000dc4:	df000015 	stw	fp,0(sp)
 4000dc8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4000dcc:	0009883a 	mov	r4,zero
 4000dd0:	01420004 	movi	r5,2048
 4000dd4:	40019480 	call	4001948 <alt_icache_flush>
#endif
}
 4000dd8:	e037883a 	mov	sp,fp
 4000ddc:	dfc00117 	ldw	ra,4(sp)
 4000de0:	df000017 	ldw	fp,0(sp)
 4000de4:	dec00204 	addi	sp,sp,8
 4000de8:	f800283a 	ret

04000dec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4000dec:	defff904 	addi	sp,sp,-28
 4000df0:	dfc00615 	stw	ra,24(sp)
 4000df4:	df000515 	stw	fp,20(sp)
 4000df8:	df000504 	addi	fp,sp,20
 4000dfc:	e13ffc15 	stw	r4,-16(fp)
 4000e00:	e17ffd15 	stw	r5,-12(fp)
 4000e04:	e1bffe15 	stw	r6,-8(fp)
 4000e08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4000e0c:	e0800217 	ldw	r2,8(fp)
 4000e10:	d8800015 	stw	r2,0(sp)
 4000e14:	e13ffc17 	ldw	r4,-16(fp)
 4000e18:	e17ffd17 	ldw	r5,-12(fp)
 4000e1c:	e1bffe17 	ldw	r6,-8(fp)
 4000e20:	e1ffff17 	ldw	r7,-4(fp)
 4000e24:	4000fc00 	call	4000fc0 <alt_iic_isr_register>
}  
 4000e28:	e037883a 	mov	sp,fp
 4000e2c:	dfc00117 	ldw	ra,4(sp)
 4000e30:	df000017 	ldw	fp,0(sp)
 4000e34:	dec00204 	addi	sp,sp,8
 4000e38:	f800283a 	ret

04000e3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4000e3c:	defff904 	addi	sp,sp,-28
 4000e40:	df000615 	stw	fp,24(sp)
 4000e44:	df000604 	addi	fp,sp,24
 4000e48:	e13ffe15 	stw	r4,-8(fp)
 4000e4c:	e17fff15 	stw	r5,-4(fp)
 4000e50:	e0bfff17 	ldw	r2,-4(fp)
 4000e54:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000e58:	0005303a 	rdctl	r2,status
 4000e5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000e60:	e0fffb17 	ldw	r3,-20(fp)
 4000e64:	00bfff84 	movi	r2,-2
 4000e68:	1884703a 	and	r2,r3,r2
 4000e6c:	1001703a 	wrctl	status,r2
  
  return context;
 4000e70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4000e74:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 4000e78:	e0fffc17 	ldw	r3,-16(fp)
 4000e7c:	00800044 	movi	r2,1
 4000e80:	10c4983a 	sll	r2,r2,r3
 4000e84:	1007883a 	mov	r3,r2
 4000e88:	00810034 	movhi	r2,1024
 4000e8c:	10889b04 	addi	r2,r2,8812
 4000e90:	10800017 	ldw	r2,0(r2)
 4000e94:	1886b03a 	or	r3,r3,r2
 4000e98:	00810034 	movhi	r2,1024
 4000e9c:	10889b04 	addi	r2,r2,8812
 4000ea0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4000ea4:	00810034 	movhi	r2,1024
 4000ea8:	10889b04 	addi	r2,r2,8812
 4000eac:	10800017 	ldw	r2,0(r2)
 4000eb0:	100170fa 	wrctl	ienable,r2
 4000eb4:	e0bffd17 	ldw	r2,-12(fp)
 4000eb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000ebc:	e0bffa17 	ldw	r2,-24(fp)
 4000ec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4000ec4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4000ec8:	e037883a 	mov	sp,fp
 4000ecc:	df000017 	ldw	fp,0(sp)
 4000ed0:	dec00104 	addi	sp,sp,4
 4000ed4:	f800283a 	ret

04000ed8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4000ed8:	defff904 	addi	sp,sp,-28
 4000edc:	df000615 	stw	fp,24(sp)
 4000ee0:	df000604 	addi	fp,sp,24
 4000ee4:	e13ffe15 	stw	r4,-8(fp)
 4000ee8:	e17fff15 	stw	r5,-4(fp)
 4000eec:	e0bfff17 	ldw	r2,-4(fp)
 4000ef0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000ef4:	0005303a 	rdctl	r2,status
 4000ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000efc:	e0fffb17 	ldw	r3,-20(fp)
 4000f00:	00bfff84 	movi	r2,-2
 4000f04:	1884703a 	and	r2,r3,r2
 4000f08:	1001703a 	wrctl	status,r2
  
  return context;
 4000f0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4000f10:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 4000f14:	e0fffc17 	ldw	r3,-16(fp)
 4000f18:	00800044 	movi	r2,1
 4000f1c:	10c4983a 	sll	r2,r2,r3
 4000f20:	0084303a 	nor	r2,zero,r2
 4000f24:	1007883a 	mov	r3,r2
 4000f28:	00810034 	movhi	r2,1024
 4000f2c:	10889b04 	addi	r2,r2,8812
 4000f30:	10800017 	ldw	r2,0(r2)
 4000f34:	1886703a 	and	r3,r3,r2
 4000f38:	00810034 	movhi	r2,1024
 4000f3c:	10889b04 	addi	r2,r2,8812
 4000f40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4000f44:	00810034 	movhi	r2,1024
 4000f48:	10889b04 	addi	r2,r2,8812
 4000f4c:	10800017 	ldw	r2,0(r2)
 4000f50:	100170fa 	wrctl	ienable,r2
 4000f54:	e0bffd17 	ldw	r2,-12(fp)
 4000f58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000f5c:	e0bffa17 	ldw	r2,-24(fp)
 4000f60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4000f64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4000f68:	e037883a 	mov	sp,fp
 4000f6c:	df000017 	ldw	fp,0(sp)
 4000f70:	dec00104 	addi	sp,sp,4
 4000f74:	f800283a 	ret

04000f78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4000f78:	defffc04 	addi	sp,sp,-16
 4000f7c:	df000315 	stw	fp,12(sp)
 4000f80:	df000304 	addi	fp,sp,12
 4000f84:	e13ffe15 	stw	r4,-8(fp)
 4000f88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4000f8c:	000530fa 	rdctl	r2,ienable
 4000f90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4000f94:	e0ffff17 	ldw	r3,-4(fp)
 4000f98:	00800044 	movi	r2,1
 4000f9c:	10c4983a 	sll	r2,r2,r3
 4000fa0:	1007883a 	mov	r3,r2
 4000fa4:	e0bffd17 	ldw	r2,-12(fp)
 4000fa8:	1884703a 	and	r2,r3,r2
 4000fac:	1004c03a 	cmpne	r2,r2,zero
}
 4000fb0:	e037883a 	mov	sp,fp
 4000fb4:	df000017 	ldw	fp,0(sp)
 4000fb8:	dec00104 	addi	sp,sp,4
 4000fbc:	f800283a 	ret

04000fc0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4000fc0:	defff404 	addi	sp,sp,-48
 4000fc4:	dfc00b15 	stw	ra,44(sp)
 4000fc8:	df000a15 	stw	fp,40(sp)
 4000fcc:	df000a04 	addi	fp,sp,40
 4000fd0:	e13ffb15 	stw	r4,-20(fp)
 4000fd4:	e17ffc15 	stw	r5,-16(fp)
 4000fd8:	e1bffd15 	stw	r6,-12(fp)
 4000fdc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 4000fe0:	00bffa84 	movi	r2,-22
 4000fe4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4000fe8:	e0bffc17 	ldw	r2,-16(fp)
 4000fec:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4000ff0:	e0bff917 	ldw	r2,-28(fp)
 4000ff4:	10800808 	cmpgei	r2,r2,32
 4000ff8:	1000291e 	bne	r2,zero,40010a0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000ffc:	0005303a 	rdctl	r2,status
 4001000:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001004:	e0fff717 	ldw	r3,-36(fp)
 4001008:	00bfff84 	movi	r2,-2
 400100c:	1884703a 	and	r2,r3,r2
 4001010:	1001703a 	wrctl	status,r2
  
  return context;
 4001014:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4001018:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 400101c:	e0bff917 	ldw	r2,-28(fp)
 4001020:	00c10034 	movhi	r3,1024
 4001024:	18c89e04 	addi	r3,r3,8824
 4001028:	100490fa 	slli	r2,r2,3
 400102c:	10c7883a 	add	r3,r2,r3
 4001030:	e0bffd17 	ldw	r2,-12(fp)
 4001034:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 4001038:	e0bff917 	ldw	r2,-28(fp)
 400103c:	00c10034 	movhi	r3,1024
 4001040:	18c89e04 	addi	r3,r3,8824
 4001044:	100490fa 	slli	r2,r2,3
 4001048:	10c5883a 	add	r2,r2,r3
 400104c:	10c00104 	addi	r3,r2,4
 4001050:	e0bffe17 	ldw	r2,-8(fp)
 4001054:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4001058:	e0bffd17 	ldw	r2,-12(fp)
 400105c:	1005003a 	cmpeq	r2,r2,zero
 4001060:	1000051e 	bne	r2,zero,4001078 <alt_iic_isr_register+0xb8>
 4001064:	e17ff917 	ldw	r5,-28(fp)
 4001068:	e13ffb17 	ldw	r4,-20(fp)
 400106c:	4000e3c0 	call	4000e3c <alt_ic_irq_enable>
 4001070:	e0bfff15 	stw	r2,-4(fp)
 4001074:	00000406 	br	4001088 <alt_iic_isr_register+0xc8>
 4001078:	e17ff917 	ldw	r5,-28(fp)
 400107c:	e13ffb17 	ldw	r4,-20(fp)
 4001080:	4000ed80 	call	4000ed8 <alt_ic_irq_disable>
 4001084:	e0bfff15 	stw	r2,-4(fp)
 4001088:	e0bfff17 	ldw	r2,-4(fp)
 400108c:	e0bffa15 	stw	r2,-24(fp)
 4001090:	e0bff817 	ldw	r2,-32(fp)
 4001094:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001098:	e0bff617 	ldw	r2,-40(fp)
 400109c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40010a0:	e0bffa17 	ldw	r2,-24(fp)
}
 40010a4:	e037883a 	mov	sp,fp
 40010a8:	dfc00117 	ldw	ra,4(sp)
 40010ac:	df000017 	ldw	fp,0(sp)
 40010b0:	dec00204 	addi	sp,sp,8
 40010b4:	f800283a 	ret

040010b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40010b8:	defff904 	addi	sp,sp,-28
 40010bc:	dfc00615 	stw	ra,24(sp)
 40010c0:	df000515 	stw	fp,20(sp)
 40010c4:	df000504 	addi	fp,sp,20
 40010c8:	e13ffc15 	stw	r4,-16(fp)
 40010cc:	e17ffd15 	stw	r5,-12(fp)
 40010d0:	e1bffe15 	stw	r6,-8(fp)
 40010d4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40010d8:	e13ffd17 	ldw	r4,-12(fp)
 40010dc:	e17ffe17 	ldw	r5,-8(fp)
 40010e0:	e1bfff17 	ldw	r6,-4(fp)
 40010e4:	40012d00 	call	40012d0 <open>
 40010e8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40010ec:	e0bffb17 	ldw	r2,-20(fp)
 40010f0:	1004803a 	cmplt	r2,r2,zero
 40010f4:	10001c1e 	bne	r2,zero,4001168 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 40010f8:	e0bffb17 	ldw	r2,-20(fp)
 40010fc:	00c10034 	movhi	r3,1024
 4001100:	18c77404 	addi	r3,r3,7632
 4001104:	10800324 	muli	r2,r2,12
 4001108:	10c5883a 	add	r2,r2,r3
 400110c:	10c00017 	ldw	r3,0(r2)
 4001110:	e0bffc17 	ldw	r2,-16(fp)
 4001114:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4001118:	e0bffb17 	ldw	r2,-20(fp)
 400111c:	00c10034 	movhi	r3,1024
 4001120:	18c77404 	addi	r3,r3,7632
 4001124:	10800324 	muli	r2,r2,12
 4001128:	10c5883a 	add	r2,r2,r3
 400112c:	10800104 	addi	r2,r2,4
 4001130:	10c00017 	ldw	r3,0(r2)
 4001134:	e0bffc17 	ldw	r2,-16(fp)
 4001138:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400113c:	e0bffb17 	ldw	r2,-20(fp)
 4001140:	00c10034 	movhi	r3,1024
 4001144:	18c77404 	addi	r3,r3,7632
 4001148:	10800324 	muli	r2,r2,12
 400114c:	10c5883a 	add	r2,r2,r3
 4001150:	10800204 	addi	r2,r2,8
 4001154:	10c00017 	ldw	r3,0(r2)
 4001158:	e0bffc17 	ldw	r2,-16(fp)
 400115c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4001160:	e13ffb17 	ldw	r4,-20(fp)
 4001164:	40014b80 	call	40014b8 <alt_release_fd>
  }
} 
 4001168:	e037883a 	mov	sp,fp
 400116c:	dfc00117 	ldw	ra,4(sp)
 4001170:	df000017 	ldw	fp,0(sp)
 4001174:	dec00204 	addi	sp,sp,8
 4001178:	f800283a 	ret

0400117c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400117c:	defffb04 	addi	sp,sp,-20
 4001180:	dfc00415 	stw	ra,16(sp)
 4001184:	df000315 	stw	fp,12(sp)
 4001188:	df000304 	addi	fp,sp,12
 400118c:	e13ffd15 	stw	r4,-12(fp)
 4001190:	e17ffe15 	stw	r5,-8(fp)
 4001194:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4001198:	01010034 	movhi	r4,1024
 400119c:	21077704 	addi	r4,r4,7644
 40011a0:	e17ffd17 	ldw	r5,-12(fp)
 40011a4:	01800044 	movi	r6,1
 40011a8:	01c07fc4 	movi	r7,511
 40011ac:	40010b80 	call	40010b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40011b0:	01010034 	movhi	r4,1024
 40011b4:	21077404 	addi	r4,r4,7632
 40011b8:	e17ffe17 	ldw	r5,-8(fp)
 40011bc:	000d883a 	mov	r6,zero
 40011c0:	01c07fc4 	movi	r7,511
 40011c4:	40010b80 	call	40010b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40011c8:	01010034 	movhi	r4,1024
 40011cc:	21077a04 	addi	r4,r4,7656
 40011d0:	e17fff17 	ldw	r5,-4(fp)
 40011d4:	01800044 	movi	r6,1
 40011d8:	01c07fc4 	movi	r7,511
 40011dc:	40010b80 	call	40010b8 <alt_open_fd>
}  
 40011e0:	e037883a 	mov	sp,fp
 40011e4:	dfc00117 	ldw	ra,4(sp)
 40011e8:	df000017 	ldw	fp,0(sp)
 40011ec:	dec00204 	addi	sp,sp,8
 40011f0:	f800283a 	ret

040011f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40011f4:	defffc04 	addi	sp,sp,-16
 40011f8:	df000315 	stw	fp,12(sp)
 40011fc:	df000304 	addi	fp,sp,12
 4001200:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4001204:	e0bffe17 	ldw	r2,-8(fp)
 4001208:	10800217 	ldw	r2,8(r2)
 400120c:	10d00034 	orhi	r3,r2,16384
 4001210:	e0bffe17 	ldw	r2,-8(fp)
 4001214:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4001218:	e03ffd15 	stw	zero,-12(fp)
 400121c:	00002006 	br	40012a0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4001220:	e0bffd17 	ldw	r2,-12(fp)
 4001224:	00c10034 	movhi	r3,1024
 4001228:	18c77404 	addi	r3,r3,7632
 400122c:	10800324 	muli	r2,r2,12
 4001230:	10c5883a 	add	r2,r2,r3
 4001234:	10c00017 	ldw	r3,0(r2)
 4001238:	e0bffe17 	ldw	r2,-8(fp)
 400123c:	10800017 	ldw	r2,0(r2)
 4001240:	1880141e 	bne	r3,r2,4001294 <alt_file_locked+0xa0>
 4001244:	e0bffd17 	ldw	r2,-12(fp)
 4001248:	00c10034 	movhi	r3,1024
 400124c:	18c77404 	addi	r3,r3,7632
 4001250:	10800324 	muli	r2,r2,12
 4001254:	10c5883a 	add	r2,r2,r3
 4001258:	10800204 	addi	r2,r2,8
 400125c:	10800017 	ldw	r2,0(r2)
 4001260:	1004403a 	cmpge	r2,r2,zero
 4001264:	10000b1e 	bne	r2,zero,4001294 <alt_file_locked+0xa0>
 4001268:	e0bffd17 	ldw	r2,-12(fp)
 400126c:	10800324 	muli	r2,r2,12
 4001270:	1007883a 	mov	r3,r2
 4001274:	00810034 	movhi	r2,1024
 4001278:	10877404 	addi	r2,r2,7632
 400127c:	1887883a 	add	r3,r3,r2
 4001280:	e0bffe17 	ldw	r2,-8(fp)
 4001284:	18800326 	beq	r3,r2,4001294 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4001288:	00bffcc4 	movi	r2,-13
 400128c:	e0bfff15 	stw	r2,-4(fp)
 4001290:	00000a06 	br	40012bc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4001294:	e0bffd17 	ldw	r2,-12(fp)
 4001298:	10800044 	addi	r2,r2,1
 400129c:	e0bffd15 	stw	r2,-12(fp)
 40012a0:	00810034 	movhi	r2,1024
 40012a4:	1087da04 	addi	r2,r2,8040
 40012a8:	10800017 	ldw	r2,0(r2)
 40012ac:	1007883a 	mov	r3,r2
 40012b0:	e0bffd17 	ldw	r2,-12(fp)
 40012b4:	18bfda2e 	bgeu	r3,r2,4001220 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40012b8:	e03fff15 	stw	zero,-4(fp)
 40012bc:	e0bfff17 	ldw	r2,-4(fp)
}
 40012c0:	e037883a 	mov	sp,fp
 40012c4:	df000017 	ldw	fp,0(sp)
 40012c8:	dec00104 	addi	sp,sp,4
 40012cc:	f800283a 	ret

040012d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40012d0:	defff404 	addi	sp,sp,-48
 40012d4:	dfc00b15 	stw	ra,44(sp)
 40012d8:	df000a15 	stw	fp,40(sp)
 40012dc:	df000a04 	addi	fp,sp,40
 40012e0:	e13ffb15 	stw	r4,-20(fp)
 40012e4:	e17ffc15 	stw	r5,-16(fp)
 40012e8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40012ec:	00bfffc4 	movi	r2,-1
 40012f0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 40012f4:	00bffb44 	movi	r2,-19
 40012f8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 40012fc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4001300:	e13ffb17 	ldw	r4,-20(fp)
 4001304:	01410034 	movhi	r5,1024
 4001308:	2947d804 	addi	r5,r5,8032
 400130c:	40016dc0 	call	40016dc <alt_find_dev>
 4001310:	e0bffa15 	stw	r2,-24(fp)
 4001314:	e0bffa17 	ldw	r2,-24(fp)
 4001318:	1004c03a 	cmpne	r2,r2,zero
 400131c:	1000051e 	bne	r2,zero,4001334 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4001320:	e13ffb17 	ldw	r4,-20(fp)
 4001324:	40017700 	call	4001770 <alt_find_file>
 4001328:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 400132c:	00800044 	movi	r2,1
 4001330:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4001334:	e0bffa17 	ldw	r2,-24(fp)
 4001338:	1005003a 	cmpeq	r2,r2,zero
 400133c:	1000301e 	bne	r2,zero,4001400 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4001340:	e13ffa17 	ldw	r4,-24(fp)
 4001344:	40018900 	call	4001890 <alt_get_fd>
 4001348:	e0bff815 	stw	r2,-32(fp)
 400134c:	e0bff817 	ldw	r2,-32(fp)
 4001350:	1004403a 	cmpge	r2,r2,zero
 4001354:	1000031e 	bne	r2,zero,4001364 <open+0x94>
    {
      status = index;
 4001358:	e0bff817 	ldw	r2,-32(fp)
 400135c:	e0bff715 	stw	r2,-36(fp)
 4001360:	00002906 	br	4001408 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 4001364:	e0bff817 	ldw	r2,-32(fp)
 4001368:	10800324 	muli	r2,r2,12
 400136c:	1007883a 	mov	r3,r2
 4001370:	00810034 	movhi	r2,1024
 4001374:	10877404 	addi	r2,r2,7632
 4001378:	1885883a 	add	r2,r3,r2
 400137c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4001380:	e0fffc17 	ldw	r3,-16(fp)
 4001384:	00900034 	movhi	r2,16384
 4001388:	10bfffc4 	addi	r2,r2,-1
 400138c:	1886703a 	and	r3,r3,r2
 4001390:	e0bff917 	ldw	r2,-28(fp)
 4001394:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4001398:	e0bff617 	ldw	r2,-40(fp)
 400139c:	1004c03a 	cmpne	r2,r2,zero
 40013a0:	1000061e 	bne	r2,zero,40013bc <open+0xec>
 40013a4:	e13ff917 	ldw	r4,-28(fp)
 40013a8:	40011f40 	call	40011f4 <alt_file_locked>
 40013ac:	e0bff715 	stw	r2,-36(fp)
 40013b0:	e0bff717 	ldw	r2,-36(fp)
 40013b4:	1004803a 	cmplt	r2,r2,zero
 40013b8:	1000131e 	bne	r2,zero,4001408 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40013bc:	e0bffa17 	ldw	r2,-24(fp)
 40013c0:	10800317 	ldw	r2,12(r2)
 40013c4:	1005003a 	cmpeq	r2,r2,zero
 40013c8:	1000091e 	bne	r2,zero,40013f0 <open+0x120>
 40013cc:	e0bffa17 	ldw	r2,-24(fp)
 40013d0:	10800317 	ldw	r2,12(r2)
 40013d4:	e13ff917 	ldw	r4,-28(fp)
 40013d8:	e17ffb17 	ldw	r5,-20(fp)
 40013dc:	e1bffc17 	ldw	r6,-16(fp)
 40013e0:	e1fffd17 	ldw	r7,-12(fp)
 40013e4:	103ee83a 	callr	r2
 40013e8:	e0bfff15 	stw	r2,-4(fp)
 40013ec:	00000106 	br	40013f4 <open+0x124>
 40013f0:	e03fff15 	stw	zero,-4(fp)
 40013f4:	e0bfff17 	ldw	r2,-4(fp)
 40013f8:	e0bff715 	stw	r2,-36(fp)
 40013fc:	00000206 	br	4001408 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4001400:	00bffb44 	movi	r2,-19
 4001404:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4001408:	e0bff717 	ldw	r2,-36(fp)
 400140c:	1004403a 	cmpge	r2,r2,zero
 4001410:	1000091e 	bne	r2,zero,4001438 <open+0x168>
  {
    alt_release_fd (index);  
 4001414:	e13ff817 	ldw	r4,-32(fp)
 4001418:	40014b80 	call	40014b8 <alt_release_fd>
    ALT_ERRNO = -status;
 400141c:	40014580 	call	4001458 <alt_get_errno>
 4001420:	e0fff717 	ldw	r3,-36(fp)
 4001424:	00c7c83a 	sub	r3,zero,r3
 4001428:	10c00015 	stw	r3,0(r2)
    return -1;
 400142c:	00bfffc4 	movi	r2,-1
 4001430:	e0bffe15 	stw	r2,-8(fp)
 4001434:	00000206 	br	4001440 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 4001438:	e0bff817 	ldw	r2,-32(fp)
 400143c:	e0bffe15 	stw	r2,-8(fp)
 4001440:	e0bffe17 	ldw	r2,-8(fp)
}
 4001444:	e037883a 	mov	sp,fp
 4001448:	dfc00117 	ldw	ra,4(sp)
 400144c:	df000017 	ldw	fp,0(sp)
 4001450:	dec00204 	addi	sp,sp,8
 4001454:	f800283a 	ret

04001458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001458:	defffd04 	addi	sp,sp,-12
 400145c:	dfc00215 	stw	ra,8(sp)
 4001460:	df000115 	stw	fp,4(sp)
 4001464:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4001468:	00810034 	movhi	r2,1024
 400146c:	1087db04 	addi	r2,r2,8044
 4001470:	10800017 	ldw	r2,0(r2)
 4001474:	1005003a 	cmpeq	r2,r2,zero
 4001478:	1000061e 	bne	r2,zero,4001494 <alt_get_errno+0x3c>
 400147c:	00810034 	movhi	r2,1024
 4001480:	1087db04 	addi	r2,r2,8044
 4001484:	10800017 	ldw	r2,0(r2)
 4001488:	103ee83a 	callr	r2
 400148c:	e0bfff15 	stw	r2,-4(fp)
 4001490:	00000306 	br	40014a0 <alt_get_errno+0x48>
 4001494:	00810034 	movhi	r2,1024
 4001498:	10889704 	addi	r2,r2,8796
 400149c:	e0bfff15 	stw	r2,-4(fp)
 40014a0:	e0bfff17 	ldw	r2,-4(fp)
}
 40014a4:	e037883a 	mov	sp,fp
 40014a8:	dfc00117 	ldw	ra,4(sp)
 40014ac:	df000017 	ldw	fp,0(sp)
 40014b0:	dec00204 	addi	sp,sp,8
 40014b4:	f800283a 	ret

040014b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40014b8:	defffe04 	addi	sp,sp,-8
 40014bc:	df000115 	stw	fp,4(sp)
 40014c0:	df000104 	addi	fp,sp,4
 40014c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40014c8:	e0bfff17 	ldw	r2,-4(fp)
 40014cc:	108000d0 	cmplti	r2,r2,3
 40014d0:	10000d1e 	bne	r2,zero,4001508 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40014d4:	e0bfff17 	ldw	r2,-4(fp)
 40014d8:	00c10034 	movhi	r3,1024
 40014dc:	18c77404 	addi	r3,r3,7632
 40014e0:	10800324 	muli	r2,r2,12
 40014e4:	10c5883a 	add	r2,r2,r3
 40014e8:	10800204 	addi	r2,r2,8
 40014ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40014f0:	e0bfff17 	ldw	r2,-4(fp)
 40014f4:	00c10034 	movhi	r3,1024
 40014f8:	18c77404 	addi	r3,r3,7632
 40014fc:	10800324 	muli	r2,r2,12
 4001500:	10c5883a 	add	r2,r2,r3
 4001504:	10000015 	stw	zero,0(r2)
  }
}
 4001508:	e037883a 	mov	sp,fp
 400150c:	df000017 	ldw	fp,0(sp)
 4001510:	dec00104 	addi	sp,sp,4
 4001514:	f800283a 	ret

04001518 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4001518:	defffa04 	addi	sp,sp,-24
 400151c:	df000515 	stw	fp,20(sp)
 4001520:	df000504 	addi	fp,sp,20
 4001524:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001528:	0005303a 	rdctl	r2,status
 400152c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001530:	e0fffd17 	ldw	r3,-12(fp)
 4001534:	00bfff84 	movi	r2,-2
 4001538:	1884703a 	and	r2,r3,r2
 400153c:	1001703a 	wrctl	status,r2
  
  return context;
 4001540:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4001544:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 4001548:	e0bfff17 	ldw	r2,-4(fp)
 400154c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4001550:	e0bffc17 	ldw	r2,-16(fp)
 4001554:	10c00017 	ldw	r3,0(r2)
 4001558:	e0bffc17 	ldw	r2,-16(fp)
 400155c:	10800117 	ldw	r2,4(r2)
 4001560:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4001564:	e0bffc17 	ldw	r2,-16(fp)
 4001568:	10c00117 	ldw	r3,4(r2)
 400156c:	e0bffc17 	ldw	r2,-16(fp)
 4001570:	10800017 	ldw	r2,0(r2)
 4001574:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4001578:	e0fffc17 	ldw	r3,-16(fp)
 400157c:	e0bffc17 	ldw	r2,-16(fp)
 4001580:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4001584:	e0fffc17 	ldw	r3,-16(fp)
 4001588:	e0bffc17 	ldw	r2,-16(fp)
 400158c:	18800015 	stw	r2,0(r3)
 4001590:	e0bffe17 	ldw	r2,-8(fp)
 4001594:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001598:	e0bffb17 	ldw	r2,-20(fp)
 400159c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40015a0:	e037883a 	mov	sp,fp
 40015a4:	df000017 	ldw	fp,0(sp)
 40015a8:	dec00104 	addi	sp,sp,4
 40015ac:	f800283a 	ret

040015b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40015b0:	defffb04 	addi	sp,sp,-20
 40015b4:	dfc00415 	stw	ra,16(sp)
 40015b8:	df000315 	stw	fp,12(sp)
 40015bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40015c0:	d0a00917 	ldw	r2,-32732(gp)
 40015c4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40015c8:	d0a0c917 	ldw	r2,-31964(gp)
 40015cc:	10800044 	addi	r2,r2,1
 40015d0:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40015d4:	00003106 	br	400169c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 40015d8:	e0bffe17 	ldw	r2,-8(fp)
 40015dc:	10800017 	ldw	r2,0(r2)
 40015e0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40015e4:	e0bffe17 	ldw	r2,-8(fp)
 40015e8:	10800403 	ldbu	r2,16(r2)
 40015ec:	10803fcc 	andi	r2,r2,255
 40015f0:	1005003a 	cmpeq	r2,r2,zero
 40015f4:	1000051e 	bne	r2,zero,400160c <alt_tick+0x5c>
 40015f8:	d0a0c917 	ldw	r2,-31964(gp)
 40015fc:	1004c03a 	cmpne	r2,r2,zero
 4001600:	1000021e 	bne	r2,zero,400160c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4001604:	e0bffe17 	ldw	r2,-8(fp)
 4001608:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400160c:	e0bffe17 	ldw	r2,-8(fp)
 4001610:	10c00217 	ldw	r3,8(r2)
 4001614:	d0a0c917 	ldw	r2,-31964(gp)
 4001618:	10c01e36 	bltu	r2,r3,4001694 <alt_tick+0xe4>
 400161c:	e0bffe17 	ldw	r2,-8(fp)
 4001620:	10800403 	ldbu	r2,16(r2)
 4001624:	10803fcc 	andi	r2,r2,255
 4001628:	1004c03a 	cmpne	r2,r2,zero
 400162c:	1000191e 	bne	r2,zero,4001694 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4001630:	e0bffe17 	ldw	r2,-8(fp)
 4001634:	10c00317 	ldw	r3,12(r2)
 4001638:	e0bffe17 	ldw	r2,-8(fp)
 400163c:	11000517 	ldw	r4,20(r2)
 4001640:	183ee83a 	callr	r3
 4001644:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4001648:	e0bffd17 	ldw	r2,-12(fp)
 400164c:	1004c03a 	cmpne	r2,r2,zero
 4001650:	1000031e 	bne	r2,zero,4001660 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4001654:	e13ffe17 	ldw	r4,-8(fp)
 4001658:	40015180 	call	4001518 <alt_alarm_stop>
 400165c:	00000d06 	br	4001694 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4001660:	e0bffe17 	ldw	r2,-8(fp)
 4001664:	10c00217 	ldw	r3,8(r2)
 4001668:	e0bffd17 	ldw	r2,-12(fp)
 400166c:	1887883a 	add	r3,r3,r2
 4001670:	e0bffe17 	ldw	r2,-8(fp)
 4001674:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4001678:	e0bffe17 	ldw	r2,-8(fp)
 400167c:	10c00217 	ldw	r3,8(r2)
 4001680:	d0a0c917 	ldw	r2,-31964(gp)
 4001684:	1880032e 	bgeu	r3,r2,4001694 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4001688:	e0fffe17 	ldw	r3,-8(fp)
 400168c:	00800044 	movi	r2,1
 4001690:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4001694:	e0bfff17 	ldw	r2,-4(fp)
 4001698:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400169c:	d0e00904 	addi	r3,gp,-32732
 40016a0:	e0bffe17 	ldw	r2,-8(fp)
 40016a4:	10ffcc1e 	bne	r2,r3,40015d8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 40016a8:	e037883a 	mov	sp,fp
 40016ac:	dfc00117 	ldw	ra,4(sp)
 40016b0:	df000017 	ldw	fp,0(sp)
 40016b4:	dec00204 	addi	sp,sp,8
 40016b8:	f800283a 	ret

040016bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 40016bc:	deffff04 	addi	sp,sp,-4
 40016c0:	df000015 	stw	fp,0(sp)
 40016c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40016c8:	000170fa 	wrctl	ienable,zero
}
 40016cc:	e037883a 	mov	sp,fp
 40016d0:	df000017 	ldw	fp,0(sp)
 40016d4:	dec00104 	addi	sp,sp,4
 40016d8:	f800283a 	ret

040016dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40016dc:	defff904 	addi	sp,sp,-28
 40016e0:	dfc00615 	stw	ra,24(sp)
 40016e4:	df000515 	stw	fp,20(sp)
 40016e8:	df000504 	addi	fp,sp,20
 40016ec:	e13ffd15 	stw	r4,-12(fp)
 40016f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40016f4:	e0bffe17 	ldw	r2,-8(fp)
 40016f8:	10800017 	ldw	r2,0(r2)
 40016fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4001700:	e13ffd17 	ldw	r4,-12(fp)
 4001704:	40002b40 	call	40002b4 <strlen>
 4001708:	10800044 	addi	r2,r2,1
 400170c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001710:	00000d06 	br	4001748 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4001714:	e0bffc17 	ldw	r2,-16(fp)
 4001718:	11000217 	ldw	r4,8(r2)
 400171c:	e1bffb17 	ldw	r6,-20(fp)
 4001720:	e17ffd17 	ldw	r5,-12(fp)
 4001724:	40019f80 	call	40019f8 <memcmp>
 4001728:	1004c03a 	cmpne	r2,r2,zero
 400172c:	1000031e 	bne	r2,zero,400173c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4001730:	e0bffc17 	ldw	r2,-16(fp)
 4001734:	e0bfff15 	stw	r2,-4(fp)
 4001738:	00000706 	br	4001758 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400173c:	e0bffc17 	ldw	r2,-16(fp)
 4001740:	10800017 	ldw	r2,0(r2)
 4001744:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001748:	e0fffe17 	ldw	r3,-8(fp)
 400174c:	e0bffc17 	ldw	r2,-16(fp)
 4001750:	10fff01e 	bne	r2,r3,4001714 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4001754:	e03fff15 	stw	zero,-4(fp)
 4001758:	e0bfff17 	ldw	r2,-4(fp)
}
 400175c:	e037883a 	mov	sp,fp
 4001760:	dfc00117 	ldw	ra,4(sp)
 4001764:	df000017 	ldw	fp,0(sp)
 4001768:	dec00204 	addi	sp,sp,8
 400176c:	f800283a 	ret

04001770 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4001770:	defffa04 	addi	sp,sp,-24
 4001774:	dfc00515 	stw	ra,20(sp)
 4001778:	df000415 	stw	fp,16(sp)
 400177c:	df000404 	addi	fp,sp,16
 4001780:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4001784:	00810034 	movhi	r2,1024
 4001788:	1087d604 	addi	r2,r2,8024
 400178c:	10800017 	ldw	r2,0(r2)
 4001790:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4001794:	00003306 	br	4001864 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4001798:	e0bffd17 	ldw	r2,-12(fp)
 400179c:	11000217 	ldw	r4,8(r2)
 40017a0:	40002b40 	call	40002b4 <strlen>
 40017a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 40017a8:	e0bffd17 	ldw	r2,-12(fp)
 40017ac:	10c00217 	ldw	r3,8(r2)
 40017b0:	e0bffc17 	ldw	r2,-16(fp)
 40017b4:	1885883a 	add	r2,r3,r2
 40017b8:	10bfffc4 	addi	r2,r2,-1
 40017bc:	10800003 	ldbu	r2,0(r2)
 40017c0:	10803fcc 	andi	r2,r2,255
 40017c4:	1080201c 	xori	r2,r2,128
 40017c8:	10bfe004 	addi	r2,r2,-128
 40017cc:	10800bd8 	cmpnei	r2,r2,47
 40017d0:	1000031e 	bne	r2,zero,40017e0 <alt_find_file+0x70>
    {
      len -= 1;
 40017d4:	e0bffc17 	ldw	r2,-16(fp)
 40017d8:	10bfffc4 	addi	r2,r2,-1
 40017dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40017e0:	e0bffc17 	ldw	r2,-16(fp)
 40017e4:	1007883a 	mov	r3,r2
 40017e8:	e0bffe17 	ldw	r2,-8(fp)
 40017ec:	1885883a 	add	r2,r3,r2
 40017f0:	10800003 	ldbu	r2,0(r2)
 40017f4:	10803fcc 	andi	r2,r2,255
 40017f8:	1080201c 	xori	r2,r2,128
 40017fc:	10bfe004 	addi	r2,r2,-128
 4001800:	10800be0 	cmpeqi	r2,r2,47
 4001804:	10000a1e 	bne	r2,zero,4001830 <alt_find_file+0xc0>
 4001808:	e0bffc17 	ldw	r2,-16(fp)
 400180c:	1007883a 	mov	r3,r2
 4001810:	e0bffe17 	ldw	r2,-8(fp)
 4001814:	1885883a 	add	r2,r3,r2
 4001818:	10800003 	ldbu	r2,0(r2)
 400181c:	10803fcc 	andi	r2,r2,255
 4001820:	1080201c 	xori	r2,r2,128
 4001824:	10bfe004 	addi	r2,r2,-128
 4001828:	1004c03a 	cmpne	r2,r2,zero
 400182c:	10000a1e 	bne	r2,zero,4001858 <alt_find_file+0xe8>
 4001830:	e0bffd17 	ldw	r2,-12(fp)
 4001834:	11000217 	ldw	r4,8(r2)
 4001838:	e1bffc17 	ldw	r6,-16(fp)
 400183c:	e17ffe17 	ldw	r5,-8(fp)
 4001840:	40019f80 	call	40019f8 <memcmp>
 4001844:	1004c03a 	cmpne	r2,r2,zero
 4001848:	1000031e 	bne	r2,zero,4001858 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400184c:	e0bffd17 	ldw	r2,-12(fp)
 4001850:	e0bfff15 	stw	r2,-4(fp)
 4001854:	00000806 	br	4001878 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4001858:	e0bffd17 	ldw	r2,-12(fp)
 400185c:	10800017 	ldw	r2,0(r2)
 4001860:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4001864:	00c10034 	movhi	r3,1024
 4001868:	18c7d604 	addi	r3,r3,8024
 400186c:	e0bffd17 	ldw	r2,-12(fp)
 4001870:	10ffc91e 	bne	r2,r3,4001798 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4001874:	e03fff15 	stw	zero,-4(fp)
 4001878:	e0bfff17 	ldw	r2,-4(fp)
}
 400187c:	e037883a 	mov	sp,fp
 4001880:	dfc00117 	ldw	ra,4(sp)
 4001884:	df000017 	ldw	fp,0(sp)
 4001888:	dec00204 	addi	sp,sp,8
 400188c:	f800283a 	ret

04001890 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4001890:	defffc04 	addi	sp,sp,-16
 4001894:	df000315 	stw	fp,12(sp)
 4001898:	df000304 	addi	fp,sp,12
 400189c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40018a0:	00bffa04 	movi	r2,-24
 40018a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40018a8:	e03ffe15 	stw	zero,-8(fp)
 40018ac:	00001e06 	br	4001928 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 40018b0:	e0bffe17 	ldw	r2,-8(fp)
 40018b4:	00c10034 	movhi	r3,1024
 40018b8:	18c77404 	addi	r3,r3,7632
 40018bc:	10800324 	muli	r2,r2,12
 40018c0:	10c5883a 	add	r2,r2,r3
 40018c4:	10800017 	ldw	r2,0(r2)
 40018c8:	1004c03a 	cmpne	r2,r2,zero
 40018cc:	1000131e 	bne	r2,zero,400191c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 40018d0:	e0bffe17 	ldw	r2,-8(fp)
 40018d4:	00c10034 	movhi	r3,1024
 40018d8:	18c77404 	addi	r3,r3,7632
 40018dc:	10800324 	muli	r2,r2,12
 40018e0:	10c7883a 	add	r3,r2,r3
 40018e4:	e0bfff17 	ldw	r2,-4(fp)
 40018e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 40018ec:	00810034 	movhi	r2,1024
 40018f0:	1087da04 	addi	r2,r2,8040
 40018f4:	10c00017 	ldw	r3,0(r2)
 40018f8:	e0bffe17 	ldw	r2,-8(fp)
 40018fc:	1880040e 	bge	r3,r2,4001910 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 4001900:	00c10034 	movhi	r3,1024
 4001904:	18c7da04 	addi	r3,r3,8040
 4001908:	e0bffe17 	ldw	r2,-8(fp)
 400190c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4001910:	e0bffe17 	ldw	r2,-8(fp)
 4001914:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4001918:	00000606 	br	4001934 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400191c:	e0bffe17 	ldw	r2,-8(fp)
 4001920:	10800044 	addi	r2,r2,1
 4001924:	e0bffe15 	stw	r2,-8(fp)
 4001928:	e0bffe17 	ldw	r2,-8(fp)
 400192c:	10800810 	cmplti	r2,r2,32
 4001930:	103fdf1e 	bne	r2,zero,40018b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4001934:	e0bffd17 	ldw	r2,-12(fp)
}
 4001938:	e037883a 	mov	sp,fp
 400193c:	df000017 	ldw	fp,0(sp)
 4001940:	dec00104 	addi	sp,sp,4
 4001944:	f800283a 	ret

04001948 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4001948:	defffb04 	addi	sp,sp,-20
 400194c:	df000415 	stw	fp,16(sp)
 4001950:	df000404 	addi	fp,sp,16
 4001954:	e13ffe15 	stw	r4,-8(fp)
 4001958:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400195c:	e0bfff17 	ldw	r2,-4(fp)
 4001960:	10820070 	cmpltui	r2,r2,2049
 4001964:	1000021e 	bne	r2,zero,4001970 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4001968:	00820004 	movi	r2,2048
 400196c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4001970:	e0fffe17 	ldw	r3,-8(fp)
 4001974:	e0bfff17 	ldw	r2,-4(fp)
 4001978:	1885883a 	add	r2,r3,r2
 400197c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4001980:	e0bffe17 	ldw	r2,-8(fp)
 4001984:	e0bffd15 	stw	r2,-12(fp)
 4001988:	00000506 	br	40019a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400198c:	e0bffd17 	ldw	r2,-12(fp)
 4001990:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4001994:	e0bffd17 	ldw	r2,-12(fp)
 4001998:	10800804 	addi	r2,r2,32
 400199c:	e0bffd15 	stw	r2,-12(fp)
 40019a0:	e0fffd17 	ldw	r3,-12(fp)
 40019a4:	e0bffc17 	ldw	r2,-16(fp)
 40019a8:	18bff836 	bltu	r3,r2,400198c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40019ac:	e0bffe17 	ldw	r2,-8(fp)
 40019b0:	108007cc 	andi	r2,r2,31
 40019b4:	1005003a 	cmpeq	r2,r2,zero
 40019b8:	1000021e 	bne	r2,zero,40019c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40019bc:	e0bffd17 	ldw	r2,-12(fp)
 40019c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40019c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40019c8:	e037883a 	mov	sp,fp
 40019cc:	df000017 	ldw	fp,0(sp)
 40019d0:	dec00104 	addi	sp,sp,4
 40019d4:	f800283a 	ret

040019d8 <exit>:
 40019d8:	defffe04 	addi	sp,sp,-8
 40019dc:	dc400015 	stw	r17,0(sp)
 40019e0:	000b883a 	mov	r5,zero
 40019e4:	2023883a 	mov	r17,r4
 40019e8:	dfc00115 	stw	ra,4(sp)
 40019ec:	4001a380 	call	4001a38 <__call_exitprocs>
 40019f0:	8809883a 	mov	r4,r17
 40019f4:	4001c340 	call	4001c34 <_exit>

040019f8 <memcmp>:
 40019f8:	31ffffc4 	addi	r7,r6,-1
 40019fc:	3000061e 	bne	r6,zero,4001a18 <memcmp+0x20>
 4001a00:	00000a06 	br	4001a2c <memcmp+0x34>
 4001a04:	39ffffc4 	addi	r7,r7,-1
 4001a08:	00bfffc4 	movi	r2,-1
 4001a0c:	21000044 	addi	r4,r4,1
 4001a10:	29400044 	addi	r5,r5,1
 4001a14:	38800526 	beq	r7,r2,4001a2c <memcmp+0x34>
 4001a18:	20c00003 	ldbu	r3,0(r4)
 4001a1c:	28800003 	ldbu	r2,0(r5)
 4001a20:	18bff826 	beq	r3,r2,4001a04 <memcmp+0xc>
 4001a24:	1885c83a 	sub	r2,r3,r2
 4001a28:	f800283a 	ret
 4001a2c:	0005883a 	mov	r2,zero
 4001a30:	f800283a 	ret

04001a34 <register_fini>:
 4001a34:	f800283a 	ret

04001a38 <__call_exitprocs>:
 4001a38:	defff304 	addi	sp,sp,-52
 4001a3c:	00810034 	movhi	r2,1024
 4001a40:	1087d504 	addi	r2,r2,8020
 4001a44:	df000b15 	stw	fp,44(sp)
 4001a48:	17000017 	ldw	fp,0(r2)
 4001a4c:	00800034 	movhi	r2,0
 4001a50:	10800004 	addi	r2,r2,0
 4001a54:	1005003a 	cmpeq	r2,r2,zero
 4001a58:	d8800215 	stw	r2,8(sp)
 4001a5c:	e0800c04 	addi	r2,fp,48
 4001a60:	dd800915 	stw	r22,36(sp)
 4001a64:	dd400815 	stw	r21,32(sp)
 4001a68:	dfc00c15 	stw	ra,48(sp)
 4001a6c:	ddc00a15 	stw	r23,40(sp)
 4001a70:	dd000715 	stw	r20,28(sp)
 4001a74:	dcc00615 	stw	r19,24(sp)
 4001a78:	dc800515 	stw	r18,20(sp)
 4001a7c:	dc400415 	stw	r17,16(sp)
 4001a80:	dc000315 	stw	r16,12(sp)
 4001a84:	282d883a 	mov	r22,r5
 4001a88:	d9000115 	stw	r4,4(sp)
 4001a8c:	d8800015 	stw	r2,0(sp)
 4001a90:	282b003a 	cmpeq	r21,r5,zero
 4001a94:	e4400c17 	ldw	r17,48(fp)
 4001a98:	88001226 	beq	r17,zero,4001ae4 <__call_exitprocs+0xac>
 4001a9c:	ddc00017 	ldw	r23,0(sp)
 4001aa0:	88800117 	ldw	r2,4(r17)
 4001aa4:	8c802217 	ldw	r18,136(r17)
 4001aa8:	143fffc4 	addi	r16,r2,-1
 4001aac:	80000b16 	blt	r16,zero,4001adc <__call_exitprocs+0xa4>
 4001ab0:	9027003a 	cmpeq	r19,r18,zero
 4001ab4:	a800171e 	bne	r21,zero,4001b14 <__call_exitprocs+0xdc>
 4001ab8:	9800051e 	bne	r19,zero,4001ad0 <__call_exitprocs+0x98>
 4001abc:	8409883a 	add	r4,r16,r16
 4001ac0:	2105883a 	add	r2,r4,r4
 4001ac4:	1485883a 	add	r2,r2,r18
 4001ac8:	10c02017 	ldw	r3,128(r2)
 4001acc:	b0c01226 	beq	r22,r3,4001b18 <__call_exitprocs+0xe0>
 4001ad0:	843fffc4 	addi	r16,r16,-1
 4001ad4:	00bfffc4 	movi	r2,-1
 4001ad8:	80bff61e 	bne	r16,r2,4001ab4 <__call_exitprocs+0x7c>
 4001adc:	d8800217 	ldw	r2,8(sp)
 4001ae0:	10003226 	beq	r2,zero,4001bac <__call_exitprocs+0x174>
 4001ae4:	dfc00c17 	ldw	ra,48(sp)
 4001ae8:	df000b17 	ldw	fp,44(sp)
 4001aec:	ddc00a17 	ldw	r23,40(sp)
 4001af0:	dd800917 	ldw	r22,36(sp)
 4001af4:	dd400817 	ldw	r21,32(sp)
 4001af8:	dd000717 	ldw	r20,28(sp)
 4001afc:	dcc00617 	ldw	r19,24(sp)
 4001b00:	dc800517 	ldw	r18,20(sp)
 4001b04:	dc400417 	ldw	r17,16(sp)
 4001b08:	dc000317 	ldw	r16,12(sp)
 4001b0c:	dec00d04 	addi	sp,sp,52
 4001b10:	f800283a 	ret
 4001b14:	8409883a 	add	r4,r16,r16
 4001b18:	88c00117 	ldw	r3,4(r17)
 4001b1c:	2105883a 	add	r2,r4,r4
 4001b20:	1445883a 	add	r2,r2,r17
 4001b24:	18ffffc4 	addi	r3,r3,-1
 4001b28:	11800217 	ldw	r6,8(r2)
 4001b2c:	1c001826 	beq	r3,r16,4001b90 <__call_exitprocs+0x158>
 4001b30:	10000215 	stw	zero,8(r2)
 4001b34:	303fe626 	beq	r6,zero,4001ad0 <__call_exitprocs+0x98>
 4001b38:	8d000117 	ldw	r20,4(r17)
 4001b3c:	9800121e 	bne	r19,zero,4001b88 <__call_exitprocs+0x150>
 4001b40:	00c00044 	movi	r3,1
 4001b44:	1c06983a 	sll	r3,r3,r16
 4001b48:	90804017 	ldw	r2,256(r18)
 4001b4c:	1884703a 	and	r2,r3,r2
 4001b50:	10000d26 	beq	r2,zero,4001b88 <__call_exitprocs+0x150>
 4001b54:	90804117 	ldw	r2,260(r18)
 4001b58:	1884703a 	and	r2,r3,r2
 4001b5c:	10000e1e 	bne	r2,zero,4001b98 <__call_exitprocs+0x160>
 4001b60:	2105883a 	add	r2,r4,r4
 4001b64:	1485883a 	add	r2,r2,r18
 4001b68:	11400017 	ldw	r5,0(r2)
 4001b6c:	d9000117 	ldw	r4,4(sp)
 4001b70:	303ee83a 	callr	r6
 4001b74:	88800117 	ldw	r2,4(r17)
 4001b78:	a0bfc61e 	bne	r20,r2,4001a94 <__call_exitprocs+0x5c>
 4001b7c:	b8800017 	ldw	r2,0(r23)
 4001b80:	147fd326 	beq	r2,r17,4001ad0 <__call_exitprocs+0x98>
 4001b84:	003fc306 	br	4001a94 <__call_exitprocs+0x5c>
 4001b88:	303ee83a 	callr	r6
 4001b8c:	003ff906 	br	4001b74 <__call_exitprocs+0x13c>
 4001b90:	8c000115 	stw	r16,4(r17)
 4001b94:	003fe706 	br	4001b34 <__call_exitprocs+0xfc>
 4001b98:	2105883a 	add	r2,r4,r4
 4001b9c:	1485883a 	add	r2,r2,r18
 4001ba0:	11000017 	ldw	r4,0(r2)
 4001ba4:	303ee83a 	callr	r6
 4001ba8:	003ff206 	br	4001b74 <__call_exitprocs+0x13c>
 4001bac:	88800117 	ldw	r2,4(r17)
 4001bb0:	10000b1e 	bne	r2,zero,4001be0 <__call_exitprocs+0x1a8>
 4001bb4:	89000017 	ldw	r4,0(r17)
 4001bb8:	20000a26 	beq	r4,zero,4001be4 <__call_exitprocs+0x1ac>
 4001bbc:	b9000015 	stw	r4,0(r23)
 4001bc0:	90000226 	beq	r18,zero,4001bcc <__call_exitprocs+0x194>
 4001bc4:	9009883a 	mov	r4,r18
 4001bc8:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>
 4001bcc:	8809883a 	mov	r4,r17
 4001bd0:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>
 4001bd4:	bc400017 	ldw	r17,0(r23)
 4001bd8:	883fb11e 	bne	r17,zero,4001aa0 <__call_exitprocs+0x68>
 4001bdc:	003fc106 	br	4001ae4 <__call_exitprocs+0xac>
 4001be0:	89000017 	ldw	r4,0(r17)
 4001be4:	882f883a 	mov	r23,r17
 4001be8:	2023883a 	mov	r17,r4
 4001bec:	883fac1e 	bne	r17,zero,4001aa0 <__call_exitprocs+0x68>
 4001bf0:	003fbc06 	br	4001ae4 <__call_exitprocs+0xac>

04001bf4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4001bf4:	defffd04 	addi	sp,sp,-12
 4001bf8:	df000215 	stw	fp,8(sp)
 4001bfc:	df000204 	addi	fp,sp,8
 4001c00:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4001c04:	e0bfff17 	ldw	r2,-4(fp)
 4001c08:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4001c0c:	e0bffe17 	ldw	r2,-8(fp)
 4001c10:	1005003a 	cmpeq	r2,r2,zero
 4001c14:	1000021e 	bne	r2,zero,4001c20 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4001c18:	002af070 	cmpltui	zero,zero,43969
 4001c1c:	00000106 	br	4001c24 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4001c20:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4001c24:	e037883a 	mov	sp,fp
 4001c28:	df000017 	ldw	fp,0(sp)
 4001c2c:	dec00104 	addi	sp,sp,4
 4001c30:	f800283a 	ret

04001c34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4001c34:	defffd04 	addi	sp,sp,-12
 4001c38:	dfc00215 	stw	ra,8(sp)
 4001c3c:	df000115 	stw	fp,4(sp)
 4001c40:	df000104 	addi	fp,sp,4
 4001c44:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4001c48:	e13fff17 	ldw	r4,-4(fp)
 4001c4c:	4001bf40 	call	4001bf4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4001c50:	003fff06 	br	4001c50 <_exit+0x1c>
 4001c54:	04001a34 	movhi	r16,104
