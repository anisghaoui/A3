
helo.elf:     file format elf32-littlenios2
helo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000000

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00001984 memsz 0x00001984 flags r-x
    LOAD off    0x00002984 vaddr 0x04001984 paddr 0x04001c5c align 2**12
         filesz 0x000002d8 memsz 0x000002d8 flags rw-
    LOAD off    0x00002f34 vaddr 0x04001f34 paddr 0x04001f34 align 2**12
         filesz 0x00000000 memsz 0x000000a4 flags rw-
    LOAD off    0x00003000 vaddr 0x08104000 paddr 0x08104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08104000  08104000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001940  04000000  04000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  04001940  04001940  00002940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d8  04001984  04001c5c  00002984  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000000a4  04001f34  04001f34  00002f34  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000468  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000679  00000000  00000000  000034b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008324  00000000  00000000  00003b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001de5  00000000  00000000  0000be4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000577f  00000000  00000000  0000dc32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000075c  00000000  00000000  000133b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a5d  00000000  00000000  00013b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000ce8  00000000  00000000  0001456d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00015258  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00015288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00016a90  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00016a93  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00016a96  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00016a98  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00016a9c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00016aa0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00016aa4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00016aad  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00016ab6  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00016abf  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  00016aca  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000474c4  00000000  00000000  00016af9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08104000 l    d  .entry	00000000 .entry
04000000 l    d  .text	00000000 .text
04001940 l    d  .rodata	00000000 .rodata
04001984 l    d  .rwdata	00000000 .rwdata
04001f34 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
04000048 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
04001984 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
04000310 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
04000508 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04001a64 l     O .rwdata	0000002c JTAG_UART
040005f4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_close.c
04000ae8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04000b8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04000c6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04000dc4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04000f00 l     F .text	000000dc alt_file_locked
04001164 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0400171c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
040018dc l     F .text	00000040 alt_sim_halt
0400037c g     F .text	0000006c alt_main
04000098 g     F .text	00000090 _puts_r
04001c5c g       *ABS*	00000000 __flash_rwdata_start
04001f48 g     O .bss	00000004 altera_avalon_timer_ts_freq
04001c38 g     O .rwdata	00000004 timer
00000000  w      *UND*	00000000 __errno
08104000 g     F .entry	0000001c __reset
08104000 g       *ABS*	00000000 __alt_mem_ONCHIP
04000000 g       *ABS*	00000000 __flash_exceptions_start
04001f34 g     O .bss	00000004 errno
04001f3c g     O .bss	00000004 alt_argv
04009c38 g       *ABS*	00000000 _gp
04001ab8 g     O .rwdata	00000180 alt_fd_list
04001244 g     F .text	00000094 alt_find_dev
04000e88 g     F .text	00000078 alt_io_redirect
04001940 g       *ABS*	00000000 __DTOR_END__
04000128 g     F .text	00000014 puts
040006dc g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
040014b0 g     F .text	00000090 alt_icache_flush
04001c54 g     O .rwdata	00000004 alt_max_fd
04001c40 g     O .rwdata	00000004 _global_impure_ptr
04001fd8 g       *ABS*	00000000 __bss_end
04001a90 g     O .rwdata	00000028 alt_dev_null
08080000 g       *ABS*	00000000 __alt_mem_SSRAM_CONTROLLER
04000b48 g     F .text	00000044 alt_dcache_flush_all
04001c5c g       *ABS*	00000000 __ram_rwdata_end
04001c4c g     O .rwdata	00000008 alt_dev_list
040003e8 g     F .text	00000120 write
040009c4 g     F .text	00000028 alt_timestamp_freq
04001984 g       *ABS*	00000000 __ram_rodata_end
04001fd8 g       *ABS*	00000000 end
0400193c g       *ABS*	00000000 __CTOR_LIST__
04800000 g       *ABS*	00000000 __alt_stack_pointer
040007e0 g     F .text	000000a4 altera_avalon_jtag_uart_write
04001720 g     F .text	000001bc __call_exitprocs
04000000 g     F .text	0000004c _start
0400059c g     F .text	00000058 alt_sys_init
040015b0 g     F .text	0000016c __register_exitproc
04001984 g       *ABS*	00000000 __ram_rwdata_start
04001940 g       *ABS*	00000000 __ram_rodata_start
0400062c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
040013f8 g     F .text	000000b8 alt_get_fd
04001574 g     F .text	0000003c memcmp
04001fd8 g       *ABS*	00000000 __alt_stack_base
040012d8 g     F .text	00000120 alt_find_file
04000bb8 g     F .text	000000b4 alt_dev_llist_insert
0400015c g     F .text	000000bc __sfvwrite_small_dev
04001f34 g       *ABS*	00000000 __bss_start
0400004c g     F .text	0000004c main
04000000 g       *ABS*	00000000 __alt_mem_SDRAM_CONTROLLER
04001f40 g     O .bss	00000004 alt_envp
04000684 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04000884 g     F .text	000000a4 alt_timestamp_start
04001f4c g     O .bss	0000008c _atexit0
04001c58 g     O .rwdata	00000004 alt_errno
04001940 g       *ABS*	00000000 __CTOR_END__
04001940 g       *ABS*	00000000 __flash_rodata_start
04001940 g       *ABS*	00000000 __DTOR_LIST__
04000568 g     F .text	00000034 alt_irq_init
040011c4 g     F .text	00000060 alt_release_fd
04001540 g     F .text	00000014 atexit
04000218 g     F .text	00000078 _write_r
04001c3c g     O .rwdata	00000004 _impure_ptr
04001f38 g     O .bss	00000004 alt_argc
04001f44 g     O .bss	00000004 altera_avalon_timer_ts_base
04000d30 g     F .text	00000064 _do_dtors
04001c44 g     O .rwdata	00000008 alt_fs_list
08104020 g       *ABS*	00000000 __ram_exceptions_start
04000928 g     F .text	0000009c alt_timestamp
04001c5c g       *ABS*	00000000 _edata
04001fd8 g       *ABS*	00000000 _end
08104020 g       *ABS*	00000000 __ram_exceptions_end
04001224 g     F .text	00000020 altera_nios2_qsys_irq_init
04001554 g     F .text	00000020 exit
04800000 g       *ABS*	00000000 __alt_data_end
0400191c g     F .text	00000020 _exit
0400013c g     F .text	00000020 strlen
04000fdc g     F .text	00000188 open
04000d94 g     F .text	00000030 alt_icache_flush_all
04000ccc g     F .text	00000064 _do_ctors
040009ec g     F .text	000000fc close
04000290 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08104000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8104000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 8104004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8104008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 810400c:	00bffd16 	blt	zero,r2,8104004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8104010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8104014:	08400014 	ori	at,at,0
    jmp r1
 8104018:	0800683a 	jmp	at
 810401c:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>

Disassembly of section .text:

04000000 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000000:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000004:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000010:	06c12034 	movhi	sp,1152
    ori sp, sp, %lo(__alt_stack_pointer)
 4000014:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 4000018:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400001c:	d6a70e14 	ori	gp,gp,39992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000020:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000024:	1087cd14 	ori	r2,r2,7988

    movhi r3, %hi(__bss_end)
 4000028:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400002c:	18c7f614 	ori	r3,r3,8152

    beq r2, r3, 1f
 4000030:	10c00326 	beq	r2,r3,4000040 <_start+0x40>

0:
    stw zero, (r2)
 4000034:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000038:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400003c:	10fffd36 	bltu	r2,r3,4000034 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000040:	40002900 	call	4000290 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000044:	400037c0 	call	400037c <alt_main>

04000048 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000048:	003fff06 	br	4000048 <alt_after_alt_main>

0400004c <main>:
#include "../hello_world2_bsp/system.h"
#include "sys/alt_timestamp.h"
int* timer= TIMER_BASE;

int main()
{
 400004c:	defffe04 	addi	sp,sp,-8
 4000050:	dfc00115 	stw	ra,4(sp)
 4000054:	df000015 	stw	fp,0(sp)
 4000058:	d839883a 	mov	fp,sp
	printf("Hello from Nios II!\n");
 400005c:	01010034 	movhi	r4,1024
 4000060:	21065004 	addi	r4,r4,6464
 4000064:	40001280 	call	4000128 <puts>
	alt_timestamp_start();
 4000068:	40008840 	call	4000884 <alt_timestamp_start>

	*((short*)LEDR_BASE) =0xAA;
 400006c:	00c20474 	movhi	r3,2065
 4000070:	18e40804 	addi	r3,r3,-28640
 4000074:	00802a84 	movi	r2,170
 4000078:	1880000d 	sth	r2,0(r3)
	while(1){
		//printf("Hello from Nios II!\n");

		//printf("t=%d\n",(int)alt_timestamp ());
		*((short*)(LEDR_BASE | 0x80000000)) = *((short*)(SWITCHES_IN_BASE | 0x80000000));
 400007c:	00a20474 	movhi	r2,34833
 4000080:	10a40804 	addi	r2,r2,-28640
 4000084:	00e20474 	movhi	r3,34833
 4000088:	18e40c04 	addi	r3,r3,-28624
 400008c:	18c0000b 	ldhu	r3,0(r3)
 4000090:	10c0000d 	sth	r3,0(r2)
	}
 4000094:	003ff906 	br	400007c <main+0x30>

04000098 <_puts_r>:
 4000098:	defffd04 	addi	sp,sp,-12
 400009c:	dc000015 	stw	r16,0(sp)
 40000a0:	2021883a 	mov	r16,r4
 40000a4:	2809883a 	mov	r4,r5
 40000a8:	dfc00215 	stw	ra,8(sp)
 40000ac:	dc400115 	stw	r17,4(sp)
 40000b0:	2823883a 	mov	r17,r5
 40000b4:	400013c0 	call	400013c <strlen>
 40000b8:	80c00217 	ldw	r3,8(r16)
 40000bc:	02010034 	movhi	r8,1024
 40000c0:	42005704 	addi	r8,r8,348
 40000c4:	880d883a 	mov	r6,r17
 40000c8:	100f883a 	mov	r7,r2
 40000cc:	8009883a 	mov	r4,r16
 40000d0:	180b883a 	mov	r5,r3
 40000d4:	1a000115 	stw	r8,4(r3)
 40000d8:	403ee83a 	callr	r8
 40000dc:	047fffc4 	movi	r17,-1
 40000e0:	8009883a 	mov	r4,r16
 40000e4:	01810034 	movhi	r6,1024
 40000e8:	31865504 	addi	r6,r6,6484
 40000ec:	01c00044 	movi	r7,1
 40000f0:	1440071e 	bne	r2,r17,4000110 <_puts_r+0x78>
 40000f4:	00ffffc4 	movi	r3,-1
 40000f8:	1805883a 	mov	r2,r3
 40000fc:	dfc00217 	ldw	ra,8(sp)
 4000100:	dc400117 	ldw	r17,4(sp)
 4000104:	dc000017 	ldw	r16,0(sp)
 4000108:	dec00304 	addi	sp,sp,12
 400010c:	f800283a 	ret
 4000110:	81400217 	ldw	r5,8(r16)
 4000114:	28c00117 	ldw	r3,4(r5)
 4000118:	183ee83a 	callr	r3
 400011c:	0007883a 	mov	r3,zero
 4000120:	147ff51e 	bne	r2,r17,40000f8 <_puts_r+0x60>
 4000124:	003ff306 	br	40000f4 <_puts_r+0x5c>

04000128 <puts>:
 4000128:	00810034 	movhi	r2,1024
 400012c:	10870f04 	addi	r2,r2,7228
 4000130:	200b883a 	mov	r5,r4
 4000134:	11000017 	ldw	r4,0(r2)
 4000138:	40000981 	jmpi	4000098 <_puts_r>

0400013c <strlen>:
 400013c:	20800007 	ldb	r2,0(r4)
 4000140:	10000526 	beq	r2,zero,4000158 <strlen+0x1c>
 4000144:	2007883a 	mov	r3,r4
 4000148:	18c00044 	addi	r3,r3,1
 400014c:	18800007 	ldb	r2,0(r3)
 4000150:	103ffd1e 	bne	r2,zero,4000148 <strlen+0xc>
 4000154:	1905c83a 	sub	r2,r3,r4
 4000158:	f800283a 	ret

0400015c <__sfvwrite_small_dev>:
 400015c:	2880000b 	ldhu	r2,0(r5)
 4000160:	defffa04 	addi	sp,sp,-24
 4000164:	dcc00315 	stw	r19,12(sp)
 4000168:	1080020c 	andi	r2,r2,8
 400016c:	dc800215 	stw	r18,8(sp)
 4000170:	dc400115 	stw	r17,4(sp)
 4000174:	dfc00515 	stw	ra,20(sp)
 4000178:	dd000415 	stw	r20,16(sp)
 400017c:	dc000015 	stw	r16,0(sp)
 4000180:	2825883a 	mov	r18,r5
 4000184:	2027883a 	mov	r19,r4
 4000188:	3023883a 	mov	r17,r6
 400018c:	10002026 	beq	r2,zero,4000210 <__sfvwrite_small_dev+0xb4>
 4000190:	2940008f 	ldh	r5,2(r5)
 4000194:	28000f16 	blt	r5,zero,40001d4 <__sfvwrite_small_dev+0x78>
 4000198:	01c01b0e 	bge	zero,r7,4000208 <__sfvwrite_small_dev+0xac>
 400019c:	3821883a 	mov	r16,r7
 40001a0:	05010004 	movi	r20,1024
 40001a4:	00000206 	br	40001b0 <__sfvwrite_small_dev+0x54>
 40001a8:	0400170e 	bge	zero,r16,4000208 <__sfvwrite_small_dev+0xac>
 40001ac:	9140008f 	ldh	r5,2(r18)
 40001b0:	880d883a 	mov	r6,r17
 40001b4:	9809883a 	mov	r4,r19
 40001b8:	800f883a 	mov	r7,r16
 40001bc:	a400010e 	bge	r20,r16,40001c4 <__sfvwrite_small_dev+0x68>
 40001c0:	01c10004 	movi	r7,1024
 40001c4:	40002180 	call	4000218 <_write_r>
 40001c8:	88a3883a 	add	r17,r17,r2
 40001cc:	80a1c83a 	sub	r16,r16,r2
 40001d0:	00bff516 	blt	zero,r2,40001a8 <__sfvwrite_small_dev+0x4c>
 40001d4:	9080000b 	ldhu	r2,0(r18)
 40001d8:	00ffffc4 	movi	r3,-1
 40001dc:	10801014 	ori	r2,r2,64
 40001e0:	9080000d 	sth	r2,0(r18)
 40001e4:	1805883a 	mov	r2,r3
 40001e8:	dfc00517 	ldw	ra,20(sp)
 40001ec:	dd000417 	ldw	r20,16(sp)
 40001f0:	dcc00317 	ldw	r19,12(sp)
 40001f4:	dc800217 	ldw	r18,8(sp)
 40001f8:	dc400117 	ldw	r17,4(sp)
 40001fc:	dc000017 	ldw	r16,0(sp)
 4000200:	dec00604 	addi	sp,sp,24
 4000204:	f800283a 	ret
 4000208:	0007883a 	mov	r3,zero
 400020c:	003ff506 	br	40001e4 <__sfvwrite_small_dev+0x88>
 4000210:	00ffffc4 	movi	r3,-1
 4000214:	003ff306 	br	40001e4 <__sfvwrite_small_dev+0x88>

04000218 <_write_r>:
 4000218:	defffd04 	addi	sp,sp,-12
 400021c:	dc000015 	stw	r16,0(sp)
 4000220:	04010034 	movhi	r16,1024
 4000224:	8407cd04 	addi	r16,r16,7988
 4000228:	dc400115 	stw	r17,4(sp)
 400022c:	80000015 	stw	zero,0(r16)
 4000230:	2023883a 	mov	r17,r4
 4000234:	2809883a 	mov	r4,r5
 4000238:	300b883a 	mov	r5,r6
 400023c:	380d883a 	mov	r6,r7
 4000240:	dfc00215 	stw	ra,8(sp)
 4000244:	40003e80 	call	40003e8 <write>
 4000248:	1007883a 	mov	r3,r2
 400024c:	00bfffc4 	movi	r2,-1
 4000250:	18800626 	beq	r3,r2,400026c <_write_r+0x54>
 4000254:	1805883a 	mov	r2,r3
 4000258:	dfc00217 	ldw	ra,8(sp)
 400025c:	dc400117 	ldw	r17,4(sp)
 4000260:	dc000017 	ldw	r16,0(sp)
 4000264:	dec00304 	addi	sp,sp,12
 4000268:	f800283a 	ret
 400026c:	80800017 	ldw	r2,0(r16)
 4000270:	103ff826 	beq	r2,zero,4000254 <_write_r+0x3c>
 4000274:	88800015 	stw	r2,0(r17)
 4000278:	1805883a 	mov	r2,r3
 400027c:	dfc00217 	ldw	ra,8(sp)
 4000280:	dc400117 	ldw	r17,4(sp)
 4000284:	dc000017 	ldw	r16,0(sp)
 4000288:	dec00304 	addi	sp,sp,12
 400028c:	f800283a 	ret

04000290 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000290:	defffe04 	addi	sp,sp,-8
 4000294:	dfc00115 	stw	ra,4(sp)
 4000298:	df000015 	stw	fp,0(sp)
 400029c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40002a0:	01010034 	movhi	r4,1024
 40002a4:	21071704 	addi	r4,r4,7260
 40002a8:	01410034 	movhi	r5,1024
 40002ac:	29466104 	addi	r5,r5,6532
 40002b0:	01810034 	movhi	r6,1024
 40002b4:	31871704 	addi	r6,r6,7260
 40002b8:	40003100 	call	4000310 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40002bc:	01010034 	movhi	r4,1024
 40002c0:	21000004 	addi	r4,r4,0
 40002c4:	01420434 	movhi	r5,2064
 40002c8:	29500804 	addi	r5,r5,16416
 40002cc:	01820434 	movhi	r6,2064
 40002d0:	31900804 	addi	r6,r6,16416
 40002d4:	40003100 	call	4000310 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40002d8:	01010034 	movhi	r4,1024
 40002dc:	21065004 	addi	r4,r4,6464
 40002e0:	01410034 	movhi	r5,1024
 40002e4:	29465004 	addi	r5,r5,6464
 40002e8:	01810034 	movhi	r6,1024
 40002ec:	31866104 	addi	r6,r6,6532
 40002f0:	40003100 	call	4000310 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40002f4:	4000b480 	call	4000b48 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40002f8:	4000d940 	call	4000d94 <alt_icache_flush_all>
}
 40002fc:	e037883a 	mov	sp,fp
 4000300:	dfc00117 	ldw	ra,4(sp)
 4000304:	df000017 	ldw	fp,0(sp)
 4000308:	dec00204 	addi	sp,sp,8
 400030c:	f800283a 	ret

04000310 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4000310:	defffc04 	addi	sp,sp,-16
 4000314:	df000315 	stw	fp,12(sp)
 4000318:	df000304 	addi	fp,sp,12
 400031c:	e13ffd15 	stw	r4,-12(fp)
 4000320:	e17ffe15 	stw	r5,-8(fp)
 4000324:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4000328:	e0fffe17 	ldw	r3,-8(fp)
 400032c:	e0bffd17 	ldw	r2,-12(fp)
 4000330:	18800e26 	beq	r3,r2,400036c <alt_load_section+0x5c>
  {
    while( to != end )
 4000334:	00000a06 	br	4000360 <alt_load_section+0x50>
    {
      *to++ = *from++;
 4000338:	e0bffd17 	ldw	r2,-12(fp)
 400033c:	10c00017 	ldw	r3,0(r2)
 4000340:	e0bffe17 	ldw	r2,-8(fp)
 4000344:	10c00015 	stw	r3,0(r2)
 4000348:	e0bffe17 	ldw	r2,-8(fp)
 400034c:	10800104 	addi	r2,r2,4
 4000350:	e0bffe15 	stw	r2,-8(fp)
 4000354:	e0bffd17 	ldw	r2,-12(fp)
 4000358:	10800104 	addi	r2,r2,4
 400035c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000360:	e0fffe17 	ldw	r3,-8(fp)
 4000364:	e0bfff17 	ldw	r2,-4(fp)
 4000368:	18bff31e 	bne	r3,r2,4000338 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 400036c:	e037883a 	mov	sp,fp
 4000370:	df000017 	ldw	fp,0(sp)
 4000374:	dec00104 	addi	sp,sp,4
 4000378:	f800283a 	ret

0400037c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400037c:	defffd04 	addi	sp,sp,-12
 4000380:	dfc00215 	stw	ra,8(sp)
 4000384:	df000115 	stw	fp,4(sp)
 4000388:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400038c:	0009883a 	mov	r4,zero
 4000390:	40005680 	call	4000568 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000394:	400059c0 	call	400059c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4000398:	01010034 	movhi	r4,1024
 400039c:	21065604 	addi	r4,r4,6488
 40003a0:	01410034 	movhi	r5,1024
 40003a4:	29465604 	addi	r5,r5,6488
 40003a8:	01810034 	movhi	r6,1024
 40003ac:	31865604 	addi	r6,r6,6488
 40003b0:	4000e880 	call	4000e88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40003b4:	4000ccc0 	call	4000ccc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40003b8:	01010034 	movhi	r4,1024
 40003bc:	21034c04 	addi	r4,r4,3376
 40003c0:	40015400 	call	4001540 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40003c4:	d120c017 	ldw	r4,-32000(gp)
 40003c8:	d160c117 	ldw	r5,-31996(gp)
 40003cc:	d1a0c217 	ldw	r6,-31992(gp)
 40003d0:	400004c0 	call	400004c <main>
 40003d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40003d8:	01000044 	movi	r4,1
 40003dc:	40009ec0 	call	40009ec <close>
  exit (result);
 40003e0:	e13fff17 	ldw	r4,-4(fp)
 40003e4:	40015540 	call	4001554 <exit>

040003e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40003e8:	defff704 	addi	sp,sp,-36
 40003ec:	dfc00815 	stw	ra,32(sp)
 40003f0:	df000715 	stw	fp,28(sp)
 40003f4:	df000704 	addi	fp,sp,28
 40003f8:	e13ffb15 	stw	r4,-20(fp)
 40003fc:	e17ffc15 	stw	r5,-16(fp)
 4000400:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4000404:	e0bffb17 	ldw	r2,-20(fp)
 4000408:	1004803a 	cmplt	r2,r2,zero
 400040c:	1000081e 	bne	r2,zero,4000430 <write+0x48>
 4000410:	e0bffb17 	ldw	r2,-20(fp)
 4000414:	10800324 	muli	r2,r2,12
 4000418:	1007883a 	mov	r3,r2
 400041c:	00810034 	movhi	r2,1024
 4000420:	1086ae04 	addi	r2,r2,6840
 4000424:	1887883a 	add	r3,r3,r2
 4000428:	e0ffff15 	stw	r3,-4(fp)
 400042c:	00000106 	br	4000434 <write+0x4c>
 4000430:	e03fff15 	stw	zero,-4(fp)
 4000434:	e0bfff17 	ldw	r2,-4(fp)
 4000438:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400043c:	e0bffa17 	ldw	r2,-24(fp)
 4000440:	1005003a 	cmpeq	r2,r2,zero
 4000444:	1000241e 	bne	r2,zero,40004d8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4000448:	e0bffa17 	ldw	r2,-24(fp)
 400044c:	10800217 	ldw	r2,8(r2)
 4000450:	108000cc 	andi	r2,r2,3
 4000454:	1005003a 	cmpeq	r2,r2,zero
 4000458:	10001a1e 	bne	r2,zero,40004c4 <write+0xdc>
 400045c:	e0bffa17 	ldw	r2,-24(fp)
 4000460:	10800017 	ldw	r2,0(r2)
 4000464:	10800617 	ldw	r2,24(r2)
 4000468:	1005003a 	cmpeq	r2,r2,zero
 400046c:	1000151e 	bne	r2,zero,40004c4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4000470:	e0bffa17 	ldw	r2,-24(fp)
 4000474:	10800017 	ldw	r2,0(r2)
 4000478:	10800617 	ldw	r2,24(r2)
 400047c:	e17ffc17 	ldw	r5,-16(fp)
 4000480:	e1bffd17 	ldw	r6,-12(fp)
 4000484:	e13ffa17 	ldw	r4,-24(fp)
 4000488:	103ee83a 	callr	r2
 400048c:	e0bff915 	stw	r2,-28(fp)
 4000490:	e0bff917 	ldw	r2,-28(fp)
 4000494:	1004403a 	cmpge	r2,r2,zero
 4000498:	1000071e 	bne	r2,zero,40004b8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 400049c:	40005080 	call	4000508 <alt_get_errno>
 40004a0:	e0fff917 	ldw	r3,-28(fp)
 40004a4:	00c7c83a 	sub	r3,zero,r3
 40004a8:	10c00015 	stw	r3,0(r2)
        return -1;
 40004ac:	00bfffc4 	movi	r2,-1
 40004b0:	e0bffe15 	stw	r2,-8(fp)
 40004b4:	00000e06 	br	40004f0 <write+0x108>
      }
      return rval;
 40004b8:	e0bff917 	ldw	r2,-28(fp)
 40004bc:	e0bffe15 	stw	r2,-8(fp)
 40004c0:	00000b06 	br	40004f0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40004c4:	40005080 	call	4000508 <alt_get_errno>
 40004c8:	1007883a 	mov	r3,r2
 40004cc:	00800344 	movi	r2,13
 40004d0:	18800015 	stw	r2,0(r3)
 40004d4:	00000406 	br	40004e8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40004d8:	40005080 	call	4000508 <alt_get_errno>
 40004dc:	1007883a 	mov	r3,r2
 40004e0:	00801444 	movi	r2,81
 40004e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40004e8:	00bfffc4 	movi	r2,-1
 40004ec:	e0bffe15 	stw	r2,-8(fp)
 40004f0:	e0bffe17 	ldw	r2,-8(fp)
}
 40004f4:	e037883a 	mov	sp,fp
 40004f8:	dfc00117 	ldw	ra,4(sp)
 40004fc:	df000017 	ldw	fp,0(sp)
 4000500:	dec00204 	addi	sp,sp,8
 4000504:	f800283a 	ret

04000508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000508:	defffd04 	addi	sp,sp,-12
 400050c:	dfc00215 	stw	ra,8(sp)
 4000510:	df000115 	stw	fp,4(sp)
 4000514:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4000518:	00810034 	movhi	r2,1024
 400051c:	10871604 	addi	r2,r2,7256
 4000520:	10800017 	ldw	r2,0(r2)
 4000524:	1005003a 	cmpeq	r2,r2,zero
 4000528:	1000061e 	bne	r2,zero,4000544 <alt_get_errno+0x3c>
 400052c:	00810034 	movhi	r2,1024
 4000530:	10871604 	addi	r2,r2,7256
 4000534:	10800017 	ldw	r2,0(r2)
 4000538:	103ee83a 	callr	r2
 400053c:	e0bfff15 	stw	r2,-4(fp)
 4000540:	00000306 	br	4000550 <alt_get_errno+0x48>
 4000544:	00810034 	movhi	r2,1024
 4000548:	1087cd04 	addi	r2,r2,7988
 400054c:	e0bfff15 	stw	r2,-4(fp)
 4000550:	e0bfff17 	ldw	r2,-4(fp)
}
 4000554:	e037883a 	mov	sp,fp
 4000558:	dfc00117 	ldw	ra,4(sp)
 400055c:	df000017 	ldw	fp,0(sp)
 4000560:	dec00204 	addi	sp,sp,8
 4000564:	f800283a 	ret

04000568 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000568:	defffd04 	addi	sp,sp,-12
 400056c:	dfc00215 	stw	ra,8(sp)
 4000570:	df000115 	stw	fp,4(sp)
 4000574:	df000104 	addi	fp,sp,4
 4000578:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 400057c:	40012240 	call	4001224 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000580:	00800044 	movi	r2,1
 4000584:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000588:	e037883a 	mov	sp,fp
 400058c:	dfc00117 	ldw	ra,4(sp)
 4000590:	df000017 	ldw	fp,0(sp)
 4000594:	dec00204 	addi	sp,sp,8
 4000598:	f800283a 	ret

0400059c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400059c:	defffe04 	addi	sp,sp,-8
 40005a0:	dfc00115 	stw	ra,4(sp)
 40005a4:	df000015 	stw	fp,0(sp)
 40005a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
 40005ac:	00c10034 	movhi	r3,1024
 40005b0:	18c7d104 	addi	r3,r3,8004
 40005b4:	00820474 	movhi	r2,2065
 40005b8:	10a40004 	addi	r2,r2,-28672
 40005bc:	18800015 	stw	r2,0(r3)
 40005c0:	00c10034 	movhi	r3,1024
 40005c4:	18c7d204 	addi	r3,r3,8008
 40005c8:	0080bef4 	movhi	r2,763
 40005cc:	10bc2004 	addi	r2,r2,-3968
 40005d0:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
 40005d4:	01010034 	movhi	r4,1024
 40005d8:	21069904 	addi	r4,r4,6756
 40005dc:	40005f40 	call	40005f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 40005e0:	e037883a 	mov	sp,fp
 40005e4:	dfc00117 	ldw	ra,4(sp)
 40005e8:	df000017 	ldw	fp,0(sp)
 40005ec:	dec00204 	addi	sp,sp,8
 40005f0:	f800283a 	ret

040005f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40005f4:	defffd04 	addi	sp,sp,-12
 40005f8:	dfc00215 	stw	ra,8(sp)
 40005fc:	df000115 	stw	fp,4(sp)
 4000600:	df000104 	addi	fp,sp,4
 4000604:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000608:	e13fff17 	ldw	r4,-4(fp)
 400060c:	01410034 	movhi	r5,1024
 4000610:	29471304 	addi	r5,r5,7244
 4000614:	4000bb80 	call	4000bb8 <alt_dev_llist_insert>
}
 4000618:	e037883a 	mov	sp,fp
 400061c:	dfc00117 	ldw	ra,4(sp)
 4000620:	df000017 	ldw	fp,0(sp)
 4000624:	dec00204 	addi	sp,sp,8
 4000628:	f800283a 	ret

0400062c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400062c:	defffa04 	addi	sp,sp,-24
 4000630:	dfc00515 	stw	ra,20(sp)
 4000634:	df000415 	stw	fp,16(sp)
 4000638:	df000404 	addi	fp,sp,16
 400063c:	e13ffd15 	stw	r4,-12(fp)
 4000640:	e17ffe15 	stw	r5,-8(fp)
 4000644:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000648:	e0bffd17 	ldw	r2,-12(fp)
 400064c:	10800017 	ldw	r2,0(r2)
 4000650:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4000654:	e0bffc17 	ldw	r2,-16(fp)
 4000658:	11000a04 	addi	r4,r2,40
 400065c:	e0bffd17 	ldw	r2,-12(fp)
 4000660:	11c00217 	ldw	r7,8(r2)
 4000664:	e17ffe17 	ldw	r5,-8(fp)
 4000668:	e1bfff17 	ldw	r6,-4(fp)
 400066c:	40006dc0 	call	40006dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4000670:	e037883a 	mov	sp,fp
 4000674:	dfc00117 	ldw	ra,4(sp)
 4000678:	df000017 	ldw	fp,0(sp)
 400067c:	dec00204 	addi	sp,sp,8
 4000680:	f800283a 	ret

04000684 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4000684:	defffa04 	addi	sp,sp,-24
 4000688:	dfc00515 	stw	ra,20(sp)
 400068c:	df000415 	stw	fp,16(sp)
 4000690:	df000404 	addi	fp,sp,16
 4000694:	e13ffd15 	stw	r4,-12(fp)
 4000698:	e17ffe15 	stw	r5,-8(fp)
 400069c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40006a0:	e0bffd17 	ldw	r2,-12(fp)
 40006a4:	10800017 	ldw	r2,0(r2)
 40006a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40006ac:	e0bffc17 	ldw	r2,-16(fp)
 40006b0:	11000a04 	addi	r4,r2,40
 40006b4:	e0bffd17 	ldw	r2,-12(fp)
 40006b8:	11c00217 	ldw	r7,8(r2)
 40006bc:	e17ffe17 	ldw	r5,-8(fp)
 40006c0:	e1bfff17 	ldw	r6,-4(fp)
 40006c4:	40007e00 	call	40007e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40006c8:	e037883a 	mov	sp,fp
 40006cc:	dfc00117 	ldw	ra,4(sp)
 40006d0:	df000017 	ldw	fp,0(sp)
 40006d4:	dec00204 	addi	sp,sp,8
 40006d8:	f800283a 	ret

040006dc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 40006dc:	defff604 	addi	sp,sp,-40
 40006e0:	df000915 	stw	fp,36(sp)
 40006e4:	df000904 	addi	fp,sp,36
 40006e8:	e13ffb15 	stw	r4,-20(fp)
 40006ec:	e17ffc15 	stw	r5,-16(fp)
 40006f0:	e1bffd15 	stw	r6,-12(fp)
 40006f4:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
 40006f8:	e0bffb17 	ldw	r2,-20(fp)
 40006fc:	10800017 	ldw	r2,0(r2)
 4000700:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
 4000704:	e0bffc17 	ldw	r2,-16(fp)
 4000708:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
 400070c:	e0bffd17 	ldw	r2,-12(fp)
 4000710:	1007883a 	mov	r3,r2
 4000714:	e0bffc17 	ldw	r2,-16(fp)
 4000718:	10c5883a 	add	r2,r2,r3
 400071c:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
 4000720:	00001606 	br	400077c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4000724:	e0bffa17 	ldw	r2,-24(fp)
 4000728:	10800037 	ldwio	r2,0(r2)
 400072c:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4000730:	e0bff717 	ldw	r2,-36(fp)
 4000734:	10a0000c 	andi	r2,r2,32768
 4000738:	1005003a 	cmpeq	r2,r2,zero
 400073c:	1000081e 	bne	r2,zero,4000760 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000740:	e0bff717 	ldw	r2,-36(fp)
 4000744:	1007883a 	mov	r3,r2
 4000748:	e0bff917 	ldw	r2,-28(fp)
 400074c:	10c00005 	stb	r3,0(r2)
 4000750:	e0bff917 	ldw	r2,-28(fp)
 4000754:	10800044 	addi	r2,r2,1
 4000758:	e0bff915 	stw	r2,-28(fp)
 400075c:	00000706 	br	400077c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 4000760:	e0fff917 	ldw	r3,-28(fp)
 4000764:	e0bffc17 	ldw	r2,-16(fp)
 4000768:	1880071e 	bne	r3,r2,4000788 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
 400076c:	e0bffe17 	ldw	r2,-8(fp)
 4000770:	1090000c 	andi	r2,r2,16384
 4000774:	1004c03a 	cmpne	r2,r2,zero
 4000778:	1000031e 	bne	r2,zero,4000788 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 400077c:	e0fff917 	ldw	r3,-28(fp)
 4000780:	e0bff817 	ldw	r2,-32(fp)
 4000784:	18bfe736 	bltu	r3,r2,4000724 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 4000788:	e0fff917 	ldw	r3,-28(fp)
 400078c:	e0bffc17 	ldw	r2,-16(fp)
 4000790:	18800526 	beq	r3,r2,40007a8 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
 4000794:	e0fff917 	ldw	r3,-28(fp)
 4000798:	e0bffc17 	ldw	r2,-16(fp)
 400079c:	1887c83a 	sub	r3,r3,r2
 40007a0:	e0ffff15 	stw	r3,-4(fp)
 40007a4:	00000906 	br	40007cc <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
 40007a8:	e0bffe17 	ldw	r2,-8(fp)
 40007ac:	1090000c 	andi	r2,r2,16384
 40007b0:	1005003a 	cmpeq	r2,r2,zero
 40007b4:	1000031e 	bne	r2,zero,40007c4 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
 40007b8:	00bffd44 	movi	r2,-11
 40007bc:	e0bfff15 	stw	r2,-4(fp)
 40007c0:	00000206 	br	40007cc <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
 40007c4:	00bffec4 	movi	r2,-5
 40007c8:	e0bfff15 	stw	r2,-4(fp)
 40007cc:	e0bfff17 	ldw	r2,-4(fp)
}
 40007d0:	e037883a 	mov	sp,fp
 40007d4:	df000017 	ldw	fp,0(sp)
 40007d8:	dec00104 	addi	sp,sp,4
 40007dc:	f800283a 	ret

040007e0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40007e0:	defff904 	addi	sp,sp,-28
 40007e4:	df000615 	stw	fp,24(sp)
 40007e8:	df000604 	addi	fp,sp,24
 40007ec:	e13ffc15 	stw	r4,-16(fp)
 40007f0:	e17ffd15 	stw	r5,-12(fp)
 40007f4:	e1bffe15 	stw	r6,-8(fp)
 40007f8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 40007fc:	e0bffc17 	ldw	r2,-16(fp)
 4000800:	10800017 	ldw	r2,0(r2)
 4000804:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
 4000808:	e0bffe17 	ldw	r2,-8(fp)
 400080c:	1007883a 	mov	r3,r2
 4000810:	e0bffd17 	ldw	r2,-12(fp)
 4000814:	10c5883a 	add	r2,r2,r3
 4000818:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 400081c:	00001106 	br	4000864 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000820:	e0bffb17 	ldw	r2,-20(fp)
 4000824:	10800104 	addi	r2,r2,4
 4000828:	10800037 	ldwio	r2,0(r2)
 400082c:	10bfffec 	andhi	r2,r2,65535
 4000830:	1005003a 	cmpeq	r2,r2,zero
 4000834:	10000b1e 	bne	r2,zero,4000864 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4000838:	e13ffb17 	ldw	r4,-20(fp)
 400083c:	e0bffd17 	ldw	r2,-12(fp)
 4000840:	10800003 	ldbu	r2,0(r2)
 4000844:	10c03fcc 	andi	r3,r2,255
 4000848:	18c0201c 	xori	r3,r3,128
 400084c:	18ffe004 	addi	r3,r3,-128
 4000850:	e0bffd17 	ldw	r2,-12(fp)
 4000854:	10800044 	addi	r2,r2,1
 4000858:	e0bffd15 	stw	r2,-12(fp)
 400085c:	2005883a 	mov	r2,r4
 4000860:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4000864:	e0fffd17 	ldw	r3,-12(fp)
 4000868:	e0bffa17 	ldw	r2,-24(fp)
 400086c:	18bfec36 	bltu	r3,r2,4000820 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4000870:	e0bffe17 	ldw	r2,-8(fp)
}
 4000874:	e037883a 	mov	sp,fp
 4000878:	df000017 	ldw	fp,0(sp)
 400087c:	dec00104 	addi	sp,sp,4
 4000880:	f800283a 	ret

04000884 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 4000884:	defffd04 	addi	sp,sp,-12
 4000888:	df000215 	stw	fp,8(sp)
 400088c:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 4000890:	00810034 	movhi	r2,1024
 4000894:	1087d104 	addi	r2,r2,8004
 4000898:	10800017 	ldw	r2,0(r2)
 400089c:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 40008a0:	00810034 	movhi	r2,1024
 40008a4:	1087d204 	addi	r2,r2,8008
 40008a8:	10800017 	ldw	r2,0(r2)
 40008ac:	1004c03a 	cmpne	r2,r2,zero
 40008b0:	1000031e 	bne	r2,zero,40008c0 <alt_timestamp_start+0x3c>
  {
    return -1;
 40008b4:	00bfffc4 	movi	r2,-1
 40008b8:	e0bfff15 	stw	r2,-4(fp)
 40008bc:	00001506 	br	4000914 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 40008c0:	e0bffe17 	ldw	r2,-8(fp)
 40008c4:	10800104 	addi	r2,r2,4
 40008c8:	1007883a 	mov	r3,r2
 40008cc:	00800204 	movi	r2,8
 40008d0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 40008d4:	e0bffe17 	ldw	r2,-8(fp)
 40008d8:	10800204 	addi	r2,r2,8
 40008dc:	1007883a 	mov	r3,r2
 40008e0:	00bfffd4 	movui	r2,65535
 40008e4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 40008e8:	e0bffe17 	ldw	r2,-8(fp)
 40008ec:	10800304 	addi	r2,r2,12
 40008f0:	1007883a 	mov	r3,r2
 40008f4:	00bfffd4 	movui	r2,65535
 40008f8:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 40008fc:	e0bffe17 	ldw	r2,-8(fp)
 4000900:	10800104 	addi	r2,r2,4
 4000904:	1007883a 	mov	r3,r2
 4000908:	00800104 	movi	r2,4
 400090c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 4000910:	e03fff15 	stw	zero,-4(fp)
 4000914:	e0bfff17 	ldw	r2,-4(fp)
}
 4000918:	e037883a 	mov	sp,fp
 400091c:	df000017 	ldw	fp,0(sp)
 4000920:	dec00104 	addi	sp,sp,4
 4000924:	f800283a 	ret

04000928 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 4000928:	defffb04 	addi	sp,sp,-20
 400092c:	df000415 	stw	fp,16(sp)
 4000930:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
 4000934:	00810034 	movhi	r2,1024
 4000938:	1087d104 	addi	r2,r2,8004
 400093c:	10800017 	ldw	r2,0(r2)
 4000940:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 4000944:	00810034 	movhi	r2,1024
 4000948:	1087d204 	addi	r2,r2,8008
 400094c:	10800017 	ldw	r2,0(r2)
 4000950:	1004c03a 	cmpne	r2,r2,zero
 4000954:	1000031e 	bne	r2,zero,4000964 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
 4000958:	00bfffc4 	movi	r2,-1
 400095c:	e0bfff15 	stw	r2,-4(fp)
 4000960:	00001306 	br	40009b0 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 4000964:	e0bffe17 	ldw	r2,-8(fp)
 4000968:	10800404 	addi	r2,r2,16
 400096c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 4000970:	e0bffe17 	ldw	r2,-8(fp)
 4000974:	10800404 	addi	r2,r2,16
 4000978:	10800037 	ldwio	r2,0(r2)
 400097c:	10bfffcc 	andi	r2,r2,65535
 4000980:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 4000984:	e0bffe17 	ldw	r2,-8(fp)
 4000988:	10800504 	addi	r2,r2,20
 400098c:	10800037 	ldwio	r2,0(r2)
 4000990:	10bfffcc 	andi	r2,r2,65535
 4000994:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 4000998:	e0bffc17 	ldw	r2,-16(fp)
 400099c:	1006943a 	slli	r3,r2,16
 40009a0:	e0bffd17 	ldw	r2,-12(fp)
 40009a4:	1884b03a 	or	r2,r3,r2
 40009a8:	0084303a 	nor	r2,zero,r2
 40009ac:	e0bfff15 	stw	r2,-4(fp)
 40009b0:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
 40009b4:	e037883a 	mov	sp,fp
 40009b8:	df000017 	ldw	fp,0(sp)
 40009bc:	dec00104 	addi	sp,sp,4
 40009c0:	f800283a 	ret

040009c4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 40009c4:	deffff04 	addi	sp,sp,-4
 40009c8:	df000015 	stw	fp,0(sp)
 40009cc:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 40009d0:	00810034 	movhi	r2,1024
 40009d4:	1087d204 	addi	r2,r2,8008
 40009d8:	10800017 	ldw	r2,0(r2)
}
 40009dc:	e037883a 	mov	sp,fp
 40009e0:	df000017 	ldw	fp,0(sp)
 40009e4:	dec00104 	addi	sp,sp,4
 40009e8:	f800283a 	ret

040009ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40009ec:	defff804 	addi	sp,sp,-32
 40009f0:	dfc00715 	stw	ra,28(sp)
 40009f4:	df000615 	stw	fp,24(sp)
 40009f8:	df000604 	addi	fp,sp,24
 40009fc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4000a00:	e0bffc17 	ldw	r2,-16(fp)
 4000a04:	1004803a 	cmplt	r2,r2,zero
 4000a08:	1000081e 	bne	r2,zero,4000a2c <close+0x40>
 4000a0c:	e0bffc17 	ldw	r2,-16(fp)
 4000a10:	10800324 	muli	r2,r2,12
 4000a14:	1007883a 	mov	r3,r2
 4000a18:	00810034 	movhi	r2,1024
 4000a1c:	1086ae04 	addi	r2,r2,6840
 4000a20:	1887883a 	add	r3,r3,r2
 4000a24:	e0ffff15 	stw	r3,-4(fp)
 4000a28:	00000106 	br	4000a30 <close+0x44>
 4000a2c:	e03fff15 	stw	zero,-4(fp)
 4000a30:	e0bfff17 	ldw	r2,-4(fp)
 4000a34:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4000a38:	e0bffb17 	ldw	r2,-20(fp)
 4000a3c:	1005003a 	cmpeq	r2,r2,zero
 4000a40:	10001d1e 	bne	r2,zero,4000ab8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4000a44:	e0bffb17 	ldw	r2,-20(fp)
 4000a48:	10800017 	ldw	r2,0(r2)
 4000a4c:	10800417 	ldw	r2,16(r2)
 4000a50:	1005003a 	cmpeq	r2,r2,zero
 4000a54:	1000071e 	bne	r2,zero,4000a74 <close+0x88>
 4000a58:	e0bffb17 	ldw	r2,-20(fp)
 4000a5c:	10800017 	ldw	r2,0(r2)
 4000a60:	10800417 	ldw	r2,16(r2)
 4000a64:	e13ffb17 	ldw	r4,-20(fp)
 4000a68:	103ee83a 	callr	r2
 4000a6c:	e0bffe15 	stw	r2,-8(fp)
 4000a70:	00000106 	br	4000a78 <close+0x8c>
 4000a74:	e03ffe15 	stw	zero,-8(fp)
 4000a78:	e0bffe17 	ldw	r2,-8(fp)
 4000a7c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4000a80:	e13ffc17 	ldw	r4,-16(fp)
 4000a84:	40011c40 	call	40011c4 <alt_release_fd>
    if (rval < 0)
 4000a88:	e0bffa17 	ldw	r2,-24(fp)
 4000a8c:	1004403a 	cmpge	r2,r2,zero
 4000a90:	1000071e 	bne	r2,zero,4000ab0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 4000a94:	4000ae80 	call	4000ae8 <alt_get_errno>
 4000a98:	e0fffa17 	ldw	r3,-24(fp)
 4000a9c:	00c7c83a 	sub	r3,zero,r3
 4000aa0:	10c00015 	stw	r3,0(r2)
      return -1;
 4000aa4:	00bfffc4 	movi	r2,-1
 4000aa8:	e0bffd15 	stw	r2,-12(fp)
 4000aac:	00000806 	br	4000ad0 <close+0xe4>
    }
    return 0;
 4000ab0:	e03ffd15 	stw	zero,-12(fp)
 4000ab4:	00000606 	br	4000ad0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4000ab8:	4000ae80 	call	4000ae8 <alt_get_errno>
 4000abc:	1007883a 	mov	r3,r2
 4000ac0:	00801444 	movi	r2,81
 4000ac4:	18800015 	stw	r2,0(r3)
    return -1;
 4000ac8:	00bfffc4 	movi	r2,-1
 4000acc:	e0bffd15 	stw	r2,-12(fp)
 4000ad0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4000ad4:	e037883a 	mov	sp,fp
 4000ad8:	dfc00117 	ldw	ra,4(sp)
 4000adc:	df000017 	ldw	fp,0(sp)
 4000ae0:	dec00204 	addi	sp,sp,8
 4000ae4:	f800283a 	ret

04000ae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000ae8:	defffd04 	addi	sp,sp,-12
 4000aec:	dfc00215 	stw	ra,8(sp)
 4000af0:	df000115 	stw	fp,4(sp)
 4000af4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4000af8:	00810034 	movhi	r2,1024
 4000afc:	10871604 	addi	r2,r2,7256
 4000b00:	10800017 	ldw	r2,0(r2)
 4000b04:	1005003a 	cmpeq	r2,r2,zero
 4000b08:	1000061e 	bne	r2,zero,4000b24 <alt_get_errno+0x3c>
 4000b0c:	00810034 	movhi	r2,1024
 4000b10:	10871604 	addi	r2,r2,7256
 4000b14:	10800017 	ldw	r2,0(r2)
 4000b18:	103ee83a 	callr	r2
 4000b1c:	e0bfff15 	stw	r2,-4(fp)
 4000b20:	00000306 	br	4000b30 <alt_get_errno+0x48>
 4000b24:	00810034 	movhi	r2,1024
 4000b28:	1087cd04 	addi	r2,r2,7988
 4000b2c:	e0bfff15 	stw	r2,-4(fp)
 4000b30:	e0bfff17 	ldw	r2,-4(fp)
}
 4000b34:	e037883a 	mov	sp,fp
 4000b38:	dfc00117 	ldw	ra,4(sp)
 4000b3c:	df000017 	ldw	fp,0(sp)
 4000b40:	dec00204 	addi	sp,sp,8
 4000b44:	f800283a 	ret

04000b48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4000b48:	defffe04 	addi	sp,sp,-8
 4000b4c:	df000115 	stw	fp,4(sp)
 4000b50:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000b54:	e03fff15 	stw	zero,-4(fp)
 4000b58:	00000506 	br	4000b70 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4000b5c:	e0bfff17 	ldw	r2,-4(fp)
 4000b60:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000b64:	e0bfff17 	ldw	r2,-4(fp)
 4000b68:	10800804 	addi	r2,r2,32
 4000b6c:	e0bfff15 	stw	r2,-4(fp)
 4000b70:	e0bfff17 	ldw	r2,-4(fp)
 4000b74:	10820030 	cmpltui	r2,r2,2048
 4000b78:	103ff81e 	bne	r2,zero,4000b5c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4000b7c:	e037883a 	mov	sp,fp
 4000b80:	df000017 	ldw	fp,0(sp)
 4000b84:	dec00104 	addi	sp,sp,4
 4000b88:	f800283a 	ret

04000b8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4000b8c:	defffc04 	addi	sp,sp,-16
 4000b90:	df000315 	stw	fp,12(sp)
 4000b94:	df000304 	addi	fp,sp,12
 4000b98:	e13ffd15 	stw	r4,-12(fp)
 4000b9c:	e17ffe15 	stw	r5,-8(fp)
 4000ba0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4000ba4:	e0bfff17 	ldw	r2,-4(fp)
}
 4000ba8:	e037883a 	mov	sp,fp
 4000bac:	df000017 	ldw	fp,0(sp)
 4000bb0:	dec00104 	addi	sp,sp,4
 4000bb4:	f800283a 	ret

04000bb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4000bb8:	defff904 	addi	sp,sp,-28
 4000bbc:	dfc00615 	stw	ra,24(sp)
 4000bc0:	df000515 	stw	fp,20(sp)
 4000bc4:	df000504 	addi	fp,sp,20
 4000bc8:	e13ffd15 	stw	r4,-12(fp)
 4000bcc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4000bd0:	e0bffd17 	ldw	r2,-12(fp)
 4000bd4:	1005003a 	cmpeq	r2,r2,zero
 4000bd8:	1000041e 	bne	r2,zero,4000bec <alt_dev_llist_insert+0x34>
 4000bdc:	e0bffd17 	ldw	r2,-12(fp)
 4000be0:	10800217 	ldw	r2,8(r2)
 4000be4:	1004c03a 	cmpne	r2,r2,zero
 4000be8:	1000071e 	bne	r2,zero,4000c08 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4000bec:	4000c6c0 	call	4000c6c <alt_get_errno>
 4000bf0:	1007883a 	mov	r3,r2
 4000bf4:	00800584 	movi	r2,22
 4000bf8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4000bfc:	00bffa84 	movi	r2,-22
 4000c00:	e0bfff15 	stw	r2,-4(fp)
 4000c04:	00001306 	br	4000c54 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4000c08:	e0fffd17 	ldw	r3,-12(fp)
 4000c0c:	e0bffe17 	ldw	r2,-8(fp)
 4000c10:	e0bffb15 	stw	r2,-20(fp)
 4000c14:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4000c18:	e0fffc17 	ldw	r3,-16(fp)
 4000c1c:	e0bffb17 	ldw	r2,-20(fp)
 4000c20:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4000c24:	e0bffb17 	ldw	r2,-20(fp)
 4000c28:	10c00017 	ldw	r3,0(r2)
 4000c2c:	e0bffc17 	ldw	r2,-16(fp)
 4000c30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4000c34:	e0bffb17 	ldw	r2,-20(fp)
 4000c38:	10c00017 	ldw	r3,0(r2)
 4000c3c:	e0bffc17 	ldw	r2,-16(fp)
 4000c40:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4000c44:	e0fffb17 	ldw	r3,-20(fp)
 4000c48:	e0bffc17 	ldw	r2,-16(fp)
 4000c4c:	18800015 	stw	r2,0(r3)

  return 0;  
 4000c50:	e03fff15 	stw	zero,-4(fp)
 4000c54:	e0bfff17 	ldw	r2,-4(fp)
}
 4000c58:	e037883a 	mov	sp,fp
 4000c5c:	dfc00117 	ldw	ra,4(sp)
 4000c60:	df000017 	ldw	fp,0(sp)
 4000c64:	dec00204 	addi	sp,sp,8
 4000c68:	f800283a 	ret

04000c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000c6c:	defffd04 	addi	sp,sp,-12
 4000c70:	dfc00215 	stw	ra,8(sp)
 4000c74:	df000115 	stw	fp,4(sp)
 4000c78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4000c7c:	00810034 	movhi	r2,1024
 4000c80:	10871604 	addi	r2,r2,7256
 4000c84:	10800017 	ldw	r2,0(r2)
 4000c88:	1005003a 	cmpeq	r2,r2,zero
 4000c8c:	1000061e 	bne	r2,zero,4000ca8 <alt_get_errno+0x3c>
 4000c90:	00810034 	movhi	r2,1024
 4000c94:	10871604 	addi	r2,r2,7256
 4000c98:	10800017 	ldw	r2,0(r2)
 4000c9c:	103ee83a 	callr	r2
 4000ca0:	e0bfff15 	stw	r2,-4(fp)
 4000ca4:	00000306 	br	4000cb4 <alt_get_errno+0x48>
 4000ca8:	00810034 	movhi	r2,1024
 4000cac:	1087cd04 	addi	r2,r2,7988
 4000cb0:	e0bfff15 	stw	r2,-4(fp)
 4000cb4:	e0bfff17 	ldw	r2,-4(fp)
}
 4000cb8:	e037883a 	mov	sp,fp
 4000cbc:	dfc00117 	ldw	ra,4(sp)
 4000cc0:	df000017 	ldw	fp,0(sp)
 4000cc4:	dec00204 	addi	sp,sp,8
 4000cc8:	f800283a 	ret

04000ccc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4000ccc:	defffd04 	addi	sp,sp,-12
 4000cd0:	dfc00215 	stw	ra,8(sp)
 4000cd4:	df000115 	stw	fp,4(sp)
 4000cd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4000cdc:	00bfff04 	movi	r2,-4
 4000ce0:	00c10034 	movhi	r3,1024
 4000ce4:	18c65004 	addi	r3,r3,6464
 4000ce8:	1885883a 	add	r2,r3,r2
 4000cec:	e0bfff15 	stw	r2,-4(fp)
 4000cf0:	00000606 	br	4000d0c <_do_ctors+0x40>
        (*ctor) (); 
 4000cf4:	e0bfff17 	ldw	r2,-4(fp)
 4000cf8:	10800017 	ldw	r2,0(r2)
 4000cfc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4000d00:	e0bfff17 	ldw	r2,-4(fp)
 4000d04:	10bfff04 	addi	r2,r2,-4
 4000d08:	e0bfff15 	stw	r2,-4(fp)
 4000d0c:	e0ffff17 	ldw	r3,-4(fp)
 4000d10:	00810034 	movhi	r2,1024
 4000d14:	10864f04 	addi	r2,r2,6460
 4000d18:	18bff62e 	bgeu	r3,r2,4000cf4 <_do_ctors+0x28>
        (*ctor) (); 
}
 4000d1c:	e037883a 	mov	sp,fp
 4000d20:	dfc00117 	ldw	ra,4(sp)
 4000d24:	df000017 	ldw	fp,0(sp)
 4000d28:	dec00204 	addi	sp,sp,8
 4000d2c:	f800283a 	ret

04000d30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4000d30:	defffd04 	addi	sp,sp,-12
 4000d34:	dfc00215 	stw	ra,8(sp)
 4000d38:	df000115 	stw	fp,4(sp)
 4000d3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4000d40:	00bfff04 	movi	r2,-4
 4000d44:	00c10034 	movhi	r3,1024
 4000d48:	18c65004 	addi	r3,r3,6464
 4000d4c:	1885883a 	add	r2,r3,r2
 4000d50:	e0bfff15 	stw	r2,-4(fp)
 4000d54:	00000606 	br	4000d70 <_do_dtors+0x40>
        (*dtor) (); 
 4000d58:	e0bfff17 	ldw	r2,-4(fp)
 4000d5c:	10800017 	ldw	r2,0(r2)
 4000d60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4000d64:	e0bfff17 	ldw	r2,-4(fp)
 4000d68:	10bfff04 	addi	r2,r2,-4
 4000d6c:	e0bfff15 	stw	r2,-4(fp)
 4000d70:	e0ffff17 	ldw	r3,-4(fp)
 4000d74:	00810034 	movhi	r2,1024
 4000d78:	10865004 	addi	r2,r2,6464
 4000d7c:	18bff62e 	bgeu	r3,r2,4000d58 <_do_dtors+0x28>
        (*dtor) (); 
}
 4000d80:	e037883a 	mov	sp,fp
 4000d84:	dfc00117 	ldw	ra,4(sp)
 4000d88:	df000017 	ldw	fp,0(sp)
 4000d8c:	dec00204 	addi	sp,sp,8
 4000d90:	f800283a 	ret

04000d94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4000d94:	defffe04 	addi	sp,sp,-8
 4000d98:	dfc00115 	stw	ra,4(sp)
 4000d9c:	df000015 	stw	fp,0(sp)
 4000da0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4000da4:	0009883a 	mov	r4,zero
 4000da8:	01420004 	movi	r5,2048
 4000dac:	40014b00 	call	40014b0 <alt_icache_flush>
#endif
}
 4000db0:	e037883a 	mov	sp,fp
 4000db4:	dfc00117 	ldw	ra,4(sp)
 4000db8:	df000017 	ldw	fp,0(sp)
 4000dbc:	dec00204 	addi	sp,sp,8
 4000dc0:	f800283a 	ret

04000dc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4000dc4:	defff904 	addi	sp,sp,-28
 4000dc8:	dfc00615 	stw	ra,24(sp)
 4000dcc:	df000515 	stw	fp,20(sp)
 4000dd0:	df000504 	addi	fp,sp,20
 4000dd4:	e13ffc15 	stw	r4,-16(fp)
 4000dd8:	e17ffd15 	stw	r5,-12(fp)
 4000ddc:	e1bffe15 	stw	r6,-8(fp)
 4000de0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4000de4:	e13ffd17 	ldw	r4,-12(fp)
 4000de8:	e17ffe17 	ldw	r5,-8(fp)
 4000dec:	e1bfff17 	ldw	r6,-4(fp)
 4000df0:	4000fdc0 	call	4000fdc <open>
 4000df4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4000df8:	e0bffb17 	ldw	r2,-20(fp)
 4000dfc:	1004803a 	cmplt	r2,r2,zero
 4000e00:	10001c1e 	bne	r2,zero,4000e74 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 4000e04:	e0bffb17 	ldw	r2,-20(fp)
 4000e08:	00c10034 	movhi	r3,1024
 4000e0c:	18c6ae04 	addi	r3,r3,6840
 4000e10:	10800324 	muli	r2,r2,12
 4000e14:	10c5883a 	add	r2,r2,r3
 4000e18:	10c00017 	ldw	r3,0(r2)
 4000e1c:	e0bffc17 	ldw	r2,-16(fp)
 4000e20:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4000e24:	e0bffb17 	ldw	r2,-20(fp)
 4000e28:	00c10034 	movhi	r3,1024
 4000e2c:	18c6ae04 	addi	r3,r3,6840
 4000e30:	10800324 	muli	r2,r2,12
 4000e34:	10c5883a 	add	r2,r2,r3
 4000e38:	10800104 	addi	r2,r2,4
 4000e3c:	10c00017 	ldw	r3,0(r2)
 4000e40:	e0bffc17 	ldw	r2,-16(fp)
 4000e44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4000e48:	e0bffb17 	ldw	r2,-20(fp)
 4000e4c:	00c10034 	movhi	r3,1024
 4000e50:	18c6ae04 	addi	r3,r3,6840
 4000e54:	10800324 	muli	r2,r2,12
 4000e58:	10c5883a 	add	r2,r2,r3
 4000e5c:	10800204 	addi	r2,r2,8
 4000e60:	10c00017 	ldw	r3,0(r2)
 4000e64:	e0bffc17 	ldw	r2,-16(fp)
 4000e68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4000e6c:	e13ffb17 	ldw	r4,-20(fp)
 4000e70:	40011c40 	call	40011c4 <alt_release_fd>
  }
} 
 4000e74:	e037883a 	mov	sp,fp
 4000e78:	dfc00117 	ldw	ra,4(sp)
 4000e7c:	df000017 	ldw	fp,0(sp)
 4000e80:	dec00204 	addi	sp,sp,8
 4000e84:	f800283a 	ret

04000e88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4000e88:	defffb04 	addi	sp,sp,-20
 4000e8c:	dfc00415 	stw	ra,16(sp)
 4000e90:	df000315 	stw	fp,12(sp)
 4000e94:	df000304 	addi	fp,sp,12
 4000e98:	e13ffd15 	stw	r4,-12(fp)
 4000e9c:	e17ffe15 	stw	r5,-8(fp)
 4000ea0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4000ea4:	01010034 	movhi	r4,1024
 4000ea8:	2106b104 	addi	r4,r4,6852
 4000eac:	e17ffd17 	ldw	r5,-12(fp)
 4000eb0:	01800044 	movi	r6,1
 4000eb4:	01c07fc4 	movi	r7,511
 4000eb8:	4000dc40 	call	4000dc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4000ebc:	01010034 	movhi	r4,1024
 4000ec0:	2106ae04 	addi	r4,r4,6840
 4000ec4:	e17ffe17 	ldw	r5,-8(fp)
 4000ec8:	000d883a 	mov	r6,zero
 4000ecc:	01c07fc4 	movi	r7,511
 4000ed0:	4000dc40 	call	4000dc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4000ed4:	01010034 	movhi	r4,1024
 4000ed8:	2106b404 	addi	r4,r4,6864
 4000edc:	e17fff17 	ldw	r5,-4(fp)
 4000ee0:	01800044 	movi	r6,1
 4000ee4:	01c07fc4 	movi	r7,511
 4000ee8:	4000dc40 	call	4000dc4 <alt_open_fd>
}  
 4000eec:	e037883a 	mov	sp,fp
 4000ef0:	dfc00117 	ldw	ra,4(sp)
 4000ef4:	df000017 	ldw	fp,0(sp)
 4000ef8:	dec00204 	addi	sp,sp,8
 4000efc:	f800283a 	ret

04000f00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4000f00:	defffc04 	addi	sp,sp,-16
 4000f04:	df000315 	stw	fp,12(sp)
 4000f08:	df000304 	addi	fp,sp,12
 4000f0c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4000f10:	e0bffe17 	ldw	r2,-8(fp)
 4000f14:	10800217 	ldw	r2,8(r2)
 4000f18:	10d00034 	orhi	r3,r2,16384
 4000f1c:	e0bffe17 	ldw	r2,-8(fp)
 4000f20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4000f24:	e03ffd15 	stw	zero,-12(fp)
 4000f28:	00002006 	br	4000fac <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4000f2c:	e0bffd17 	ldw	r2,-12(fp)
 4000f30:	00c10034 	movhi	r3,1024
 4000f34:	18c6ae04 	addi	r3,r3,6840
 4000f38:	10800324 	muli	r2,r2,12
 4000f3c:	10c5883a 	add	r2,r2,r3
 4000f40:	10c00017 	ldw	r3,0(r2)
 4000f44:	e0bffe17 	ldw	r2,-8(fp)
 4000f48:	10800017 	ldw	r2,0(r2)
 4000f4c:	1880141e 	bne	r3,r2,4000fa0 <alt_file_locked+0xa0>
 4000f50:	e0bffd17 	ldw	r2,-12(fp)
 4000f54:	00c10034 	movhi	r3,1024
 4000f58:	18c6ae04 	addi	r3,r3,6840
 4000f5c:	10800324 	muli	r2,r2,12
 4000f60:	10c5883a 	add	r2,r2,r3
 4000f64:	10800204 	addi	r2,r2,8
 4000f68:	10800017 	ldw	r2,0(r2)
 4000f6c:	1004403a 	cmpge	r2,r2,zero
 4000f70:	10000b1e 	bne	r2,zero,4000fa0 <alt_file_locked+0xa0>
 4000f74:	e0bffd17 	ldw	r2,-12(fp)
 4000f78:	10800324 	muli	r2,r2,12
 4000f7c:	1007883a 	mov	r3,r2
 4000f80:	00810034 	movhi	r2,1024
 4000f84:	1086ae04 	addi	r2,r2,6840
 4000f88:	1887883a 	add	r3,r3,r2
 4000f8c:	e0bffe17 	ldw	r2,-8(fp)
 4000f90:	18800326 	beq	r3,r2,4000fa0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4000f94:	00bffcc4 	movi	r2,-13
 4000f98:	e0bfff15 	stw	r2,-4(fp)
 4000f9c:	00000a06 	br	4000fc8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4000fa0:	e0bffd17 	ldw	r2,-12(fp)
 4000fa4:	10800044 	addi	r2,r2,1
 4000fa8:	e0bffd15 	stw	r2,-12(fp)
 4000fac:	00810034 	movhi	r2,1024
 4000fb0:	10871504 	addi	r2,r2,7252
 4000fb4:	10800017 	ldw	r2,0(r2)
 4000fb8:	1007883a 	mov	r3,r2
 4000fbc:	e0bffd17 	ldw	r2,-12(fp)
 4000fc0:	18bfda2e 	bgeu	r3,r2,4000f2c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4000fc4:	e03fff15 	stw	zero,-4(fp)
 4000fc8:	e0bfff17 	ldw	r2,-4(fp)
}
 4000fcc:	e037883a 	mov	sp,fp
 4000fd0:	df000017 	ldw	fp,0(sp)
 4000fd4:	dec00104 	addi	sp,sp,4
 4000fd8:	f800283a 	ret

04000fdc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4000fdc:	defff404 	addi	sp,sp,-48
 4000fe0:	dfc00b15 	stw	ra,44(sp)
 4000fe4:	df000a15 	stw	fp,40(sp)
 4000fe8:	df000a04 	addi	fp,sp,40
 4000fec:	e13ffb15 	stw	r4,-20(fp)
 4000ff0:	e17ffc15 	stw	r5,-16(fp)
 4000ff4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4000ff8:	00bfffc4 	movi	r2,-1
 4000ffc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4001000:	00bffb44 	movi	r2,-19
 4001004:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 4001008:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400100c:	e13ffb17 	ldw	r4,-20(fp)
 4001010:	01410034 	movhi	r5,1024
 4001014:	29471304 	addi	r5,r5,7244
 4001018:	40012440 	call	4001244 <alt_find_dev>
 400101c:	e0bffa15 	stw	r2,-24(fp)
 4001020:	e0bffa17 	ldw	r2,-24(fp)
 4001024:	1004c03a 	cmpne	r2,r2,zero
 4001028:	1000051e 	bne	r2,zero,4001040 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400102c:	e13ffb17 	ldw	r4,-20(fp)
 4001030:	40012d80 	call	40012d8 <alt_find_file>
 4001034:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 4001038:	00800044 	movi	r2,1
 400103c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4001040:	e0bffa17 	ldw	r2,-24(fp)
 4001044:	1005003a 	cmpeq	r2,r2,zero
 4001048:	1000301e 	bne	r2,zero,400110c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400104c:	e13ffa17 	ldw	r4,-24(fp)
 4001050:	40013f80 	call	40013f8 <alt_get_fd>
 4001054:	e0bff815 	stw	r2,-32(fp)
 4001058:	e0bff817 	ldw	r2,-32(fp)
 400105c:	1004403a 	cmpge	r2,r2,zero
 4001060:	1000031e 	bne	r2,zero,4001070 <open+0x94>
    {
      status = index;
 4001064:	e0bff817 	ldw	r2,-32(fp)
 4001068:	e0bff715 	stw	r2,-36(fp)
 400106c:	00002906 	br	4001114 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 4001070:	e0bff817 	ldw	r2,-32(fp)
 4001074:	10800324 	muli	r2,r2,12
 4001078:	1007883a 	mov	r3,r2
 400107c:	00810034 	movhi	r2,1024
 4001080:	1086ae04 	addi	r2,r2,6840
 4001084:	1885883a 	add	r2,r3,r2
 4001088:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400108c:	e0fffc17 	ldw	r3,-16(fp)
 4001090:	00900034 	movhi	r2,16384
 4001094:	10bfffc4 	addi	r2,r2,-1
 4001098:	1886703a 	and	r3,r3,r2
 400109c:	e0bff917 	ldw	r2,-28(fp)
 40010a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40010a4:	e0bff617 	ldw	r2,-40(fp)
 40010a8:	1004c03a 	cmpne	r2,r2,zero
 40010ac:	1000061e 	bne	r2,zero,40010c8 <open+0xec>
 40010b0:	e13ff917 	ldw	r4,-28(fp)
 40010b4:	4000f000 	call	4000f00 <alt_file_locked>
 40010b8:	e0bff715 	stw	r2,-36(fp)
 40010bc:	e0bff717 	ldw	r2,-36(fp)
 40010c0:	1004803a 	cmplt	r2,r2,zero
 40010c4:	1000131e 	bne	r2,zero,4001114 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40010c8:	e0bffa17 	ldw	r2,-24(fp)
 40010cc:	10800317 	ldw	r2,12(r2)
 40010d0:	1005003a 	cmpeq	r2,r2,zero
 40010d4:	1000091e 	bne	r2,zero,40010fc <open+0x120>
 40010d8:	e0bffa17 	ldw	r2,-24(fp)
 40010dc:	10800317 	ldw	r2,12(r2)
 40010e0:	e13ff917 	ldw	r4,-28(fp)
 40010e4:	e17ffb17 	ldw	r5,-20(fp)
 40010e8:	e1bffc17 	ldw	r6,-16(fp)
 40010ec:	e1fffd17 	ldw	r7,-12(fp)
 40010f0:	103ee83a 	callr	r2
 40010f4:	e0bfff15 	stw	r2,-4(fp)
 40010f8:	00000106 	br	4001100 <open+0x124>
 40010fc:	e03fff15 	stw	zero,-4(fp)
 4001100:	e0bfff17 	ldw	r2,-4(fp)
 4001104:	e0bff715 	stw	r2,-36(fp)
 4001108:	00000206 	br	4001114 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400110c:	00bffb44 	movi	r2,-19
 4001110:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4001114:	e0bff717 	ldw	r2,-36(fp)
 4001118:	1004403a 	cmpge	r2,r2,zero
 400111c:	1000091e 	bne	r2,zero,4001144 <open+0x168>
  {
    alt_release_fd (index);  
 4001120:	e13ff817 	ldw	r4,-32(fp)
 4001124:	40011c40 	call	40011c4 <alt_release_fd>
    ALT_ERRNO = -status;
 4001128:	40011640 	call	4001164 <alt_get_errno>
 400112c:	e0fff717 	ldw	r3,-36(fp)
 4001130:	00c7c83a 	sub	r3,zero,r3
 4001134:	10c00015 	stw	r3,0(r2)
    return -1;
 4001138:	00bfffc4 	movi	r2,-1
 400113c:	e0bffe15 	stw	r2,-8(fp)
 4001140:	00000206 	br	400114c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 4001144:	e0bff817 	ldw	r2,-32(fp)
 4001148:	e0bffe15 	stw	r2,-8(fp)
 400114c:	e0bffe17 	ldw	r2,-8(fp)
}
 4001150:	e037883a 	mov	sp,fp
 4001154:	dfc00117 	ldw	ra,4(sp)
 4001158:	df000017 	ldw	fp,0(sp)
 400115c:	dec00204 	addi	sp,sp,8
 4001160:	f800283a 	ret

04001164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001164:	defffd04 	addi	sp,sp,-12
 4001168:	dfc00215 	stw	ra,8(sp)
 400116c:	df000115 	stw	fp,4(sp)
 4001170:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4001174:	00810034 	movhi	r2,1024
 4001178:	10871604 	addi	r2,r2,7256
 400117c:	10800017 	ldw	r2,0(r2)
 4001180:	1005003a 	cmpeq	r2,r2,zero
 4001184:	1000061e 	bne	r2,zero,40011a0 <alt_get_errno+0x3c>
 4001188:	00810034 	movhi	r2,1024
 400118c:	10871604 	addi	r2,r2,7256
 4001190:	10800017 	ldw	r2,0(r2)
 4001194:	103ee83a 	callr	r2
 4001198:	e0bfff15 	stw	r2,-4(fp)
 400119c:	00000306 	br	40011ac <alt_get_errno+0x48>
 40011a0:	00810034 	movhi	r2,1024
 40011a4:	1087cd04 	addi	r2,r2,7988
 40011a8:	e0bfff15 	stw	r2,-4(fp)
 40011ac:	e0bfff17 	ldw	r2,-4(fp)
}
 40011b0:	e037883a 	mov	sp,fp
 40011b4:	dfc00117 	ldw	ra,4(sp)
 40011b8:	df000017 	ldw	fp,0(sp)
 40011bc:	dec00204 	addi	sp,sp,8
 40011c0:	f800283a 	ret

040011c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40011c4:	defffe04 	addi	sp,sp,-8
 40011c8:	df000115 	stw	fp,4(sp)
 40011cc:	df000104 	addi	fp,sp,4
 40011d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40011d4:	e0bfff17 	ldw	r2,-4(fp)
 40011d8:	108000d0 	cmplti	r2,r2,3
 40011dc:	10000d1e 	bne	r2,zero,4001214 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40011e0:	e0bfff17 	ldw	r2,-4(fp)
 40011e4:	00c10034 	movhi	r3,1024
 40011e8:	18c6ae04 	addi	r3,r3,6840
 40011ec:	10800324 	muli	r2,r2,12
 40011f0:	10c5883a 	add	r2,r2,r3
 40011f4:	10800204 	addi	r2,r2,8
 40011f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40011fc:	e0bfff17 	ldw	r2,-4(fp)
 4001200:	00c10034 	movhi	r3,1024
 4001204:	18c6ae04 	addi	r3,r3,6840
 4001208:	10800324 	muli	r2,r2,12
 400120c:	10c5883a 	add	r2,r2,r3
 4001210:	10000015 	stw	zero,0(r2)
  }
}
 4001214:	e037883a 	mov	sp,fp
 4001218:	df000017 	ldw	fp,0(sp)
 400121c:	dec00104 	addi	sp,sp,4
 4001220:	f800283a 	ret

04001224 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4001224:	deffff04 	addi	sp,sp,-4
 4001228:	df000015 	stw	fp,0(sp)
 400122c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4001230:	000170fa 	wrctl	ienable,zero
}
 4001234:	e037883a 	mov	sp,fp
 4001238:	df000017 	ldw	fp,0(sp)
 400123c:	dec00104 	addi	sp,sp,4
 4001240:	f800283a 	ret

04001244 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001244:	defff904 	addi	sp,sp,-28
 4001248:	dfc00615 	stw	ra,24(sp)
 400124c:	df000515 	stw	fp,20(sp)
 4001250:	df000504 	addi	fp,sp,20
 4001254:	e13ffd15 	stw	r4,-12(fp)
 4001258:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400125c:	e0bffe17 	ldw	r2,-8(fp)
 4001260:	10800017 	ldw	r2,0(r2)
 4001264:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4001268:	e13ffd17 	ldw	r4,-12(fp)
 400126c:	400013c0 	call	400013c <strlen>
 4001270:	10800044 	addi	r2,r2,1
 4001274:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001278:	00000d06 	br	40012b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400127c:	e0bffc17 	ldw	r2,-16(fp)
 4001280:	11000217 	ldw	r4,8(r2)
 4001284:	e1bffb17 	ldw	r6,-20(fp)
 4001288:	e17ffd17 	ldw	r5,-12(fp)
 400128c:	40015740 	call	4001574 <memcmp>
 4001290:	1004c03a 	cmpne	r2,r2,zero
 4001294:	1000031e 	bne	r2,zero,40012a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4001298:	e0bffc17 	ldw	r2,-16(fp)
 400129c:	e0bfff15 	stw	r2,-4(fp)
 40012a0:	00000706 	br	40012c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40012a4:	e0bffc17 	ldw	r2,-16(fp)
 40012a8:	10800017 	ldw	r2,0(r2)
 40012ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40012b0:	e0fffe17 	ldw	r3,-8(fp)
 40012b4:	e0bffc17 	ldw	r2,-16(fp)
 40012b8:	10fff01e 	bne	r2,r3,400127c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40012bc:	e03fff15 	stw	zero,-4(fp)
 40012c0:	e0bfff17 	ldw	r2,-4(fp)
}
 40012c4:	e037883a 	mov	sp,fp
 40012c8:	dfc00117 	ldw	ra,4(sp)
 40012cc:	df000017 	ldw	fp,0(sp)
 40012d0:	dec00204 	addi	sp,sp,8
 40012d4:	f800283a 	ret

040012d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40012d8:	defffa04 	addi	sp,sp,-24
 40012dc:	dfc00515 	stw	ra,20(sp)
 40012e0:	df000415 	stw	fp,16(sp)
 40012e4:	df000404 	addi	fp,sp,16
 40012e8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40012ec:	00810034 	movhi	r2,1024
 40012f0:	10871104 	addi	r2,r2,7236
 40012f4:	10800017 	ldw	r2,0(r2)
 40012f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40012fc:	00003306 	br	40013cc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4001300:	e0bffd17 	ldw	r2,-12(fp)
 4001304:	11000217 	ldw	r4,8(r2)
 4001308:	400013c0 	call	400013c <strlen>
 400130c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4001310:	e0bffd17 	ldw	r2,-12(fp)
 4001314:	10c00217 	ldw	r3,8(r2)
 4001318:	e0bffc17 	ldw	r2,-16(fp)
 400131c:	1885883a 	add	r2,r3,r2
 4001320:	10bfffc4 	addi	r2,r2,-1
 4001324:	10800003 	ldbu	r2,0(r2)
 4001328:	10803fcc 	andi	r2,r2,255
 400132c:	1080201c 	xori	r2,r2,128
 4001330:	10bfe004 	addi	r2,r2,-128
 4001334:	10800bd8 	cmpnei	r2,r2,47
 4001338:	1000031e 	bne	r2,zero,4001348 <alt_find_file+0x70>
    {
      len -= 1;
 400133c:	e0bffc17 	ldw	r2,-16(fp)
 4001340:	10bfffc4 	addi	r2,r2,-1
 4001344:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4001348:	e0bffc17 	ldw	r2,-16(fp)
 400134c:	1007883a 	mov	r3,r2
 4001350:	e0bffe17 	ldw	r2,-8(fp)
 4001354:	1885883a 	add	r2,r3,r2
 4001358:	10800003 	ldbu	r2,0(r2)
 400135c:	10803fcc 	andi	r2,r2,255
 4001360:	1080201c 	xori	r2,r2,128
 4001364:	10bfe004 	addi	r2,r2,-128
 4001368:	10800be0 	cmpeqi	r2,r2,47
 400136c:	10000a1e 	bne	r2,zero,4001398 <alt_find_file+0xc0>
 4001370:	e0bffc17 	ldw	r2,-16(fp)
 4001374:	1007883a 	mov	r3,r2
 4001378:	e0bffe17 	ldw	r2,-8(fp)
 400137c:	1885883a 	add	r2,r3,r2
 4001380:	10800003 	ldbu	r2,0(r2)
 4001384:	10803fcc 	andi	r2,r2,255
 4001388:	1080201c 	xori	r2,r2,128
 400138c:	10bfe004 	addi	r2,r2,-128
 4001390:	1004c03a 	cmpne	r2,r2,zero
 4001394:	10000a1e 	bne	r2,zero,40013c0 <alt_find_file+0xe8>
 4001398:	e0bffd17 	ldw	r2,-12(fp)
 400139c:	11000217 	ldw	r4,8(r2)
 40013a0:	e1bffc17 	ldw	r6,-16(fp)
 40013a4:	e17ffe17 	ldw	r5,-8(fp)
 40013a8:	40015740 	call	4001574 <memcmp>
 40013ac:	1004c03a 	cmpne	r2,r2,zero
 40013b0:	1000031e 	bne	r2,zero,40013c0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40013b4:	e0bffd17 	ldw	r2,-12(fp)
 40013b8:	e0bfff15 	stw	r2,-4(fp)
 40013bc:	00000806 	br	40013e0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 40013c0:	e0bffd17 	ldw	r2,-12(fp)
 40013c4:	10800017 	ldw	r2,0(r2)
 40013c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40013cc:	00c10034 	movhi	r3,1024
 40013d0:	18c71104 	addi	r3,r3,7236
 40013d4:	e0bffd17 	ldw	r2,-12(fp)
 40013d8:	10ffc91e 	bne	r2,r3,4001300 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40013dc:	e03fff15 	stw	zero,-4(fp)
 40013e0:	e0bfff17 	ldw	r2,-4(fp)
}
 40013e4:	e037883a 	mov	sp,fp
 40013e8:	dfc00117 	ldw	ra,4(sp)
 40013ec:	df000017 	ldw	fp,0(sp)
 40013f0:	dec00204 	addi	sp,sp,8
 40013f4:	f800283a 	ret

040013f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40013f8:	defffc04 	addi	sp,sp,-16
 40013fc:	df000315 	stw	fp,12(sp)
 4001400:	df000304 	addi	fp,sp,12
 4001404:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4001408:	00bffa04 	movi	r2,-24
 400140c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4001410:	e03ffe15 	stw	zero,-8(fp)
 4001414:	00001e06 	br	4001490 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 4001418:	e0bffe17 	ldw	r2,-8(fp)
 400141c:	00c10034 	movhi	r3,1024
 4001420:	18c6ae04 	addi	r3,r3,6840
 4001424:	10800324 	muli	r2,r2,12
 4001428:	10c5883a 	add	r2,r2,r3
 400142c:	10800017 	ldw	r2,0(r2)
 4001430:	1004c03a 	cmpne	r2,r2,zero
 4001434:	1000131e 	bne	r2,zero,4001484 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 4001438:	e0bffe17 	ldw	r2,-8(fp)
 400143c:	00c10034 	movhi	r3,1024
 4001440:	18c6ae04 	addi	r3,r3,6840
 4001444:	10800324 	muli	r2,r2,12
 4001448:	10c7883a 	add	r3,r2,r3
 400144c:	e0bfff17 	ldw	r2,-4(fp)
 4001450:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 4001454:	00810034 	movhi	r2,1024
 4001458:	10871504 	addi	r2,r2,7252
 400145c:	10c00017 	ldw	r3,0(r2)
 4001460:	e0bffe17 	ldw	r2,-8(fp)
 4001464:	1880040e 	bge	r3,r2,4001478 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 4001468:	00c10034 	movhi	r3,1024
 400146c:	18c71504 	addi	r3,r3,7252
 4001470:	e0bffe17 	ldw	r2,-8(fp)
 4001474:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4001478:	e0bffe17 	ldw	r2,-8(fp)
 400147c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4001480:	00000606 	br	400149c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4001484:	e0bffe17 	ldw	r2,-8(fp)
 4001488:	10800044 	addi	r2,r2,1
 400148c:	e0bffe15 	stw	r2,-8(fp)
 4001490:	e0bffe17 	ldw	r2,-8(fp)
 4001494:	10800810 	cmplti	r2,r2,32
 4001498:	103fdf1e 	bne	r2,zero,4001418 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400149c:	e0bffd17 	ldw	r2,-12(fp)
}
 40014a0:	e037883a 	mov	sp,fp
 40014a4:	df000017 	ldw	fp,0(sp)
 40014a8:	dec00104 	addi	sp,sp,4
 40014ac:	f800283a 	ret

040014b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 40014b0:	defffb04 	addi	sp,sp,-20
 40014b4:	df000415 	stw	fp,16(sp)
 40014b8:	df000404 	addi	fp,sp,16
 40014bc:	e13ffe15 	stw	r4,-8(fp)
 40014c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 40014c4:	e0bfff17 	ldw	r2,-4(fp)
 40014c8:	10820070 	cmpltui	r2,r2,2049
 40014cc:	1000021e 	bne	r2,zero,40014d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40014d0:	00820004 	movi	r2,2048
 40014d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40014d8:	e0fffe17 	ldw	r3,-8(fp)
 40014dc:	e0bfff17 	ldw	r2,-4(fp)
 40014e0:	1885883a 	add	r2,r3,r2
 40014e4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40014e8:	e0bffe17 	ldw	r2,-8(fp)
 40014ec:	e0bffd15 	stw	r2,-12(fp)
 40014f0:	00000506 	br	4001508 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40014f4:	e0bffd17 	ldw	r2,-12(fp)
 40014f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40014fc:	e0bffd17 	ldw	r2,-12(fp)
 4001500:	10800804 	addi	r2,r2,32
 4001504:	e0bffd15 	stw	r2,-12(fp)
 4001508:	e0fffd17 	ldw	r3,-12(fp)
 400150c:	e0bffc17 	ldw	r2,-16(fp)
 4001510:	18bff836 	bltu	r3,r2,40014f4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4001514:	e0bffe17 	ldw	r2,-8(fp)
 4001518:	108007cc 	andi	r2,r2,31
 400151c:	1005003a 	cmpeq	r2,r2,zero
 4001520:	1000021e 	bne	r2,zero,400152c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4001524:	e0bffd17 	ldw	r2,-12(fp)
 4001528:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400152c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4001530:	e037883a 	mov	sp,fp
 4001534:	df000017 	ldw	fp,0(sp)
 4001538:	dec00104 	addi	sp,sp,4
 400153c:	f800283a 	ret

04001540 <atexit>:
 4001540:	200b883a 	mov	r5,r4
 4001544:	000d883a 	mov	r6,zero
 4001548:	0009883a 	mov	r4,zero
 400154c:	000f883a 	mov	r7,zero
 4001550:	40015b01 	jmpi	40015b0 <__register_exitproc>

04001554 <exit>:
 4001554:	defffe04 	addi	sp,sp,-8
 4001558:	dc400015 	stw	r17,0(sp)
 400155c:	000b883a 	mov	r5,zero
 4001560:	2023883a 	mov	r17,r4
 4001564:	dfc00115 	stw	ra,4(sp)
 4001568:	40017200 	call	4001720 <__call_exitprocs>
 400156c:	8809883a 	mov	r4,r17
 4001570:	400191c0 	call	400191c <_exit>

04001574 <memcmp>:
 4001574:	31ffffc4 	addi	r7,r6,-1
 4001578:	3000061e 	bne	r6,zero,4001594 <memcmp+0x20>
 400157c:	00000a06 	br	40015a8 <memcmp+0x34>
 4001580:	39ffffc4 	addi	r7,r7,-1
 4001584:	00bfffc4 	movi	r2,-1
 4001588:	21000044 	addi	r4,r4,1
 400158c:	29400044 	addi	r5,r5,1
 4001590:	38800526 	beq	r7,r2,40015a8 <memcmp+0x34>
 4001594:	20c00003 	ldbu	r3,0(r4)
 4001598:	28800003 	ldbu	r2,0(r5)
 400159c:	18bff826 	beq	r3,r2,4001580 <memcmp+0xc>
 40015a0:	1885c83a 	sub	r2,r3,r2
 40015a4:	f800283a 	ret
 40015a8:	0005883a 	mov	r2,zero
 40015ac:	f800283a 	ret

040015b0 <__register_exitproc>:
 40015b0:	defff904 	addi	sp,sp,-28
 40015b4:	00810034 	movhi	r2,1024
 40015b8:	10871004 	addi	r2,r2,7232
 40015bc:	dc400115 	stw	r17,4(sp)
 40015c0:	14400017 	ldw	r17,0(r2)
 40015c4:	dc000015 	stw	r16,0(sp)
 40015c8:	dd400515 	stw	r21,20(sp)
 40015cc:	8c000c17 	ldw	r16,48(r17)
 40015d0:	dd000415 	stw	r20,16(sp)
 40015d4:	dcc00315 	stw	r19,12(sp)
 40015d8:	dc800215 	stw	r18,8(sp)
 40015dc:	dfc00615 	stw	ra,24(sp)
 40015e0:	2025883a 	mov	r18,r4
 40015e4:	282b883a 	mov	r21,r5
 40015e8:	3029883a 	mov	r20,r6
 40015ec:	3827883a 	mov	r19,r7
 40015f0:	80002626 	beq	r16,zero,400168c <__register_exitproc+0xdc>
 40015f4:	81400117 	ldw	r5,4(r16)
 40015f8:	008007c4 	movi	r2,31
 40015fc:	11403716 	blt	r2,r5,40016dc <__register_exitproc+0x12c>
 4001600:	90002026 	beq	r18,zero,4001684 <__register_exitproc+0xd4>
 4001604:	81802217 	ldw	r6,136(r16)
 4001608:	30002926 	beq	r6,zero,40016b0 <__register_exitproc+0x100>
 400160c:	81400117 	ldw	r5,4(r16)
 4001610:	00c00044 	movi	r3,1
 4001614:	31004017 	ldw	r4,256(r6)
 4001618:	1946983a 	sll	r3,r3,r5
 400161c:	2945883a 	add	r2,r5,r5
 4001620:	1085883a 	add	r2,r2,r2
 4001624:	1185883a 	add	r2,r2,r6
 4001628:	20c8b03a 	or	r4,r4,r3
 400162c:	14c02015 	stw	r19,128(r2)
 4001630:	15000015 	stw	r20,0(r2)
 4001634:	00800084 	movi	r2,2
 4001638:	31004015 	stw	r4,256(r6)
 400163c:	90801826 	beq	r18,r2,40016a0 <__register_exitproc+0xf0>
 4001640:	2945883a 	add	r2,r5,r5
 4001644:	1085883a 	add	r2,r2,r2
 4001648:	1405883a 	add	r2,r2,r16
 400164c:	28c00044 	addi	r3,r5,1
 4001650:	0009883a 	mov	r4,zero
 4001654:	15400215 	stw	r21,8(r2)
 4001658:	80c00115 	stw	r3,4(r16)
 400165c:	2005883a 	mov	r2,r4
 4001660:	dfc00617 	ldw	ra,24(sp)
 4001664:	dd400517 	ldw	r21,20(sp)
 4001668:	dd000417 	ldw	r20,16(sp)
 400166c:	dcc00317 	ldw	r19,12(sp)
 4001670:	dc800217 	ldw	r18,8(sp)
 4001674:	dc400117 	ldw	r17,4(sp)
 4001678:	dc000017 	ldw	r16,0(sp)
 400167c:	dec00704 	addi	sp,sp,28
 4001680:	f800283a 	ret
 4001684:	81400117 	ldw	r5,4(r16)
 4001688:	003fed06 	br	4001640 <__register_exitproc+0x90>
 400168c:	00810034 	movhi	r2,1024
 4001690:	1087d304 	addi	r2,r2,8012
 4001694:	1021883a 	mov	r16,r2
 4001698:	88800c15 	stw	r2,48(r17)
 400169c:	003fd506 	br	40015f4 <__register_exitproc+0x44>
 40016a0:	30804117 	ldw	r2,260(r6)
 40016a4:	10c4b03a 	or	r2,r2,r3
 40016a8:	30804115 	stw	r2,260(r6)
 40016ac:	003fe406 	br	4001640 <__register_exitproc+0x90>
 40016b0:	00800034 	movhi	r2,0
 40016b4:	10800004 	addi	r2,r2,0
 40016b8:	10000b26 	beq	r2,zero,40016e8 <__register_exitproc+0x138>
 40016bc:	01004204 	movi	r4,264
 40016c0:	103ee83a 	callr	r2
 40016c4:	10000826 	beq	r2,zero,40016e8 <__register_exitproc+0x138>
 40016c8:	100d883a 	mov	r6,r2
 40016cc:	10004015 	stw	zero,256(r2)
 40016d0:	10004115 	stw	zero,260(r2)
 40016d4:	80802215 	stw	r2,136(r16)
 40016d8:	003fcc06 	br	400160c <__register_exitproc+0x5c>
 40016dc:	00800034 	movhi	r2,0
 40016e0:	10800004 	addi	r2,r2,0
 40016e4:	1000021e 	bne	r2,zero,40016f0 <__register_exitproc+0x140>
 40016e8:	013fffc4 	movi	r4,-1
 40016ec:	003fdb06 	br	400165c <__register_exitproc+0xac>
 40016f0:	01002304 	movi	r4,140
 40016f4:	103ee83a 	callr	r2
 40016f8:	1007883a 	mov	r3,r2
 40016fc:	103ffa26 	beq	r2,zero,40016e8 <__register_exitproc+0x138>
 4001700:	88800c17 	ldw	r2,48(r17)
 4001704:	1821883a 	mov	r16,r3
 4001708:	18000115 	stw	zero,4(r3)
 400170c:	18800015 	stw	r2,0(r3)
 4001710:	88c00c15 	stw	r3,48(r17)
 4001714:	903fdb26 	beq	r18,zero,4001684 <__register_exitproc+0xd4>
 4001718:	003fba06 	br	4001604 <__register_exitproc+0x54>

0400171c <register_fini>:
 400171c:	f800283a 	ret

04001720 <__call_exitprocs>:
 4001720:	defff304 	addi	sp,sp,-52
 4001724:	00810034 	movhi	r2,1024
 4001728:	10871004 	addi	r2,r2,7232
 400172c:	df000b15 	stw	fp,44(sp)
 4001730:	17000017 	ldw	fp,0(r2)
 4001734:	00800034 	movhi	r2,0
 4001738:	10800004 	addi	r2,r2,0
 400173c:	1005003a 	cmpeq	r2,r2,zero
 4001740:	d8800215 	stw	r2,8(sp)
 4001744:	e0800c04 	addi	r2,fp,48
 4001748:	dd800915 	stw	r22,36(sp)
 400174c:	dd400815 	stw	r21,32(sp)
 4001750:	dfc00c15 	stw	ra,48(sp)
 4001754:	ddc00a15 	stw	r23,40(sp)
 4001758:	dd000715 	stw	r20,28(sp)
 400175c:	dcc00615 	stw	r19,24(sp)
 4001760:	dc800515 	stw	r18,20(sp)
 4001764:	dc400415 	stw	r17,16(sp)
 4001768:	dc000315 	stw	r16,12(sp)
 400176c:	282d883a 	mov	r22,r5
 4001770:	d9000115 	stw	r4,4(sp)
 4001774:	d8800015 	stw	r2,0(sp)
 4001778:	282b003a 	cmpeq	r21,r5,zero
 400177c:	e4400c17 	ldw	r17,48(fp)
 4001780:	88001226 	beq	r17,zero,40017cc <__call_exitprocs+0xac>
 4001784:	ddc00017 	ldw	r23,0(sp)
 4001788:	88800117 	ldw	r2,4(r17)
 400178c:	8c802217 	ldw	r18,136(r17)
 4001790:	143fffc4 	addi	r16,r2,-1
 4001794:	80000b16 	blt	r16,zero,40017c4 <__call_exitprocs+0xa4>
 4001798:	9027003a 	cmpeq	r19,r18,zero
 400179c:	a800171e 	bne	r21,zero,40017fc <__call_exitprocs+0xdc>
 40017a0:	9800051e 	bne	r19,zero,40017b8 <__call_exitprocs+0x98>
 40017a4:	8409883a 	add	r4,r16,r16
 40017a8:	2105883a 	add	r2,r4,r4
 40017ac:	1485883a 	add	r2,r2,r18
 40017b0:	10c02017 	ldw	r3,128(r2)
 40017b4:	b0c01226 	beq	r22,r3,4001800 <__call_exitprocs+0xe0>
 40017b8:	843fffc4 	addi	r16,r16,-1
 40017bc:	00bfffc4 	movi	r2,-1
 40017c0:	80bff61e 	bne	r16,r2,400179c <__call_exitprocs+0x7c>
 40017c4:	d8800217 	ldw	r2,8(sp)
 40017c8:	10003226 	beq	r2,zero,4001894 <__call_exitprocs+0x174>
 40017cc:	dfc00c17 	ldw	ra,48(sp)
 40017d0:	df000b17 	ldw	fp,44(sp)
 40017d4:	ddc00a17 	ldw	r23,40(sp)
 40017d8:	dd800917 	ldw	r22,36(sp)
 40017dc:	dd400817 	ldw	r21,32(sp)
 40017e0:	dd000717 	ldw	r20,28(sp)
 40017e4:	dcc00617 	ldw	r19,24(sp)
 40017e8:	dc800517 	ldw	r18,20(sp)
 40017ec:	dc400417 	ldw	r17,16(sp)
 40017f0:	dc000317 	ldw	r16,12(sp)
 40017f4:	dec00d04 	addi	sp,sp,52
 40017f8:	f800283a 	ret
 40017fc:	8409883a 	add	r4,r16,r16
 4001800:	88c00117 	ldw	r3,4(r17)
 4001804:	2105883a 	add	r2,r4,r4
 4001808:	1445883a 	add	r2,r2,r17
 400180c:	18ffffc4 	addi	r3,r3,-1
 4001810:	11800217 	ldw	r6,8(r2)
 4001814:	1c001826 	beq	r3,r16,4001878 <__call_exitprocs+0x158>
 4001818:	10000215 	stw	zero,8(r2)
 400181c:	303fe626 	beq	r6,zero,40017b8 <__call_exitprocs+0x98>
 4001820:	8d000117 	ldw	r20,4(r17)
 4001824:	9800121e 	bne	r19,zero,4001870 <__call_exitprocs+0x150>
 4001828:	00c00044 	movi	r3,1
 400182c:	1c06983a 	sll	r3,r3,r16
 4001830:	90804017 	ldw	r2,256(r18)
 4001834:	1884703a 	and	r2,r3,r2
 4001838:	10000d26 	beq	r2,zero,4001870 <__call_exitprocs+0x150>
 400183c:	90804117 	ldw	r2,260(r18)
 4001840:	1884703a 	and	r2,r3,r2
 4001844:	10000e1e 	bne	r2,zero,4001880 <__call_exitprocs+0x160>
 4001848:	2105883a 	add	r2,r4,r4
 400184c:	1485883a 	add	r2,r2,r18
 4001850:	11400017 	ldw	r5,0(r2)
 4001854:	d9000117 	ldw	r4,4(sp)
 4001858:	303ee83a 	callr	r6
 400185c:	88800117 	ldw	r2,4(r17)
 4001860:	a0bfc61e 	bne	r20,r2,400177c <__call_exitprocs+0x5c>
 4001864:	b8800017 	ldw	r2,0(r23)
 4001868:	147fd326 	beq	r2,r17,40017b8 <__call_exitprocs+0x98>
 400186c:	003fc306 	br	400177c <__call_exitprocs+0x5c>
 4001870:	303ee83a 	callr	r6
 4001874:	003ff906 	br	400185c <__call_exitprocs+0x13c>
 4001878:	8c000115 	stw	r16,4(r17)
 400187c:	003fe706 	br	400181c <__call_exitprocs+0xfc>
 4001880:	2105883a 	add	r2,r4,r4
 4001884:	1485883a 	add	r2,r2,r18
 4001888:	11000017 	ldw	r4,0(r2)
 400188c:	303ee83a 	callr	r6
 4001890:	003ff206 	br	400185c <__call_exitprocs+0x13c>
 4001894:	88800117 	ldw	r2,4(r17)
 4001898:	10000b1e 	bne	r2,zero,40018c8 <__call_exitprocs+0x1a8>
 400189c:	89000017 	ldw	r4,0(r17)
 40018a0:	20000a26 	beq	r4,zero,40018cc <__call_exitprocs+0x1ac>
 40018a4:	b9000015 	stw	r4,0(r23)
 40018a8:	90000226 	beq	r18,zero,40018b4 <__call_exitprocs+0x194>
 40018ac:	9009883a 	mov	r4,r18
 40018b0:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>
 40018b4:	8809883a 	mov	r4,r17
 40018b8:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>
 40018bc:	bc400017 	ldw	r17,0(r23)
 40018c0:	883fb11e 	bne	r17,zero,4001788 <__call_exitprocs+0x68>
 40018c4:	003fc106 	br	40017cc <__call_exitprocs+0xac>
 40018c8:	89000017 	ldw	r4,0(r17)
 40018cc:	882f883a 	mov	r23,r17
 40018d0:	2023883a 	mov	r17,r4
 40018d4:	883fac1e 	bne	r17,zero,4001788 <__call_exitprocs+0x68>
 40018d8:	003fbc06 	br	40017cc <__call_exitprocs+0xac>

040018dc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 40018dc:	defffd04 	addi	sp,sp,-12
 40018e0:	df000215 	stw	fp,8(sp)
 40018e4:	df000204 	addi	fp,sp,8
 40018e8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 40018ec:	e0bfff17 	ldw	r2,-4(fp)
 40018f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40018f4:	e0bffe17 	ldw	r2,-8(fp)
 40018f8:	1005003a 	cmpeq	r2,r2,zero
 40018fc:	1000021e 	bne	r2,zero,4001908 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4001900:	002af070 	cmpltui	zero,zero,43969
 4001904:	00000106 	br	400190c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4001908:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 400190c:	e037883a 	mov	sp,fp
 4001910:	df000017 	ldw	fp,0(sp)
 4001914:	dec00104 	addi	sp,sp,4
 4001918:	f800283a 	ret

0400191c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400191c:	defffd04 	addi	sp,sp,-12
 4001920:	dfc00215 	stw	ra,8(sp)
 4001924:	df000115 	stw	fp,4(sp)
 4001928:	df000104 	addi	fp,sp,4
 400192c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4001930:	e13fff17 	ldw	r4,-4(fp)
 4001934:	40018dc0 	call	40018dc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4001938:	003fff06 	br	4001938 <_exit+0x1c>
 400193c:	0400171c 	xori	r16,zero,92
