
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity top_nios_system is

-------------------------------------------------------------------------------
--							 Port Declarations							 --
-------------------------------------------------------------------------------
port (
	-- Inputs
	CLOCK_50			: in std_logic;
	KEY				  	: in std_logic_vector (3 downto 0);
	SW				   	: in std_logic_vector (9 downto 0);

	--  Communication
	UART_RXD			: in std_logic;

	-- Bidirectionals
	GPIO_0				: inout std_logic_vector (31 downto 0);
	GPIO_1				: inout std_logic_vector (31 downto 0);

	--  Memory (SRAM)
	SRAM_DQ				: inout std_logic_vector (15 downto 0);
		
	-- Memory (SDRAM)
	DRAM_DQ				: inout std_logic_vector (15 downto 0);

	-- Outputs
	--  Simple
	LEDG				: out std_logic_vector (7 downto 0);
	LEDR				: out std_logic_vector (9 downto 0);

	HEX0				: out std_logic_vector (7 downto 0);
	HEX1				: out std_logic_vector (7 downto 0);
	HEX2				: out std_logic_vector (7 downto 0);
	HEX3				: out std_logic_vector (7 downto 0);
	
	--  Memory (SRAM)
	SRAM_ADDR			: out std_logic_vector (17 downto 0);
	SRAM_CE_N			: out std_logic;
	SRAM_LB_N			: out std_logic;
	SRAM_UB_N			: out std_logic;
	SRAM_OE_N			: out std_logic;
	SRAM_WE_N			: out std_logic;

	--  Communication
	UART_TXD			: out std_logic;
	
	-- Memory (SDRAM)
	DRAM_ADDR			: out std_logic_vector (11 downto 0);
	DRAM_BA_1			: buffer std_logic;
	DRAM_BA_0			: buffer std_logic;
	DRAM_CAS_N			: out std_logic;
	DRAM_RAS_N			: out std_logic;
	DRAM_CLK			: out std_logic;
	DRAM_CKE			: out std_logic;
	DRAM_CS_N			: out std_logic;
	DRAM_WE_N			: out std_logic;
	DRAM_UDQM			: buffer std_logic;
	DRAM_LDQM			: buffer std_logic

	);
end top_nios_system;


architecture top_nios_system_rtl of top_nios_system is

-------------------------------------------------------------------------------
--						   Subentity Declarations						  --
-------------------------------------------------------------------------------
 component nios_system is 
           port (
                 -- 1) global signals:
                    signal clk_0 : IN STD_LOGIC;
                    signal reset_n : IN STD_LOGIC;

                 -- the_LEDR
                    signal out_port_from_the_LEDR : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);

                 -- the_SDRAM
                    signal zs_addr_from_the_SDRAM : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
                    signal zs_ba_from_the_SDRAM : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
                    signal zs_cas_n_from_the_SDRAM : OUT STD_LOGIC;
                    signal zs_cke_from_the_SDRAM : OUT STD_LOGIC;
                    signal zs_cs_n_from_the_SDRAM : OUT STD_LOGIC;
                    signal zs_dq_to_and_from_the_SDRAM : INOUT STD_LOGIC_VECTOR (15 DOWNTO 0);
                    signal zs_dqm_from_the_SDRAM : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
                    signal zs_ras_n_from_the_SDRAM : OUT STD_LOGIC;
                    signal zs_we_n_from_the_SDRAM : OUT STD_LOGIC;

                 -- the_SRAM
                    signal SRAM_ADDR_from_the_SRAM : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
                    signal SRAM_CE_N_from_the_SRAM : OUT STD_LOGIC;
                    signal SRAM_DQ_to_and_from_the_SRAM : INOUT STD_LOGIC_VECTOR (15 DOWNTO 0);
                    signal SRAM_LB_N_from_the_SRAM : OUT STD_LOGIC;
                    signal SRAM_OE_N_from_the_SRAM : OUT STD_LOGIC;
                    signal SRAM_UB_N_from_the_SRAM : OUT STD_LOGIC;
                    signal SRAM_WE_N_from_the_SRAM : OUT STD_LOGIC;

                 -- the_SW
                    signal in_port_to_the_SW : IN STD_LOGIC_VECTOR (9 DOWNTO 0)
                 );
end component nios_system;

	
component sdram_pll
		port (
				 signal inclk0 : IN STD_LOGIC;
				 signal c0 : OUT STD_LOGIC;
				 signal c1 : OUT STD_LOGIC
			 );
end component;
	
component sqrt

		generic(nb_bits : natural:=32); -- Nombre de bits du nombre dont on calcule la racine carree
		port(	X : in UNSIGNED(31 downto 0);
				debut : in STD_LOGIC;
				clk, reset : in STD_LOGIC;
				S : out UNSIGNED(31 downto 0);
				fin : out STD_LOGIC);

end component;

-------------------------------------------------------------------------------
--						   Parameter Declarations						  --
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
--				 Internal Wires and Registers Declarations				 --
-------------------------------------------------------------------------------
-- Internal Wires
-- Used to connect the Nios 2 system clock to the non-shifted output of the PLL
signal			 system_clock : STD_LOGIC;

signal sig_X : unsigned(31 downto 0);
signal sig_Res : unsigned(31 downto 0);
signal sig_fini, sig_debut, sig_reset : std_logic;
signal sig_X_conv : std_logic_vector(31 downto 0);
signal sig_Res_conv : std_logic_vector(31 downto 0);

-- Used to concatenate some SDRAM control signals

signal			 DRAM_BA	: STD_LOGIC_VECTOR(1 DOWNTO 0);
signal			 DRAM_DQM	: STD_LOGIC_VECTOR(1 DOWNTO 0);


-- Internal Registers

-- State Machine Registers

begin

-------------------------------------------------------------------------------
--						 Finite State Machine(s)						   --
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
--							 Sequential Logic							  --
-------------------------------------------------------------------------------
	
-------------------------------------------------------------------------------
--							Combinational Logic							--
-------------------------------------------------------------------------------


DRAM_BA_1	<= DRAM_BA(1);
DRAM_BA_0	<= DRAM_BA(0);
DRAM_UDQM	<= DRAM_DQM(1);
DRAM_LDQM	<= DRAM_DQM(0);

-------------------------------------------------------------------------------
--							  Internal Modules							 --
-------------------------------------------------------------------------------
nios_system_inst : nios_system
    port map(
      SRAM_ADDR_from_the_SRAM => SRAM_ADDR,
      SRAM_CE_N_from_the_SRAM => SRAM_CE_N,
      SRAM_DQ_to_and_from_the_SRAM => SRAM_DQ,
      SRAM_LB_N_from_the_SRAM => SRAM_LB_N,
      SRAM_OE_N_from_the_SRAM => SRAM_OE_N,
      SRAM_UB_N_from_the_SRAM => SRAM_UB_N,
      SRAM_WE_N_from_the_SRAM => SRAM_WE_N,
      out_port_from_the_LEDR => LEDR(9 downto 0),
      zs_addr_from_the_SDRAM => DRAM_ADDR,
      zs_ba_from_the_SDRAM => DRAM_BA,
      zs_cas_n_from_the_SDRAM => DRAM_CAS_N,
      zs_cke_from_the_SDRAM => DRAM_CKE,
      zs_cs_n_from_the_SDRAM => DRAM_CS_N,
      zs_dq_to_and_from_the_SDRAM => DRAM_DQ,
      zs_dqm_from_the_SDRAM => DRAM_DQM,
      zs_ras_n_from_the_SDRAM => DRAM_RAS_N,
      zs_we_n_from_the_SDRAM => DRAM_WE_N,
      clk_0 => system_clock,
      in_port_to_the_SW => SW(9 downto 0),
      reset_n => KEY(0)
    );


	
neg_3ns : sdram_pll
	port map (
		inclk0									=> CLOCK_50,
		c0										=> DRAM_CLK,
		c1										=> system_clock
	);

--racine_carree: sqrt
--	generic map (nb_bits => 32)
--	port map (X => sig_X,
--				debut => sig_debut,
--				clk => system_clock,
--				reset => sig_reset,
--				S => sig_Res,
--				fin => sig_fini
--	);
--	
--	sig_X <= unsigned(sig_X_conv);
--	sig_Res_conv <= conv_std_logic_vector(sig_Res,32);
--	sig_reset <= not KEY(0);

end top_nios_system_rtl;

