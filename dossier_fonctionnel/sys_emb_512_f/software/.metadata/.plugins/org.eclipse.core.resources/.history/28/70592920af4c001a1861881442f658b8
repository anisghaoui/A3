/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "system.h"
#include "sys/alt_timestamp.h"
#include "altera_avalon_timer_regs.h"


//short* timer= (short*)
short * LED_ptr = (short*) (LEDR_BASE| 0x80000000);
short * SW_ptr=(short*)(SWITCHES_IN_BASE | 0x80000000);



ushort sqrt_sw(uint X){
	uint V=1<<30;
	uint Z=0;
	char i;
	for( i=0;i<16;i++){
		Z+=V;
		if(X>=Z){
			X-=Z;
			Z+=V;
		}else{
			Z-=V;
		}
		Z>>=1;
		V>>=2;
	}
	return Z;
}
struct TIMER_S
{
	volatile uint status;
	volatile uint control;
	volatile uint periodl;
	volatile uint periodh;
	volatile uint snapl;
	volatile uint snaph;
}* TIMER =(struct TIMER_S*)(TIMER_BASE|0x80000000);

void snap_start()
{
	TIMER->control=8;

	uint period=499999999;
	TIMER->periodl=period&0x0000FFFF;
	TIMER->periodh=(period&0xFFFF0000)>>16;
	TIMER->control=0x6;
	//IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,6);

	//debug
	/*printf("control(%x)=%x, %x\n",&(TIMER->control),IORD_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE),IOADDR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE));
	printf("periodl=%x, %x\n",&(TIMER->periodl),IOADDR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE));
	printf("periodh=%x, %x\n",&(TIMER->periodh),IOADDR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE));
	printf("snapl=%x, %x\n",&(TIMER->snapl),IOADDR_ALTERA_AVALON_TIMER_SNAPL(TIMER_BASE));
	printf("snaph=%x, %x\n",&(TIMER->snaph),IOADDR_ALTERA_AVALON_TIMER_SNAPH(TIMER_BASE));
	printf("period=%u\n",(0x0000FFFF&TIMER->periodh)<<16 | (0x0000FFFF&TIMER->periodl));
	printf("status(%x)=%x , %x\n",&(TIMER->status),IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE),IOADDR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE));
	*/
}

void snap_stop()
{
	TIMER->control=8;
}
inline uint snap_timer(){
	return (TIMER->snaph=1)&0|(0x0000FFFF&(TIMER->snaph))<<16 |(0x0000FFFF&TIMER->snapl);
}
#define str2(X) #X
#define str(X) str2(X)

#define MEMORY "SSRAM bla bla"
#define N 1000
int main()
{

	printf("Hello from Nios II!\n");

	uint i=0;
	*((short*)LEDR_BASE) =0xAA;

	// altera timer
	int begin,end,begin_alt,end_alt, compute_alt, read_alt,write_alt;
	unsigned long long acc_compute_alt =0,acc_read_alt =0,acc_write_alt =0;



	// init tab
	uint tab[1000];
	for (i=0 ; i< 1000 ;i++)
	{
		tab[i] = i*i;
	}


	//test altera
	#if 0
	alt_timestamp_start();
	begin=alt_timestamp();
	end=alt_timestamp();
	printf("t=%d\n",end-begin);


	i=0;
	while(i<N){

		begin_alt = alt_timestamp();
			uint x = tab[i];
		end_alt =alt_timestamp();
		read_alt = end_alt-begin_alt;

		begin_alt = alt_timestamp();
			ushort z=sqrt_sw(x);
		end_alt =alt_timestamp();
		compute_alt = end_alt-begin_alt;
		if(z != i)break;
		z*=z;

		begin_alt = alt_timestamp();
			tab[i]=z;
		end_alt =alt_timestamp();
		write_alt = end_alt-begin_alt;

		if(compute_alt > 0 && read_alt > 0 && write_alt > 0){
			acc_compute_alt += compute_alt;
			acc_read_alt += read_alt;
			acc_write_alt += write_alt;
		}else break;
		i++;
	}
	if(i==N){
		printf("acc_time=%llu\n",acc_compute_alt);
	}else{
		printf("error at i=%d t=%d\n",i,compute_alt);
	}
	#else

	puts("\n\n******************************************\n\n");

	// snap timer
	int begin_snap,end_snap, compute_snap, read_snap,write_snap;
	unsigned long long acc_compute_snap =0,acc_read_snap =0,acc_write_snap =0;

	//test snap
	snap_start();
	begin=snap_timer();
	end=snap_timer();
	printf("t=%d\n",begin-end);



	i=0;
	while(i<N){
		begin_snap = snap_timer();
			uint x = tab[i];
		end_snap =snap_timer();
		read_snap = begin_snap-end_snap;

		begin_snap = snap_timer();
			ushort z=sqrt_sw(x);
		end_snap =snap_timer();
		compute_snap = begin_snap-end_snap;
		if(z != i)break;
		z*=z;

		begin_snap = snap_timer();
			tab[i]=z;
		end_snap =snap_timer();
		write_snap = begin_snap-end_snap;

		if(compute_snap > 0 && read_snap > 0 && write_snap > 0){
			acc_compute_snap += compute_snap;
			acc_read_snap += read_snap;
			acc_write_snap += write_snap;
		}else break;
		i++;
	}
	/*
	if(i==N){
		printf("compute_time=%llu\n",acc_compute_snap);
		printf("read_time=%llu\n",acc_read_snap);
		printf("write_time=%llu\n",acc_write_snap);
	}else{
		printf("error at i=%d t=%d\n",i,compute_snap);
	}
	*/
	if(i==N){
			printf("%llu\t",acc_compute_snap);
			printf("%llu\t",acc_read_snap);
			printf("%llu\t",acc_write_snap);
			printf(MEMORY "\n",acc_write_snap);
		}else{
			printf("error at i=%d t=%d\n",i,compute_snap);
		}


#endif

  return 0;
}
