
helo.elf:     file format elf32-littlenios2
helo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08104020

Program Header:
    LOAD off    0x00001000 vaddr 0x08104000 paddr 0x08104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08104020 paddr 0x08104020 align 2**12
         filesz 0x000025a8 memsz 0x000025a8 flags r-x
    LOAD off    0x000035c8 vaddr 0x081065c8 paddr 0x081068a8 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003b88 vaddr 0x08106b88 paddr 0x08106b88 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08104000  08104000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002508  08104020  08104020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08106528  08106528  00003528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002e0  081065c8  081068a8  000035c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  08106b88  08106b88  00003b88  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004a8  00000000  00000000  000038d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006d3  00000000  00000000  00003d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000091f2  00000000  00000000  0000444b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000021dd  00000000  00000000  0000d63d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005eb1  00000000  00000000  0000f81a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000884  00000000  00000000  000156cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d76  00000000  00000000  00015f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000180f  00000000  00000000  00016cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000184d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  000184e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00019f12  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00019f15  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00019f18  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00019f19  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00019f1a  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00019f1e  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00019f22  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00019f26  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00019f2f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00019f38  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00019f41  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001d  00000000  00000000  00019f4c  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000472e5  00000000  00000000  00019f69  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08104000 l    d  .entry	00000000 .entry
08104020 l    d  .text	00000000 .text
08106528 l    d  .rodata	00000000 .rodata
081065c8 l    d  .rwdata	00000000 .rwdata
08106b88 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
08104058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
081046a8 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
081065c8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08104f1c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
081050e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
081052e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
081066a8 l     O .rwdata	0000002c JTAG_UART
081053a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
08105738 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
081057b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08105894 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
081059d8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
08105b28 l     F .text	000000f8 alt_file_locked
08105dac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08106304 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
081064c4 l     F .text	00000040 alt_sim_halt
08106884 g     O .rwdata	00000004 TIMER
0810405c g     F .text	000000bc sqrt_sw
08105154 g     F .text	0000006c alt_main
081045e4 g     F .text	00000090 _puts_r
081068a8 g       *ABS*	00000000 __flash_rwdata_start
0810454c g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
08104000 g     F .entry	0000000c __reset
08104000 g       *ABS*	00000000 __alt_mem_ONCHIP
0810417c g     F .text	00000028 snap_stop
08104020 g       *ABS*	00000000 __flash_exceptions_start
08106b88 g     O .bss	00000004 errno
08106b90 g     O .bss	00000004 alt_argv
0810e87c g       *ABS*	00000000 _gp
081066fc g     O .rwdata	00000180 alt_fd_list
08105ea4 g     F .text	00000094 alt_find_dev
08105ab0 g     F .text	00000078 alt_io_redirect
08106528 g       *ABS*	00000000 __DTOR_END__
08104674 g     F .text	00000014 puts
08105490 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
081045a0 g     F .text	00000044 _printf_r
08105058 g     F .text	00000008 __udivsi3
081068a0 g     O .rwdata	00000004 alt_max_fd
0810688c g     O .rwdata	00000004 _global_impure_ptr
08106c24 g       *ABS*	00000000 __bss_end
081066d4 g     O .rwdata	00000028 alt_dev_null
08080000 g       *ABS*	00000000 __alt_mem_SSRAM_CONTROLLER
08105798 g     F .text	0000001c alt_dcache_flush_all
081068a8 g       *ABS*	00000000 __ram_rwdata_end
08106898 g     O .rwdata	00000008 alt_dev_list
081051c0 g     F .text	00000124 write
0810687c g     O .rwdata	00000004 LED_ptr
081065c8 g       *ABS*	00000000 __ram_rodata_end
08105060 g     F .text	00000008 __umodsi3
08106c24 g       *ABS*	00000000 end
081041a4 g     F .text	00000048 snap_timer
08106524 g       *ABS*	00000000 __CTOR_LIST__
08108000 g       *ABS*	00000000 __alt_stack_pointer
08105594 g     F .text	000000a4 altera_avalon_jtag_uart_write
08104728 g     F .text	0000069c ___vfprintf_internal_r
08106308 g     F .text	000001bc __call_exitprocs
08104020 g     F .text	0000003c _start
08105378 g     F .text	00000030 alt_sys_init
08104118 g     F .text	00000064 snap_start
08106198 g     F .text	0000016c __register_exitproc
08104514 g     F .text	00000038 __mulsi3
081065c8 g       *ABS*	00000000 __ram_rwdata_start
08106528 g       *ABS*	00000000 __ram_rodata_start
081053e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08106058 g     F .text	000000d0 alt_get_fd
0810615c g     F .text	0000003c memcmp
08106c24 g       *ABS*	00000000 __alt_stack_base
08105f38 g     F .text	00000120 alt_find_file
081057e0 g     F .text	000000b4 alt_dev_llist_insert
08104de8 g     F .text	000000bc __sfvwrite_small_dev
08106b88 g       *ABS*	00000000 __bss_start
081041ec g     F .text	00000328 main
04000000 g       *ABS*	00000000 __alt_mem_SDRAM_CONTROLLER
08106b94 g     O .bss	00000004 alt_envp
08105438 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08106b98 g     O .bss	0000008c _atexit0
081068a4 g     O .rwdata	00000004 alt_errno
08104f98 g     F .text	00000060 __divsi3
08106528 g       *ABS*	00000000 __CTOR_END__
08106528 g       *ABS*	00000000 __flash_rodata_start
08106528 g       *ABS*	00000000 __DTOR_LIST__
08105344 g     F .text	00000034 alt_irq_init
08105e0c g     F .text	00000078 alt_release_fd
08106128 g     F .text	00000014 atexit
08104ea4 g     F .text	00000078 _write_r
08106888 g     O .rwdata	00000004 _impure_ptr
08106b8c g     O .bss	00000004 alt_argc
08105958 g     F .text	00000064 _do_dtors
08106890 g     O .rwdata	00000008 alt_fs_list
08104020 g       *ABS*	00000000 __ram_exceptions_start
08106880 g     O .rwdata	00000004 SW_ptr
081068a8 g       *ABS*	00000000 _edata
08106c24 g       *ABS*	00000000 _end
08104020 g       *ABS*	00000000 __ram_exceptions_end
08105e84 g     F .text	00000020 altera_nios2_qsys_irq_init
0810613c g     F .text	00000020 exit
08104ff8 g     F .text	00000060 __modsi3
08108000 g       *ABS*	00000000 __alt_data_end
08106504 g     F .text	00000020 _exit
08104688 g     F .text	00000020 strlen
08105c20 g     F .text	0000018c open
081059bc g     F .text	0000001c alt_icache_flush_all
08104dc4 g     F .text	00000024 __vfprintf_internal
081058f4 g     F .text	00000064 _do_ctors
08105638 g     F .text	00000100 close
08105068 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8104000:	00420434 	movhi	at,2064
    ori r1, r1, %lo(_start)
 8104004:	08500814 	ori	at,at,16416
    jmp r1
 8104008:	0800683a 	jmp	at
	...

Disassembly of section .text:

08104020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8104020:	06c20434 	movhi	sp,2064
    ori sp, sp, %lo(__alt_stack_pointer)
 8104024:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 8104028:	06820434 	movhi	gp,2064
    ori gp, gp, %lo(_gp)
 810402c:	d6ba1f14 	ori	gp,gp,59516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8104030:	00820434 	movhi	r2,2064
    ori r2, r2, %lo(__bss_start)
 8104034:	109ae214 	ori	r2,r2,27528

    movhi r3, %hi(__bss_end)
 8104038:	00c20434 	movhi	r3,2064
    ori r3, r3, %lo(__bss_end)
 810403c:	18db0914 	ori	r3,r3,27684

    beq r2, r3, 1f
 8104040:	10c00326 	beq	r2,r3,8104050 <_start+0x30>

0:
    stw zero, (r2)
 8104044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8104048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 810404c:	10fffd36 	bltu	r2,r3,8104044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8104050:	81050680 	call	8105068 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8104054:	81051540 	call	8105154 <alt_main>

08104058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8104058:	003fff06 	br	8104058 <alt_after_alt_main>

0810405c <sqrt_sw>:
short * LED_ptr = (short*) (LEDR_BASE| 0x80000000);
short * SW_ptr=(short*)(SWITCHES_IN_BASE | 0x80000000);



ushort sqrt_sw(uint X){
 810405c:	defffb04 	addi	sp,sp,-20
 8104060:	df000415 	stw	fp,16(sp)
 8104064:	df000404 	addi	fp,sp,16
 8104068:	e13fff15 	stw	r4,-4(fp)
	uint V=1<<30;
 810406c:	00900034 	movhi	r2,16384
 8104070:	e0bffe15 	stw	r2,-8(fp)
	uint Z=0;
 8104074:	e03ffd15 	stw	zero,-12(fp)
	char i;
	for( i=0;i<16;i++){
 8104078:	e03ffc05 	stb	zero,-16(fp)
 810407c:	00001d06 	br	81040f4 <sqrt_sw+0x98>
		Z+=V;
 8104080:	e0fffd17 	ldw	r3,-12(fp)
 8104084:	e0bffe17 	ldw	r2,-8(fp)
 8104088:	1885883a 	add	r2,r3,r2
 810408c:	e0bffd15 	stw	r2,-12(fp)
		if(X>=Z){
 8104090:	e0ffff17 	ldw	r3,-4(fp)
 8104094:	e0bffd17 	ldw	r2,-12(fp)
 8104098:	18800936 	bltu	r3,r2,81040c0 <sqrt_sw+0x64>
			X-=Z;
 810409c:	e0ffff17 	ldw	r3,-4(fp)
 81040a0:	e0bffd17 	ldw	r2,-12(fp)
 81040a4:	1885c83a 	sub	r2,r3,r2
 81040a8:	e0bfff15 	stw	r2,-4(fp)
			Z+=V;
 81040ac:	e0fffd17 	ldw	r3,-12(fp)
 81040b0:	e0bffe17 	ldw	r2,-8(fp)
 81040b4:	1885883a 	add	r2,r3,r2
 81040b8:	e0bffd15 	stw	r2,-12(fp)
 81040bc:	00000406 	br	81040d0 <sqrt_sw+0x74>
		}else{
			Z-=V;
 81040c0:	e0bffd17 	ldw	r2,-12(fp)
 81040c4:	e0fffe17 	ldw	r3,-8(fp)
 81040c8:	10c5c83a 	sub	r2,r2,r3
 81040cc:	e0bffd15 	stw	r2,-12(fp)
		}
		Z>>=1;
 81040d0:	e0bffd17 	ldw	r2,-12(fp)
 81040d4:	1004d07a 	srli	r2,r2,1
 81040d8:	e0bffd15 	stw	r2,-12(fp)
		V>>=2;
 81040dc:	e0bffe17 	ldw	r2,-8(fp)
 81040e0:	1004d0ba 	srli	r2,r2,2
 81040e4:	e0bffe15 	stw	r2,-8(fp)

ushort sqrt_sw(uint X){
	uint V=1<<30;
	uint Z=0;
	char i;
	for( i=0;i<16;i++){
 81040e8:	e0bffc03 	ldbu	r2,-16(fp)
 81040ec:	10800044 	addi	r2,r2,1
 81040f0:	e0bffc05 	stb	r2,-16(fp)
 81040f4:	e0bffc07 	ldb	r2,-16(fp)
 81040f8:	10800410 	cmplti	r2,r2,16
 81040fc:	103fe01e 	bne	r2,zero,8104080 <sqrt_sw+0x24>
			Z-=V;
		}
		Z>>=1;
		V>>=2;
	}
	return Z;
 8104100:	e0bffd17 	ldw	r2,-12(fp)
 8104104:	10bfffcc 	andi	r2,r2,65535
}
 8104108:	e037883a 	mov	sp,fp
 810410c:	df000017 	ldw	fp,0(sp)
 8104110:	dec00104 	addi	sp,sp,4
 8104114:	f800283a 	ret

08104118 <snap_start>:
	volatile uint snapl;
	volatile uint snaph;
}* TIMER =(struct TIMER_S*)(TIMER_BASE|0x80000000);

void snap_start()
{
 8104118:	defffe04 	addi	sp,sp,-8
 810411c:	df000115 	stw	fp,4(sp)
 8104120:	df000104 	addi	fp,sp,4
	TIMER->control=8;
 8104124:	d0e00217 	ldw	r3,-32760(gp)
 8104128:	00800204 	movi	r2,8
 810412c:	18800115 	stw	r2,4(r3)

	uint period=499999999;
 8104130:	00877374 	movhi	r2,7629
 8104134:	10993fc4 	addi	r2,r2,25855
 8104138:	e0bfff15 	stw	r2,-4(fp)
	TIMER->periodl=period&0x0000FFFF;
 810413c:	d0e00217 	ldw	r3,-32760(gp)
 8104140:	e0bfff17 	ldw	r2,-4(fp)
 8104144:	10bfffcc 	andi	r2,r2,65535
 8104148:	18800215 	stw	r2,8(r3)
	TIMER->periodh=(period&0xFFFF0000)>>16;
 810414c:	d0e00217 	ldw	r3,-32760(gp)
 8104150:	e0bfff17 	ldw	r2,-4(fp)
 8104154:	10bfffec 	andhi	r2,r2,65535
 8104158:	1004d43a 	srli	r2,r2,16
 810415c:	18800315 	stw	r2,12(r3)
	TIMER->control=0x6;
 8104160:	d0e00217 	ldw	r3,-32760(gp)
 8104164:	00800184 	movi	r2,6
 8104168:	18800115 	stw	r2,4(r3)
}
 810416c:	e037883a 	mov	sp,fp
 8104170:	df000017 	ldw	fp,0(sp)
 8104174:	dec00104 	addi	sp,sp,4
 8104178:	f800283a 	ret

0810417c <snap_stop>:

void snap_stop()
{
 810417c:	deffff04 	addi	sp,sp,-4
 8104180:	df000015 	stw	fp,0(sp)
 8104184:	d839883a 	mov	fp,sp
	TIMER->control=8;
 8104188:	d0e00217 	ldw	r3,-32760(gp)
 810418c:	00800204 	movi	r2,8
 8104190:	18800115 	stw	r2,4(r3)
}
 8104194:	e037883a 	mov	sp,fp
 8104198:	df000017 	ldw	fp,0(sp)
 810419c:	dec00104 	addi	sp,sp,4
 81041a0:	f800283a 	ret

081041a4 <snap_timer>:
inline uint snap_timer(){
 81041a4:	deffff04 	addi	sp,sp,-4
 81041a8:	df000015 	stw	fp,0(sp)
 81041ac:	d839883a 	mov	fp,sp
	return (TIMER->snaph=1)&0|(0x0000FFFF&(TIMER->snaph))<<16 |(0x0000FFFF&TIMER->snapl);
 81041b0:	d0e00217 	ldw	r3,-32760(gp)
 81041b4:	00800044 	movi	r2,1
 81041b8:	18800515 	stw	r2,20(r3)
 81041bc:	d0a00217 	ldw	r2,-32760(gp)
 81041c0:	10800517 	ldw	r2,20(r2)
 81041c4:	10bfffcc 	andi	r2,r2,65535
 81041c8:	1006943a 	slli	r3,r2,16
 81041cc:	d0a00217 	ldw	r2,-32760(gp)
 81041d0:	10800417 	ldw	r2,16(r2)
 81041d4:	10bfffcc 	andi	r2,r2,65535
 81041d8:	1884b03a 	or	r2,r3,r2
}
 81041dc:	e037883a 	mov	sp,fp
 81041e0:	df000017 	ldw	fp,0(sp)
 81041e4:	dec00104 	addi	sp,sp,4
 81041e8:	f800283a 	ret

081041ec <main>:
#define str(X) str2(X)

#define MEMORY "SSRAM"
#define N 1000
int main()
{
 81041ec:	defbfa04 	addi	sp,sp,-4120
 81041f0:	dfc40515 	stw	ra,4116(sp)
 81041f4:	df040415 	stw	fp,4112(sp)
 81041f8:	dc040315 	stw	r16,4108(sp)
 81041fc:	df040304 	addi	fp,sp,4108

	printf("Hello from Nios II!\n");
 8104200:	01020434 	movhi	r4,2064
 8104204:	21194a04 	addi	r4,r4,25896
 8104208:	81046740 	call	8104674 <puts>

	uint i=0;
 810420c:	e03c1715 	stw	zero,-4004(fp)
	*((short*)LEDR_BASE) =0xAA;
 8104210:	00c20474 	movhi	r3,2065
 8104214:	18e40804 	addi	r3,r3,-28640
 8104218:	00802a84 	movi	r2,170
 810421c:	1880000d 	sth	r2,0(r3)

	// altera timer
	int begin,end,begin_alt,end_alt, compute_alt, read_alt,write_alt;
	unsigned long long acc_compute_alt =0,acc_read_alt =0,acc_write_alt =0;
 8104220:	e03c0e15 	stw	zero,-4040(fp)
 8104224:	e03c0f15 	stw	zero,-4036(fp)
 8104228:	e03c0c15 	stw	zero,-4048(fp)
 810422c:	e03c0d15 	stw	zero,-4044(fp)
 8104230:	e03c0a15 	stw	zero,-4056(fp)
 8104234:	e03c0b15 	stw	zero,-4052(fp)

	// init tab
	uint tab[1000];
	for (i=0 ; i< 1000 ;i++)
 8104238:	e03c1715 	stw	zero,-4004(fp)
 810423c:	00000e06 	br	8104278 <main+0x8c>
	{
		tab[i] = i*i;
 8104240:	e43c1717 	ldw	r16,-4004(fp)
 8104244:	e13c1717 	ldw	r4,-4004(fp)
 8104248:	e17c1717 	ldw	r5,-4004(fp)
 810424c:	81045140 	call	8104514 <__mulsi3>
 8104250:	1007883a 	mov	r3,r2
 8104254:	8405883a 	add	r2,r16,r16
 8104258:	1085883a 	add	r2,r2,r2
 810425c:	e13bfd04 	addi	r4,fp,-4108
 8104260:	1105883a 	add	r2,r2,r4
 8104264:	10801b04 	addi	r2,r2,108
 8104268:	10c00015 	stw	r3,0(r2)
	int begin,end,begin_alt,end_alt, compute_alt, read_alt,write_alt;
	unsigned long long acc_compute_alt =0,acc_read_alt =0,acc_write_alt =0;

	// init tab
	uint tab[1000];
	for (i=0 ; i< 1000 ;i++)
 810426c:	e0bc1717 	ldw	r2,-4004(fp)
 8104270:	10800044 	addi	r2,r2,1
 8104274:	e0bc1715 	stw	r2,-4004(fp)
 8104278:	e0bc1717 	ldw	r2,-4004(fp)
 810427c:	1080fa30 	cmpltui	r2,r2,1000
 8104280:	103fef1e 	bne	r2,zero,8104240 <main+0x54>
	{
		tab[i] = i*i;
	}


	puts("\n******************************************\n");
 8104284:	01020434 	movhi	r4,2064
 8104288:	21194f04 	addi	r4,r4,25916
 810428c:	81046740 	call	8104674 <puts>

	// snap timer
	int begin_snap,end_snap, compute_snap, read_snap,write_snap;
	unsigned long long acc_compute_snap =0,acc_read_snap =0,acc_write_snap =0;
 8104290:	e03c0315 	stw	zero,-4084(fp)
 8104294:	e03c0415 	stw	zero,-4080(fp)
 8104298:	e03c0115 	stw	zero,-4092(fp)
 810429c:	e03c0215 	stw	zero,-4088(fp)
 81042a0:	e03bff15 	stw	zero,-4100(fp)
 81042a4:	e03c0015 	stw	zero,-4096(fp)

	//test snap
	snap_start();
 81042a8:	81041180 	call	8104118 <snap_start>
	begin=snap_timer();
 81042ac:	81041a40 	call	81041a4 <snap_timer>
 81042b0:	e0bc1615 	stw	r2,-4008(fp)
	end=snap_timer();
 81042b4:	81041a40 	call	81041a4 <snap_timer>
 81042b8:	e0bc1515 	stw	r2,-4012(fp)
	printf("t=%d\n",begin-end);
 81042bc:	e0fc1617 	ldw	r3,-4008(fp)
 81042c0:	e0bc1517 	ldw	r2,-4012(fp)
 81042c4:	188bc83a 	sub	r5,r3,r2
 81042c8:	01020434 	movhi	r4,2064
 81042cc:	21195b04 	addi	r4,r4,25964
 81042d0:	810454c0 	call	810454c <printf>



	i=0;
 81042d4:	e03c1715 	stw	zero,-4004(fp)
	while(i<N){
 81042d8:	00006706 	br	8104478 <main+0x28c>
		begin_snap = snap_timer();
 81042dc:	81041a40 	call	81041a4 <snap_timer>
 81042e0:	e0bc0915 	stw	r2,-4060(fp)
			uint x = tab[i];
 81042e4:	e0bc1717 	ldw	r2,-4004(fp)
 81042e8:	1085883a 	add	r2,r2,r2
 81042ec:	1085883a 	add	r2,r2,r2
 81042f0:	e0fbfd04 	addi	r3,fp,-4108
 81042f4:	10c5883a 	add	r2,r2,r3
 81042f8:	10801b04 	addi	r2,r2,108
 81042fc:	10800017 	ldw	r2,0(r2)
 8104300:	e0bbfe15 	stw	r2,-4104(fp)
		end_snap =snap_timer();
 8104304:	81041a40 	call	81041a4 <snap_timer>
 8104308:	e0bc0815 	stw	r2,-4064(fp)
		read_snap = begin_snap-end_snap;
 810430c:	e0fc0917 	ldw	r3,-4060(fp)
 8104310:	e0bc0817 	ldw	r2,-4064(fp)
 8104314:	1885c83a 	sub	r2,r3,r2
 8104318:	e0bc0615 	stw	r2,-4072(fp)

		begin_snap = snap_timer();
 810431c:	81041a40 	call	81041a4 <snap_timer>
 8104320:	e0bc0915 	stw	r2,-4060(fp)
			ushort z=sqrt_sw(x);
 8104324:	e13bfe17 	ldw	r4,-4104(fp)
 8104328:	810405c0 	call	810405c <sqrt_sw>
 810432c:	e0bbfd0d 	sth	r2,-4108(fp)
		end_snap =snap_timer();
 8104330:	81041a40 	call	81041a4 <snap_timer>
 8104334:	e0bc0815 	stw	r2,-4064(fp)
		compute_snap = begin_snap-end_snap;
 8104338:	e0fc0917 	ldw	r3,-4060(fp)
 810433c:	e0bc0817 	ldw	r2,-4064(fp)
 8104340:	1885c83a 	sub	r2,r3,r2
 8104344:	e0bc0715 	stw	r2,-4068(fp)
		if(z != i)break;
 8104348:	e0fbfd0b 	ldhu	r3,-4108(fp)
 810434c:	e0bc1717 	ldw	r2,-4004(fp)
 8104350:	18804c1e 	bne	r3,r2,8104484 <main+0x298>
		z*=z;
 8104354:	e0bbfd0b 	ldhu	r2,-4108(fp)
 8104358:	e0fbfd0b 	ldhu	r3,-4108(fp)
 810435c:	1009883a 	mov	r4,r2
 8104360:	180b883a 	mov	r5,r3
 8104364:	81045140 	call	8104514 <__mulsi3>
 8104368:	e0bbfd0d 	sth	r2,-4108(fp)

		begin_snap = snap_timer();
 810436c:	81041a40 	call	81041a4 <snap_timer>
 8104370:	e0bc0915 	stw	r2,-4060(fp)
			tab[i]=z;
 8104374:	e0bc1717 	ldw	r2,-4004(fp)
 8104378:	e0fbfd0b 	ldhu	r3,-4108(fp)
 810437c:	1085883a 	add	r2,r2,r2
 8104380:	1085883a 	add	r2,r2,r2
 8104384:	e13bfd04 	addi	r4,fp,-4108
 8104388:	1105883a 	add	r2,r2,r4
 810438c:	10801b04 	addi	r2,r2,108
 8104390:	10c00015 	stw	r3,0(r2)
		end_snap =snap_timer();
 8104394:	81041a40 	call	81041a4 <snap_timer>
 8104398:	e0bc0815 	stw	r2,-4064(fp)
		write_snap = begin_snap-end_snap;
 810439c:	e0fc0917 	ldw	r3,-4060(fp)
 81043a0:	e0bc0817 	ldw	r2,-4064(fp)
 81043a4:	1885c83a 	sub	r2,r3,r2
 81043a8:	e0bc0515 	stw	r2,-4076(fp)

		if(compute_snap > 0 && read_snap > 0 && write_snap > 0){
 81043ac:	e0bc0717 	ldw	r2,-4068(fp)
 81043b0:	10800050 	cmplti	r2,r2,1
 81043b4:	1000331e 	bne	r2,zero,8104484 <main+0x298>
 81043b8:	e0bc0617 	ldw	r2,-4072(fp)
 81043bc:	10800050 	cmplti	r2,r2,1
 81043c0:	1000301e 	bne	r2,zero,8104484 <main+0x298>
 81043c4:	e0bc0517 	ldw	r2,-4076(fp)
 81043c8:	10800050 	cmplti	r2,r2,1
 81043cc:	10002d1e 	bne	r2,zero,8104484 <main+0x298>
			acc_compute_snap += compute_snap;
 81043d0:	e0bc0717 	ldw	r2,-4068(fp)
 81043d4:	1005d7fa 	srai	r2,r2,31
 81043d8:	e1bc0717 	ldw	r6,-4068(fp)
 81043dc:	100f883a 	mov	r7,r2
 81043e0:	e13c0317 	ldw	r4,-4084(fp)
 81043e4:	e17c0417 	ldw	r5,-4080(fp)
 81043e8:	2185883a 	add	r2,r4,r6
 81043ec:	1111803a 	cmpltu	r8,r2,r4
 81043f0:	29c7883a 	add	r3,r5,r7
 81043f4:	40c9883a 	add	r4,r8,r3
 81043f8:	2007883a 	mov	r3,r4
 81043fc:	e0bc0315 	stw	r2,-4084(fp)
 8104400:	e0fc0415 	stw	r3,-4080(fp)
			acc_read_snap += read_snap;
 8104404:	e0bc0617 	ldw	r2,-4072(fp)
 8104408:	1005d7fa 	srai	r2,r2,31
 810440c:	e1bc0617 	ldw	r6,-4072(fp)
 8104410:	100f883a 	mov	r7,r2
 8104414:	e13c0117 	ldw	r4,-4092(fp)
 8104418:	e17c0217 	ldw	r5,-4088(fp)
 810441c:	2185883a 	add	r2,r4,r6
 8104420:	1111803a 	cmpltu	r8,r2,r4
 8104424:	29c7883a 	add	r3,r5,r7
 8104428:	40c9883a 	add	r4,r8,r3
 810442c:	2007883a 	mov	r3,r4
 8104430:	e0bc0115 	stw	r2,-4092(fp)
 8104434:	e0fc0215 	stw	r3,-4088(fp)
			acc_write_snap += write_snap;
 8104438:	e0bc0517 	ldw	r2,-4076(fp)
 810443c:	1005d7fa 	srai	r2,r2,31
 8104440:	e1bc0517 	ldw	r6,-4076(fp)
 8104444:	100f883a 	mov	r7,r2
 8104448:	e13bff17 	ldw	r4,-4100(fp)
 810444c:	e17c0017 	ldw	r5,-4096(fp)
 8104450:	2185883a 	add	r2,r4,r6
 8104454:	1111803a 	cmpltu	r8,r2,r4
 8104458:	29c7883a 	add	r3,r5,r7
 810445c:	40c9883a 	add	r4,r8,r3
 8104460:	2007883a 	mov	r3,r4
 8104464:	e0bbff15 	stw	r2,-4100(fp)
 8104468:	e0fc0015 	stw	r3,-4096(fp)
		}else break;
		i++;
 810446c:	e0bc1717 	ldw	r2,-4004(fp)
 8104470:	10800044 	addi	r2,r2,1
 8104474:	e0bc1715 	stw	r2,-4004(fp)
	printf("t=%d\n",begin-end);



	i=0;
	while(i<N){
 8104478:	e0bc1717 	ldw	r2,-4004(fp)
 810447c:	1080fa30 	cmpltui	r2,r2,1000
 8104480:	103f961e 	bne	r2,zero,81042dc <main+0xf0>
			acc_read_snap += read_snap;
			acc_write_snap += write_snap;
		}else break;
		i++;
	}
	if(i==N){
 8104484:	e0bc1717 	ldw	r2,-4004(fp)
 8104488:	1080fa18 	cmpnei	r2,r2,1000
 810448c:	1000151e 	bne	r2,zero,81044e4 <main+0x2f8>
			printf("%llu\t",acc_compute_snap);
 8104490:	01020434 	movhi	r4,2064
 8104494:	21195d04 	addi	r4,r4,25972
 8104498:	e17c0317 	ldw	r5,-4084(fp)
 810449c:	e1bc0417 	ldw	r6,-4080(fp)
 81044a0:	810454c0 	call	810454c <printf>
			printf("%llu\t",acc_read_snap);
 81044a4:	01020434 	movhi	r4,2064
 81044a8:	21195d04 	addi	r4,r4,25972
 81044ac:	e17c0117 	ldw	r5,-4092(fp)
 81044b0:	e1bc0217 	ldw	r6,-4088(fp)
 81044b4:	810454c0 	call	810454c <printf>
			printf("%llu\t",acc_write_snap);
 81044b8:	01020434 	movhi	r4,2064
 81044bc:	21195d04 	addi	r4,r4,25972
 81044c0:	e17bff17 	ldw	r5,-4100(fp)
 81044c4:	e1bc0017 	ldw	r6,-4096(fp)
 81044c8:	810454c0 	call	810454c <printf>
			printf(MEMORY "\n",acc_write_snap);
 81044cc:	01020434 	movhi	r4,2064
 81044d0:	21195f04 	addi	r4,r4,25980
 81044d4:	e17bff17 	ldw	r5,-4100(fp)
 81044d8:	e1bc0017 	ldw	r6,-4096(fp)
 81044dc:	810454c0 	call	810454c <printf>
 81044e0:	00000506 	br	81044f8 <main+0x30c>
		}else{
			printf("error at i=%d t=%d\n",i,compute_snap);
 81044e4:	01020434 	movhi	r4,2064
 81044e8:	21196104 	addi	r4,r4,25988
 81044ec:	e17c1717 	ldw	r5,-4004(fp)
 81044f0:	e1bc0717 	ldw	r6,-4068(fp)
 81044f4:	810454c0 	call	810454c <printf>
		}


  return 0;
 81044f8:	0005883a 	mov	r2,zero
}
 81044fc:	e037883a 	mov	sp,fp
 8104500:	dfc00217 	ldw	ra,8(sp)
 8104504:	df000117 	ldw	fp,4(sp)
 8104508:	dc000017 	ldw	r16,0(sp)
 810450c:	dec00304 	addi	sp,sp,12
 8104510:	f800283a 	ret

08104514 <__mulsi3>:
 8104514:	20000a26 	beq	r4,zero,8104540 <__mulsi3+0x2c>
 8104518:	0007883a 	mov	r3,zero
 810451c:	2080004c 	andi	r2,r4,1
 8104520:	1005003a 	cmpeq	r2,r2,zero
 8104524:	2008d07a 	srli	r4,r4,1
 8104528:	1000011e 	bne	r2,zero,8104530 <__mulsi3+0x1c>
 810452c:	1947883a 	add	r3,r3,r5
 8104530:	294b883a 	add	r5,r5,r5
 8104534:	203ff91e 	bne	r4,zero,810451c <__mulsi3+0x8>
 8104538:	1805883a 	mov	r2,r3
 810453c:	f800283a 	ret
 8104540:	0007883a 	mov	r3,zero
 8104544:	1805883a 	mov	r2,r3
 8104548:	f800283a 	ret

0810454c <printf>:
 810454c:	defffb04 	addi	sp,sp,-20
 8104550:	dfc00115 	stw	ra,4(sp)
 8104554:	d9400215 	stw	r5,8(sp)
 8104558:	d9800315 	stw	r6,12(sp)
 810455c:	d9c00415 	stw	r7,16(sp)
 8104560:	00820434 	movhi	r2,2064
 8104564:	109a2204 	addi	r2,r2,26760
 8104568:	11400017 	ldw	r5,0(r2)
 810456c:	d8800204 	addi	r2,sp,8
 8104570:	d8800015 	stw	r2,0(sp)
 8104574:	29c00217 	ldw	r7,8(r5)
 8104578:	100d883a 	mov	r6,r2
 810457c:	00820434 	movhi	r2,2064
 8104580:	10937a04 	addi	r2,r2,19944
 8104584:	200b883a 	mov	r5,r4
 8104588:	38800115 	stw	r2,4(r7)
 810458c:	3809883a 	mov	r4,r7
 8104590:	8104dc40 	call	8104dc4 <__vfprintf_internal>
 8104594:	dfc00117 	ldw	ra,4(sp)
 8104598:	dec00504 	addi	sp,sp,20
 810459c:	f800283a 	ret

081045a0 <_printf_r>:
 81045a0:	defffc04 	addi	sp,sp,-16
 81045a4:	dfc00115 	stw	ra,4(sp)
 81045a8:	d9800215 	stw	r6,8(sp)
 81045ac:	d9c00315 	stw	r7,12(sp)
 81045b0:	22000217 	ldw	r8,8(r4)
 81045b4:	d8800204 	addi	r2,sp,8
 81045b8:	d8800015 	stw	r2,0(sp)
 81045bc:	100f883a 	mov	r7,r2
 81045c0:	00820434 	movhi	r2,2064
 81045c4:	10937a04 	addi	r2,r2,19944
 81045c8:	280d883a 	mov	r6,r5
 81045cc:	40800115 	stw	r2,4(r8)
 81045d0:	400b883a 	mov	r5,r8
 81045d4:	81047280 	call	8104728 <___vfprintf_internal_r>
 81045d8:	dfc00117 	ldw	ra,4(sp)
 81045dc:	dec00404 	addi	sp,sp,16
 81045e0:	f800283a 	ret

081045e4 <_puts_r>:
 81045e4:	defffd04 	addi	sp,sp,-12
 81045e8:	dc000015 	stw	r16,0(sp)
 81045ec:	2021883a 	mov	r16,r4
 81045f0:	2809883a 	mov	r4,r5
 81045f4:	dfc00215 	stw	ra,8(sp)
 81045f8:	dc400115 	stw	r17,4(sp)
 81045fc:	2823883a 	mov	r17,r5
 8104600:	81046880 	call	8104688 <strlen>
 8104604:	80c00217 	ldw	r3,8(r16)
 8104608:	02020434 	movhi	r8,2064
 810460c:	42137a04 	addi	r8,r8,19944
 8104610:	880d883a 	mov	r6,r17
 8104614:	100f883a 	mov	r7,r2
 8104618:	8009883a 	mov	r4,r16
 810461c:	180b883a 	mov	r5,r3
 8104620:	1a000115 	stw	r8,4(r3)
 8104624:	403ee83a 	callr	r8
 8104628:	047fffc4 	movi	r17,-1
 810462c:	8009883a 	mov	r4,r16
 8104630:	01820434 	movhi	r6,2064
 8104634:	31996604 	addi	r6,r6,26008
 8104638:	01c00044 	movi	r7,1
 810463c:	1440071e 	bne	r2,r17,810465c <_puts_r+0x78>
 8104640:	00ffffc4 	movi	r3,-1
 8104644:	1805883a 	mov	r2,r3
 8104648:	dfc00217 	ldw	ra,8(sp)
 810464c:	dc400117 	ldw	r17,4(sp)
 8104650:	dc000017 	ldw	r16,0(sp)
 8104654:	dec00304 	addi	sp,sp,12
 8104658:	f800283a 	ret
 810465c:	81400217 	ldw	r5,8(r16)
 8104660:	28c00117 	ldw	r3,4(r5)
 8104664:	183ee83a 	callr	r3
 8104668:	0007883a 	mov	r3,zero
 810466c:	147ff51e 	bne	r2,r17,8104644 <_puts_r+0x60>
 8104670:	003ff306 	br	8104640 <_puts_r+0x5c>

08104674 <puts>:
 8104674:	00820434 	movhi	r2,2064
 8104678:	109a2204 	addi	r2,r2,26760
 810467c:	200b883a 	mov	r5,r4
 8104680:	11000017 	ldw	r4,0(r2)
 8104684:	81045e41 	jmpi	81045e4 <_puts_r>

08104688 <strlen>:
 8104688:	20800007 	ldb	r2,0(r4)
 810468c:	10000526 	beq	r2,zero,81046a4 <strlen+0x1c>
 8104690:	2007883a 	mov	r3,r4
 8104694:	18c00044 	addi	r3,r3,1
 8104698:	18800007 	ldb	r2,0(r3)
 810469c:	103ffd1e 	bne	r2,zero,8104694 <strlen+0xc>
 81046a0:	1905c83a 	sub	r2,r3,r4
 81046a4:	f800283a 	ret

081046a8 <print_repeat>:
 81046a8:	defffb04 	addi	sp,sp,-20
 81046ac:	dc800315 	stw	r18,12(sp)
 81046b0:	dc400215 	stw	r17,8(sp)
 81046b4:	dc000115 	stw	r16,4(sp)
 81046b8:	dfc00415 	stw	ra,16(sp)
 81046bc:	2025883a 	mov	r18,r4
 81046c0:	2823883a 	mov	r17,r5
 81046c4:	3821883a 	mov	r16,r7
 81046c8:	d9800005 	stb	r6,0(sp)
 81046cc:	9009883a 	mov	r4,r18
 81046d0:	880b883a 	mov	r5,r17
 81046d4:	d80d883a 	mov	r6,sp
 81046d8:	01c00044 	movi	r7,1
 81046dc:	04000b0e 	bge	zero,r16,810470c <print_repeat+0x64>
 81046e0:	88c00117 	ldw	r3,4(r17)
 81046e4:	843fffc4 	addi	r16,r16,-1
 81046e8:	183ee83a 	callr	r3
 81046ec:	103ff726 	beq	r2,zero,81046cc <print_repeat+0x24>
 81046f0:	00bfffc4 	movi	r2,-1
 81046f4:	dfc00417 	ldw	ra,16(sp)
 81046f8:	dc800317 	ldw	r18,12(sp)
 81046fc:	dc400217 	ldw	r17,8(sp)
 8104700:	dc000117 	ldw	r16,4(sp)
 8104704:	dec00504 	addi	sp,sp,20
 8104708:	f800283a 	ret
 810470c:	0005883a 	mov	r2,zero
 8104710:	dfc00417 	ldw	ra,16(sp)
 8104714:	dc800317 	ldw	r18,12(sp)
 8104718:	dc400217 	ldw	r17,8(sp)
 810471c:	dc000117 	ldw	r16,4(sp)
 8104720:	dec00504 	addi	sp,sp,20
 8104724:	f800283a 	ret

08104728 <___vfprintf_internal_r>:
 8104728:	deffe304 	addi	sp,sp,-116
 810472c:	df001b15 	stw	fp,108(sp)
 8104730:	ddc01a15 	stw	r23,104(sp)
 8104734:	dd001715 	stw	r20,92(sp)
 8104738:	dc801515 	stw	r18,84(sp)
 810473c:	dc001315 	stw	r16,76(sp)
 8104740:	dfc01c15 	stw	ra,112(sp)
 8104744:	dd801915 	stw	r22,100(sp)
 8104748:	dd401815 	stw	r21,96(sp)
 810474c:	dcc01615 	stw	r19,88(sp)
 8104750:	dc401415 	stw	r17,80(sp)
 8104754:	d9001015 	stw	r4,64(sp)
 8104758:	2829883a 	mov	r20,r5
 810475c:	d9c01115 	stw	r7,68(sp)
 8104760:	3025883a 	mov	r18,r6
 8104764:	0021883a 	mov	r16,zero
 8104768:	d8000f15 	stw	zero,60(sp)
 810476c:	d8000e15 	stw	zero,56(sp)
 8104770:	0039883a 	mov	fp,zero
 8104774:	d8000915 	stw	zero,36(sp)
 8104778:	d8000d15 	stw	zero,52(sp)
 810477c:	d8000c15 	stw	zero,48(sp)
 8104780:	d8000b15 	stw	zero,44(sp)
 8104784:	002f883a 	mov	r23,zero
 8104788:	91400003 	ldbu	r5,0(r18)
 810478c:	01c00044 	movi	r7,1
 8104790:	94800044 	addi	r18,r18,1
 8104794:	29003fcc 	andi	r4,r5,255
 8104798:	2100201c 	xori	r4,r4,128
 810479c:	213fe004 	addi	r4,r4,-128
 81047a0:	20001526 	beq	r4,zero,81047f8 <___vfprintf_internal_r+0xd0>
 81047a4:	81c03526 	beq	r16,r7,810487c <___vfprintf_internal_r+0x154>
 81047a8:	3c002016 	blt	r7,r16,810482c <___vfprintf_internal_r+0x104>
 81047ac:	803ff61e 	bne	r16,zero,8104788 <___vfprintf_internal_r+0x60>
 81047b0:	00800944 	movi	r2,37
 81047b4:	2081501e 	bne	r4,r2,8104cf8 <___vfprintf_internal_r+0x5d0>
 81047b8:	073fffc4 	movi	fp,-1
 81047bc:	00800284 	movi	r2,10
 81047c0:	d9c00c15 	stw	r7,48(sp)
 81047c4:	d8000f15 	stw	zero,60(sp)
 81047c8:	d8000e15 	stw	zero,56(sp)
 81047cc:	df000915 	stw	fp,36(sp)
 81047d0:	d8800d15 	stw	r2,52(sp)
 81047d4:	d8000b15 	stw	zero,44(sp)
 81047d8:	91400003 	ldbu	r5,0(r18)
 81047dc:	3821883a 	mov	r16,r7
 81047e0:	94800044 	addi	r18,r18,1
 81047e4:	29003fcc 	andi	r4,r5,255
 81047e8:	2100201c 	xori	r4,r4,128
 81047ec:	213fe004 	addi	r4,r4,-128
 81047f0:	01c00044 	movi	r7,1
 81047f4:	203feb1e 	bne	r4,zero,81047a4 <___vfprintf_internal_r+0x7c>
 81047f8:	b805883a 	mov	r2,r23
 81047fc:	dfc01c17 	ldw	ra,112(sp)
 8104800:	df001b17 	ldw	fp,108(sp)
 8104804:	ddc01a17 	ldw	r23,104(sp)
 8104808:	dd801917 	ldw	r22,100(sp)
 810480c:	dd401817 	ldw	r21,96(sp)
 8104810:	dd001717 	ldw	r20,92(sp)
 8104814:	dcc01617 	ldw	r19,88(sp)
 8104818:	dc801517 	ldw	r18,84(sp)
 810481c:	dc401417 	ldw	r17,80(sp)
 8104820:	dc001317 	ldw	r16,76(sp)
 8104824:	dec01d04 	addi	sp,sp,116
 8104828:	f800283a 	ret
 810482c:	00800084 	movi	r2,2
 8104830:	80801726 	beq	r16,r2,8104890 <___vfprintf_internal_r+0x168>
 8104834:	008000c4 	movi	r2,3
 8104838:	80bfd31e 	bne	r16,r2,8104788 <___vfprintf_internal_r+0x60>
 810483c:	2c7ff404 	addi	r17,r5,-48
 8104840:	88c03fcc 	andi	r3,r17,255
 8104844:	00800244 	movi	r2,9
 8104848:	10c02136 	bltu	r2,r3,81048d0 <___vfprintf_internal_r+0x1a8>
 810484c:	d8c00917 	ldw	r3,36(sp)
 8104850:	18012716 	blt	r3,zero,8104cf0 <___vfprintf_internal_r+0x5c8>
 8104854:	d9000917 	ldw	r4,36(sp)
 8104858:	01400284 	movi	r5,10
 810485c:	81045140 	call	8104514 <__mulsi3>
 8104860:	1007883a 	mov	r3,r2
 8104864:	88803fcc 	andi	r2,r17,255
 8104868:	1080201c 	xori	r2,r2,128
 810486c:	10bfe004 	addi	r2,r2,-128
 8104870:	1887883a 	add	r3,r3,r2
 8104874:	d8c00915 	stw	r3,36(sp)
 8104878:	003fc306 	br	8104788 <___vfprintf_internal_r+0x60>
 810487c:	00800c04 	movi	r2,48
 8104880:	2080b326 	beq	r4,r2,8104b50 <___vfprintf_internal_r+0x428>
 8104884:	00800944 	movi	r2,37
 8104888:	20812726 	beq	r4,r2,8104d28 <___vfprintf_internal_r+0x600>
 810488c:	04000084 	movi	r16,2
 8104890:	2c7ff404 	addi	r17,r5,-48
 8104894:	88c03fcc 	andi	r3,r17,255
 8104898:	00800244 	movi	r2,9
 810489c:	10c00a36 	bltu	r2,r3,81048c8 <___vfprintf_internal_r+0x1a0>
 81048a0:	e000b416 	blt	fp,zero,8104b74 <___vfprintf_internal_r+0x44c>
 81048a4:	e009883a 	mov	r4,fp
 81048a8:	01400284 	movi	r5,10
 81048ac:	81045140 	call	8104514 <__mulsi3>
 81048b0:	1007883a 	mov	r3,r2
 81048b4:	88803fcc 	andi	r2,r17,255
 81048b8:	1080201c 	xori	r2,r2,128
 81048bc:	10bfe004 	addi	r2,r2,-128
 81048c0:	18b9883a 	add	fp,r3,r2
 81048c4:	003fb006 	br	8104788 <___vfprintf_internal_r+0x60>
 81048c8:	00800b84 	movi	r2,46
 81048cc:	2080a326 	beq	r4,r2,8104b5c <___vfprintf_internal_r+0x434>
 81048d0:	00801b04 	movi	r2,108
 81048d4:	2080a326 	beq	r4,r2,8104b64 <___vfprintf_internal_r+0x43c>
 81048d8:	d8c00917 	ldw	r3,36(sp)
 81048dc:	1800a716 	blt	r3,zero,8104b7c <___vfprintf_internal_r+0x454>
 81048e0:	d8000f15 	stw	zero,60(sp)
 81048e4:	28bfea04 	addi	r2,r5,-88
 81048e8:	10803fcc 	andi	r2,r2,255
 81048ec:	00c00804 	movi	r3,32
 81048f0:	18802836 	bltu	r3,r2,8104994 <___vfprintf_internal_r+0x26c>
 81048f4:	1085883a 	add	r2,r2,r2
 81048f8:	1085883a 	add	r2,r2,r2
 81048fc:	00c20434 	movhi	r3,2064
 8104900:	18d24404 	addi	r3,r3,18704
 8104904:	10c5883a 	add	r2,r2,r3
 8104908:	11000017 	ldw	r4,0(r2)
 810490c:	2000683a 	jmp	r4
 8104910:	0810499c 	xori	zero,at,16678
 8104914:	08104994 	ori	zero,at,16678
 8104918:	08104994 	ori	zero,at,16678
 810491c:	08104994 	ori	zero,at,16678
 8104920:	08104994 	ori	zero,at,16678
 8104924:	08104994 	ori	zero,at,16678
 8104928:	08104994 	ori	zero,at,16678
 810492c:	08104994 	ori	zero,at,16678
 8104930:	08104994 	ori	zero,at,16678
 8104934:	08104994 	ori	zero,at,16678
 8104938:	08104994 	ori	zero,at,16678
 810493c:	08104bc8 	cmpgei	zero,at,16687
 8104940:	081049b0 	cmpltui	zero,at,16678
 8104944:	08104994 	ori	zero,at,16678
 8104948:	08104994 	ori	zero,at,16678
 810494c:	08104994 	ori	zero,at,16678
 8104950:	08104994 	ori	zero,at,16678
 8104954:	081049b0 	cmpltui	zero,at,16678
 8104958:	08104994 	ori	zero,at,16678
 810495c:	08104994 	ori	zero,at,16678
 8104960:	08104994 	ori	zero,at,16678
 8104964:	08104994 	ori	zero,at,16678
 8104968:	08104994 	ori	zero,at,16678
 810496c:	08104c30 	cmpltui	zero,at,16688
 8104970:	08104994 	ori	zero,at,16678
 8104974:	08104994 	ori	zero,at,16678
 8104978:	08104994 	ori	zero,at,16678
 810497c:	08104c40 	call	8104c4 <__alt_mem_SDRAM_CONTROLLER-0x37efb3c>
 8104980:	08104994 	ori	zero,at,16678
 8104984:	08104b14 	ori	zero,at,16684
 8104988:	08104994 	ori	zero,at,16678
 810498c:	08104994 	ori	zero,at,16678
 8104990:	08104b0c 	andi	zero,at,16684
 8104994:	0021883a 	mov	r16,zero
 8104998:	003f7b06 	br	8104788 <___vfprintf_internal_r+0x60>
 810499c:	00c00404 	movi	r3,16
 81049a0:	00800044 	movi	r2,1
 81049a4:	d8c00d15 	stw	r3,52(sp)
 81049a8:	d8000c15 	stw	zero,48(sp)
 81049ac:	d8800b15 	stw	r2,44(sp)
 81049b0:	d8c00e17 	ldw	r3,56(sp)
 81049b4:	1805003a 	cmpeq	r2,r3,zero
 81049b8:	10005a1e 	bne	r2,zero,8104b24 <___vfprintf_internal_r+0x3fc>
 81049bc:	d8800c17 	ldw	r2,48(sp)
 81049c0:	1000781e 	bne	r2,zero,8104ba4 <___vfprintf_internal_r+0x47c>
 81049c4:	d8801117 	ldw	r2,68(sp)
 81049c8:	d8000a15 	stw	zero,40(sp)
 81049cc:	14400017 	ldw	r17,0(r2)
 81049d0:	11c00104 	addi	r7,r2,4
 81049d4:	d9c01115 	stw	r7,68(sp)
 81049d8:	88005a26 	beq	r17,zero,8104b44 <___vfprintf_internal_r+0x41c>
 81049dc:	d8c00b17 	ldw	r3,44(sp)
 81049e0:	dcc00044 	addi	r19,sp,1
 81049e4:	05800244 	movi	r22,9
 81049e8:	182b003a 	cmpeq	r21,r3,zero
 81049ec:	dcc01215 	stw	r19,72(sp)
 81049f0:	00000506 	br	8104a08 <___vfprintf_internal_r+0x2e0>
 81049f4:	21000c04 	addi	r4,r4,48
 81049f8:	99000005 	stb	r4,0(r19)
 81049fc:	9cc00044 	addi	r19,r19,1
 8104a00:	80000f26 	beq	r16,zero,8104a40 <___vfprintf_internal_r+0x318>
 8104a04:	8023883a 	mov	r17,r16
 8104a08:	d9400d17 	ldw	r5,52(sp)
 8104a0c:	8809883a 	mov	r4,r17
 8104a10:	81050580 	call	8105058 <__udivsi3>
 8104a14:	d9000d17 	ldw	r4,52(sp)
 8104a18:	100b883a 	mov	r5,r2
 8104a1c:	1021883a 	mov	r16,r2
 8104a20:	81045140 	call	8104514 <__mulsi3>
 8104a24:	8889c83a 	sub	r4,r17,r2
 8104a28:	b13ff20e 	bge	r22,r4,81049f4 <___vfprintf_internal_r+0x2cc>
 8104a2c:	a8009f1e 	bne	r21,zero,8104cac <___vfprintf_internal_r+0x584>
 8104a30:	21000dc4 	addi	r4,r4,55
 8104a34:	99000005 	stb	r4,0(r19)
 8104a38:	9cc00044 	addi	r19,r19,1
 8104a3c:	803ff11e 	bne	r16,zero,8104a04 <___vfprintf_internal_r+0x2dc>
 8104a40:	d8801217 	ldw	r2,72(sp)
 8104a44:	98a3c83a 	sub	r17,r19,r2
 8104a48:	d8c00917 	ldw	r3,36(sp)
 8104a4c:	1c4bc83a 	sub	r5,r3,r17
 8104a50:	0140130e 	bge	zero,r5,8104aa0 <___vfprintf_internal_r+0x378>
 8104a54:	d8c00044 	addi	r3,sp,1
 8104a58:	18800804 	addi	r2,r3,32
 8104a5c:	9880102e 	bgeu	r19,r2,8104aa0 <___vfprintf_internal_r+0x378>
 8104a60:	00800c04 	movi	r2,48
 8104a64:	28ffffc4 	addi	r3,r5,-1
 8104a68:	98800005 	stb	r2,0(r19)
 8104a6c:	99000044 	addi	r4,r19,1
 8104a70:	00c0080e 	bge	zero,r3,8104a94 <___vfprintf_internal_r+0x36c>
 8104a74:	d8c00044 	addi	r3,sp,1
 8104a78:	18800804 	addi	r2,r3,32
 8104a7c:	2080052e 	bgeu	r4,r2,8104a94 <___vfprintf_internal_r+0x36c>
 8104a80:	00800c04 	movi	r2,48
 8104a84:	20800005 	stb	r2,0(r4)
 8104a88:	21000044 	addi	r4,r4,1
 8104a8c:	9945883a 	add	r2,r19,r5
 8104a90:	20bff81e 	bne	r4,r2,8104a74 <___vfprintf_internal_r+0x34c>
 8104a94:	d8801217 	ldw	r2,72(sp)
 8104a98:	2027883a 	mov	r19,r4
 8104a9c:	20a3c83a 	sub	r17,r4,r2
 8104aa0:	d8c00a17 	ldw	r3,40(sp)
 8104aa4:	1c45883a 	add	r2,r3,r17
 8104aa8:	e0a1c83a 	sub	r16,fp,r2
 8104aac:	d8800f17 	ldw	r2,60(sp)
 8104ab0:	10008026 	beq	r2,zero,8104cb4 <___vfprintf_internal_r+0x58c>
 8104ab4:	1805003a 	cmpeq	r2,r3,zero
 8104ab8:	1000ae26 	beq	r2,zero,8104d74 <___vfprintf_internal_r+0x64c>
 8104abc:	0400a516 	blt	zero,r16,8104d54 <___vfprintf_internal_r+0x62c>
 8104ac0:	b805883a 	mov	r2,r23
 8104ac4:	0440950e 	bge	zero,r17,8104d1c <___vfprintf_internal_r+0x5f4>
 8104ac8:	102f883a 	mov	r23,r2
 8104acc:	1461883a 	add	r16,r2,r17
 8104ad0:	00000206 	br	8104adc <___vfprintf_internal_r+0x3b4>
 8104ad4:	bdc00044 	addi	r23,r23,1
 8104ad8:	85ffae26 	beq	r16,r23,8104994 <___vfprintf_internal_r+0x26c>
 8104adc:	9cffffc4 	addi	r19,r19,-1
 8104ae0:	98800003 	ldbu	r2,0(r19)
 8104ae4:	a0c00117 	ldw	r3,4(r20)
 8104ae8:	d9001017 	ldw	r4,64(sp)
 8104aec:	d8800005 	stb	r2,0(sp)
 8104af0:	a00b883a 	mov	r5,r20
 8104af4:	d80d883a 	mov	r6,sp
 8104af8:	01c00044 	movi	r7,1
 8104afc:	183ee83a 	callr	r3
 8104b00:	103ff426 	beq	r2,zero,8104ad4 <___vfprintf_internal_r+0x3ac>
 8104b04:	05ffffc4 	movi	r23,-1
 8104b08:	003f3b06 	br	81047f8 <___vfprintf_internal_r+0xd0>
 8104b0c:	00c00404 	movi	r3,16
 8104b10:	d8c00d15 	stw	r3,52(sp)
 8104b14:	d8000c15 	stw	zero,48(sp)
 8104b18:	d8c00e17 	ldw	r3,56(sp)
 8104b1c:	1805003a 	cmpeq	r2,r3,zero
 8104b20:	103fa626 	beq	r2,zero,81049bc <___vfprintf_internal_r+0x294>
 8104b24:	d8c00c17 	ldw	r3,48(sp)
 8104b28:	1800171e 	bne	r3,zero,8104b88 <___vfprintf_internal_r+0x460>
 8104b2c:	d8c01117 	ldw	r3,68(sp)
 8104b30:	d8000a15 	stw	zero,40(sp)
 8104b34:	1c400017 	ldw	r17,0(r3)
 8104b38:	19c00104 	addi	r7,r3,4
 8104b3c:	d9c01115 	stw	r7,68(sp)
 8104b40:	883fa61e 	bne	r17,zero,81049dc <___vfprintf_internal_r+0x2b4>
 8104b44:	dcc00044 	addi	r19,sp,1
 8104b48:	dcc01215 	stw	r19,72(sp)
 8104b4c:	003fbe06 	br	8104a48 <___vfprintf_internal_r+0x320>
 8104b50:	04000084 	movi	r16,2
 8104b54:	d9c00f15 	stw	r7,60(sp)
 8104b58:	003f0b06 	br	8104788 <___vfprintf_internal_r+0x60>
 8104b5c:	040000c4 	movi	r16,3
 8104b60:	003f0906 	br	8104788 <___vfprintf_internal_r+0x60>
 8104b64:	00800044 	movi	r2,1
 8104b68:	040000c4 	movi	r16,3
 8104b6c:	d8800e15 	stw	r2,56(sp)
 8104b70:	003f0506 	br	8104788 <___vfprintf_internal_r+0x60>
 8104b74:	0007883a 	mov	r3,zero
 8104b78:	003f4e06 	br	81048b4 <___vfprintf_internal_r+0x18c>
 8104b7c:	00800044 	movi	r2,1
 8104b80:	d8800915 	stw	r2,36(sp)
 8104b84:	003f5706 	br	81048e4 <___vfprintf_internal_r+0x1bc>
 8104b88:	d8801117 	ldw	r2,68(sp)
 8104b8c:	14400017 	ldw	r17,0(r2)
 8104b90:	10800104 	addi	r2,r2,4
 8104b94:	d8801115 	stw	r2,68(sp)
 8104b98:	88000716 	blt	r17,zero,8104bb8 <___vfprintf_internal_r+0x490>
 8104b9c:	d8000a15 	stw	zero,40(sp)
 8104ba0:	003f8d06 	br	81049d8 <___vfprintf_internal_r+0x2b0>
 8104ba4:	d8c01117 	ldw	r3,68(sp)
 8104ba8:	1c400017 	ldw	r17,0(r3)
 8104bac:	18c00104 	addi	r3,r3,4
 8104bb0:	d8c01115 	stw	r3,68(sp)
 8104bb4:	883ff90e 	bge	r17,zero,8104b9c <___vfprintf_internal_r+0x474>
 8104bb8:	00800044 	movi	r2,1
 8104bbc:	0463c83a 	sub	r17,zero,r17
 8104bc0:	d8800a15 	stw	r2,40(sp)
 8104bc4:	003f8406 	br	81049d8 <___vfprintf_internal_r+0x2b0>
 8104bc8:	04000044 	movi	r16,1
 8104bcc:	8700080e 	bge	r16,fp,8104bf0 <___vfprintf_internal_r+0x4c8>
 8104bd0:	d9001017 	ldw	r4,64(sp)
 8104bd4:	a00b883a 	mov	r5,r20
 8104bd8:	01800804 	movi	r6,32
 8104bdc:	e1ffffc4 	addi	r7,fp,-1
 8104be0:	81046a80 	call	81046a8 <print_repeat>
 8104be4:	103fc71e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104be8:	e5c5883a 	add	r2,fp,r23
 8104bec:	15ffffc4 	addi	r23,r2,-1
 8104bf0:	d8c01117 	ldw	r3,68(sp)
 8104bf4:	d9001017 	ldw	r4,64(sp)
 8104bf8:	800f883a 	mov	r7,r16
 8104bfc:	18800017 	ldw	r2,0(r3)
 8104c00:	a0c00117 	ldw	r3,4(r20)
 8104c04:	a00b883a 	mov	r5,r20
 8104c08:	d8800005 	stb	r2,0(sp)
 8104c0c:	d80d883a 	mov	r6,sp
 8104c10:	183ee83a 	callr	r3
 8104c14:	103fbb1e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104c18:	d8801117 	ldw	r2,68(sp)
 8104c1c:	bdc00044 	addi	r23,r23,1
 8104c20:	0021883a 	mov	r16,zero
 8104c24:	10800104 	addi	r2,r2,4
 8104c28:	d8801115 	stw	r2,68(sp)
 8104c2c:	003ed606 	br	8104788 <___vfprintf_internal_r+0x60>
 8104c30:	00800204 	movi	r2,8
 8104c34:	d8800d15 	stw	r2,52(sp)
 8104c38:	d8000c15 	stw	zero,48(sp)
 8104c3c:	003fb606 	br	8104b18 <___vfprintf_internal_r+0x3f0>
 8104c40:	d8c01117 	ldw	r3,68(sp)
 8104c44:	1cc00017 	ldw	r19,0(r3)
 8104c48:	9809883a 	mov	r4,r19
 8104c4c:	81046880 	call	8104688 <strlen>
 8104c50:	e0a1c83a 	sub	r16,fp,r2
 8104c54:	1023883a 	mov	r17,r2
 8104c58:	0400070e 	bge	zero,r16,8104c78 <___vfprintf_internal_r+0x550>
 8104c5c:	d9001017 	ldw	r4,64(sp)
 8104c60:	a00b883a 	mov	r5,r20
 8104c64:	01800804 	movi	r6,32
 8104c68:	800f883a 	mov	r7,r16
 8104c6c:	81046a80 	call	81046a8 <print_repeat>
 8104c70:	103fa41e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104c74:	bc2f883a 	add	r23,r23,r16
 8104c78:	a0c00117 	ldw	r3,4(r20)
 8104c7c:	d9001017 	ldw	r4,64(sp)
 8104c80:	980d883a 	mov	r6,r19
 8104c84:	a00b883a 	mov	r5,r20
 8104c88:	880f883a 	mov	r7,r17
 8104c8c:	183ee83a 	callr	r3
 8104c90:	103f9c1e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104c94:	d8801117 	ldw	r2,68(sp)
 8104c98:	bc6f883a 	add	r23,r23,r17
 8104c9c:	0021883a 	mov	r16,zero
 8104ca0:	10800104 	addi	r2,r2,4
 8104ca4:	d8801115 	stw	r2,68(sp)
 8104ca8:	003eb706 	br	8104788 <___vfprintf_internal_r+0x60>
 8104cac:	210015c4 	addi	r4,r4,87
 8104cb0:	003f5106 	br	81049f8 <___vfprintf_internal_r+0x2d0>
 8104cb4:	04003b16 	blt	zero,r16,8104da4 <___vfprintf_internal_r+0x67c>
 8104cb8:	d8c00a17 	ldw	r3,40(sp)
 8104cbc:	1805003a 	cmpeq	r2,r3,zero
 8104cc0:	103f7f1e 	bne	r2,zero,8104ac0 <___vfprintf_internal_r+0x398>
 8104cc4:	a0c00117 	ldw	r3,4(r20)
 8104cc8:	d9001017 	ldw	r4,64(sp)
 8104ccc:	00800b44 	movi	r2,45
 8104cd0:	d8800005 	stb	r2,0(sp)
 8104cd4:	a00b883a 	mov	r5,r20
 8104cd8:	d80d883a 	mov	r6,sp
 8104cdc:	01c00044 	movi	r7,1
 8104ce0:	183ee83a 	callr	r3
 8104ce4:	103f871e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104ce8:	b8800044 	addi	r2,r23,1
 8104cec:	003f7506 	br	8104ac4 <___vfprintf_internal_r+0x39c>
 8104cf0:	0007883a 	mov	r3,zero
 8104cf4:	003edb06 	br	8104864 <___vfprintf_internal_r+0x13c>
 8104cf8:	a0c00117 	ldw	r3,4(r20)
 8104cfc:	d9001017 	ldw	r4,64(sp)
 8104d00:	d9400005 	stb	r5,0(sp)
 8104d04:	d80d883a 	mov	r6,sp
 8104d08:	a00b883a 	mov	r5,r20
 8104d0c:	183ee83a 	callr	r3
 8104d10:	103f7c1e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104d14:	bdc00044 	addi	r23,r23,1
 8104d18:	003e9b06 	br	8104788 <___vfprintf_internal_r+0x60>
 8104d1c:	102f883a 	mov	r23,r2
 8104d20:	0021883a 	mov	r16,zero
 8104d24:	003e9806 	br	8104788 <___vfprintf_internal_r+0x60>
 8104d28:	a0c00117 	ldw	r3,4(r20)
 8104d2c:	d9000005 	stb	r4,0(sp)
 8104d30:	d9001017 	ldw	r4,64(sp)
 8104d34:	a00b883a 	mov	r5,r20
 8104d38:	d80d883a 	mov	r6,sp
 8104d3c:	800f883a 	mov	r7,r16
 8104d40:	183ee83a 	callr	r3
 8104d44:	103f6f1e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104d48:	bc2f883a 	add	r23,r23,r16
 8104d4c:	0021883a 	mov	r16,zero
 8104d50:	003e8d06 	br	8104788 <___vfprintf_internal_r+0x60>
 8104d54:	d9001017 	ldw	r4,64(sp)
 8104d58:	a00b883a 	mov	r5,r20
 8104d5c:	01800c04 	movi	r6,48
 8104d60:	800f883a 	mov	r7,r16
 8104d64:	81046a80 	call	81046a8 <print_repeat>
 8104d68:	103f661e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104d6c:	bc05883a 	add	r2,r23,r16
 8104d70:	003f5406 	br	8104ac4 <___vfprintf_internal_r+0x39c>
 8104d74:	a0c00117 	ldw	r3,4(r20)
 8104d78:	d9001017 	ldw	r4,64(sp)
 8104d7c:	00800b44 	movi	r2,45
 8104d80:	d8800005 	stb	r2,0(sp)
 8104d84:	a00b883a 	mov	r5,r20
 8104d88:	d80d883a 	mov	r6,sp
 8104d8c:	01c00044 	movi	r7,1
 8104d90:	183ee83a 	callr	r3
 8104d94:	103f5b1e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104d98:	bdc00044 	addi	r23,r23,1
 8104d9c:	043f480e 	bge	zero,r16,8104ac0 <___vfprintf_internal_r+0x398>
 8104da0:	003fec06 	br	8104d54 <___vfprintf_internal_r+0x62c>
 8104da4:	d9001017 	ldw	r4,64(sp)
 8104da8:	a00b883a 	mov	r5,r20
 8104dac:	01800804 	movi	r6,32
 8104db0:	800f883a 	mov	r7,r16
 8104db4:	81046a80 	call	81046a8 <print_repeat>
 8104db8:	103f521e 	bne	r2,zero,8104b04 <___vfprintf_internal_r+0x3dc>
 8104dbc:	bc2f883a 	add	r23,r23,r16
 8104dc0:	003fbd06 	br	8104cb8 <___vfprintf_internal_r+0x590>

08104dc4 <__vfprintf_internal>:
 8104dc4:	00820434 	movhi	r2,2064
 8104dc8:	109a2204 	addi	r2,r2,26760
 8104dcc:	2013883a 	mov	r9,r4
 8104dd0:	11000017 	ldw	r4,0(r2)
 8104dd4:	2805883a 	mov	r2,r5
 8104dd8:	300f883a 	mov	r7,r6
 8104ddc:	480b883a 	mov	r5,r9
 8104de0:	100d883a 	mov	r6,r2
 8104de4:	81047281 	jmpi	8104728 <___vfprintf_internal_r>

08104de8 <__sfvwrite_small_dev>:
 8104de8:	2880000b 	ldhu	r2,0(r5)
 8104dec:	defffa04 	addi	sp,sp,-24
 8104df0:	dcc00315 	stw	r19,12(sp)
 8104df4:	1080020c 	andi	r2,r2,8
 8104df8:	dc800215 	stw	r18,8(sp)
 8104dfc:	dc400115 	stw	r17,4(sp)
 8104e00:	dfc00515 	stw	ra,20(sp)
 8104e04:	dd000415 	stw	r20,16(sp)
 8104e08:	dc000015 	stw	r16,0(sp)
 8104e0c:	2825883a 	mov	r18,r5
 8104e10:	2027883a 	mov	r19,r4
 8104e14:	3023883a 	mov	r17,r6
 8104e18:	10002026 	beq	r2,zero,8104e9c <__sfvwrite_small_dev+0xb4>
 8104e1c:	2940008f 	ldh	r5,2(r5)
 8104e20:	28000f16 	blt	r5,zero,8104e60 <__sfvwrite_small_dev+0x78>
 8104e24:	01c01b0e 	bge	zero,r7,8104e94 <__sfvwrite_small_dev+0xac>
 8104e28:	3821883a 	mov	r16,r7
 8104e2c:	05010004 	movi	r20,1024
 8104e30:	00000206 	br	8104e3c <__sfvwrite_small_dev+0x54>
 8104e34:	0400170e 	bge	zero,r16,8104e94 <__sfvwrite_small_dev+0xac>
 8104e38:	9140008f 	ldh	r5,2(r18)
 8104e3c:	880d883a 	mov	r6,r17
 8104e40:	9809883a 	mov	r4,r19
 8104e44:	800f883a 	mov	r7,r16
 8104e48:	a400010e 	bge	r20,r16,8104e50 <__sfvwrite_small_dev+0x68>
 8104e4c:	01c10004 	movi	r7,1024
 8104e50:	8104ea40 	call	8104ea4 <_write_r>
 8104e54:	88a3883a 	add	r17,r17,r2
 8104e58:	80a1c83a 	sub	r16,r16,r2
 8104e5c:	00bff516 	blt	zero,r2,8104e34 <__sfvwrite_small_dev+0x4c>
 8104e60:	9080000b 	ldhu	r2,0(r18)
 8104e64:	00ffffc4 	movi	r3,-1
 8104e68:	10801014 	ori	r2,r2,64
 8104e6c:	9080000d 	sth	r2,0(r18)
 8104e70:	1805883a 	mov	r2,r3
 8104e74:	dfc00517 	ldw	ra,20(sp)
 8104e78:	dd000417 	ldw	r20,16(sp)
 8104e7c:	dcc00317 	ldw	r19,12(sp)
 8104e80:	dc800217 	ldw	r18,8(sp)
 8104e84:	dc400117 	ldw	r17,4(sp)
 8104e88:	dc000017 	ldw	r16,0(sp)
 8104e8c:	dec00604 	addi	sp,sp,24
 8104e90:	f800283a 	ret
 8104e94:	0007883a 	mov	r3,zero
 8104e98:	003ff506 	br	8104e70 <__sfvwrite_small_dev+0x88>
 8104e9c:	00ffffc4 	movi	r3,-1
 8104ea0:	003ff306 	br	8104e70 <__sfvwrite_small_dev+0x88>

08104ea4 <_write_r>:
 8104ea4:	defffd04 	addi	sp,sp,-12
 8104ea8:	dc000015 	stw	r16,0(sp)
 8104eac:	04020434 	movhi	r16,2064
 8104eb0:	841ae204 	addi	r16,r16,27528
 8104eb4:	dc400115 	stw	r17,4(sp)
 8104eb8:	80000015 	stw	zero,0(r16)
 8104ebc:	2023883a 	mov	r17,r4
 8104ec0:	2809883a 	mov	r4,r5
 8104ec4:	300b883a 	mov	r5,r6
 8104ec8:	380d883a 	mov	r6,r7
 8104ecc:	dfc00215 	stw	ra,8(sp)
 8104ed0:	81051c00 	call	81051c0 <write>
 8104ed4:	1007883a 	mov	r3,r2
 8104ed8:	00bfffc4 	movi	r2,-1
 8104edc:	18800626 	beq	r3,r2,8104ef8 <_write_r+0x54>
 8104ee0:	1805883a 	mov	r2,r3
 8104ee4:	dfc00217 	ldw	ra,8(sp)
 8104ee8:	dc400117 	ldw	r17,4(sp)
 8104eec:	dc000017 	ldw	r16,0(sp)
 8104ef0:	dec00304 	addi	sp,sp,12
 8104ef4:	f800283a 	ret
 8104ef8:	80800017 	ldw	r2,0(r16)
 8104efc:	103ff826 	beq	r2,zero,8104ee0 <_write_r+0x3c>
 8104f00:	88800015 	stw	r2,0(r17)
 8104f04:	1805883a 	mov	r2,r3
 8104f08:	dfc00217 	ldw	ra,8(sp)
 8104f0c:	dc400117 	ldw	r17,4(sp)
 8104f10:	dc000017 	ldw	r16,0(sp)
 8104f14:	dec00304 	addi	sp,sp,12
 8104f18:	f800283a 	ret

08104f1c <udivmodsi4>:
 8104f1c:	29001b2e 	bgeu	r5,r4,8104f8c <udivmodsi4+0x70>
 8104f20:	28001a16 	blt	r5,zero,8104f8c <udivmodsi4+0x70>
 8104f24:	00800044 	movi	r2,1
 8104f28:	0007883a 	mov	r3,zero
 8104f2c:	01c007c4 	movi	r7,31
 8104f30:	00000306 	br	8104f40 <udivmodsi4+0x24>
 8104f34:	19c01326 	beq	r3,r7,8104f84 <udivmodsi4+0x68>
 8104f38:	18c00044 	addi	r3,r3,1
 8104f3c:	28000416 	blt	r5,zero,8104f50 <udivmodsi4+0x34>
 8104f40:	294b883a 	add	r5,r5,r5
 8104f44:	1085883a 	add	r2,r2,r2
 8104f48:	293ffa36 	bltu	r5,r4,8104f34 <udivmodsi4+0x18>
 8104f4c:	10000d26 	beq	r2,zero,8104f84 <udivmodsi4+0x68>
 8104f50:	0007883a 	mov	r3,zero
 8104f54:	21400236 	bltu	r4,r5,8104f60 <udivmodsi4+0x44>
 8104f58:	2149c83a 	sub	r4,r4,r5
 8104f5c:	1886b03a 	or	r3,r3,r2
 8104f60:	1004d07a 	srli	r2,r2,1
 8104f64:	280ad07a 	srli	r5,r5,1
 8104f68:	103ffa1e 	bne	r2,zero,8104f54 <udivmodsi4+0x38>
 8104f6c:	30000226 	beq	r6,zero,8104f78 <udivmodsi4+0x5c>
 8104f70:	2005883a 	mov	r2,r4
 8104f74:	f800283a 	ret
 8104f78:	1809883a 	mov	r4,r3
 8104f7c:	2005883a 	mov	r2,r4
 8104f80:	f800283a 	ret
 8104f84:	0007883a 	mov	r3,zero
 8104f88:	003ff806 	br	8104f6c <udivmodsi4+0x50>
 8104f8c:	00800044 	movi	r2,1
 8104f90:	0007883a 	mov	r3,zero
 8104f94:	003fef06 	br	8104f54 <udivmodsi4+0x38>

08104f98 <__divsi3>:
 8104f98:	defffe04 	addi	sp,sp,-8
 8104f9c:	dc000015 	stw	r16,0(sp)
 8104fa0:	dfc00115 	stw	ra,4(sp)
 8104fa4:	0021883a 	mov	r16,zero
 8104fa8:	20000c16 	blt	r4,zero,8104fdc <__divsi3+0x44>
 8104fac:	000d883a 	mov	r6,zero
 8104fb0:	28000e16 	blt	r5,zero,8104fec <__divsi3+0x54>
 8104fb4:	8104f1c0 	call	8104f1c <udivmodsi4>
 8104fb8:	1007883a 	mov	r3,r2
 8104fbc:	8005003a 	cmpeq	r2,r16,zero
 8104fc0:	1000011e 	bne	r2,zero,8104fc8 <__divsi3+0x30>
 8104fc4:	00c7c83a 	sub	r3,zero,r3
 8104fc8:	1805883a 	mov	r2,r3
 8104fcc:	dfc00117 	ldw	ra,4(sp)
 8104fd0:	dc000017 	ldw	r16,0(sp)
 8104fd4:	dec00204 	addi	sp,sp,8
 8104fd8:	f800283a 	ret
 8104fdc:	0109c83a 	sub	r4,zero,r4
 8104fe0:	04000044 	movi	r16,1
 8104fe4:	000d883a 	mov	r6,zero
 8104fe8:	283ff20e 	bge	r5,zero,8104fb4 <__divsi3+0x1c>
 8104fec:	014bc83a 	sub	r5,zero,r5
 8104ff0:	8021003a 	cmpeq	r16,r16,zero
 8104ff4:	003fef06 	br	8104fb4 <__divsi3+0x1c>

08104ff8 <__modsi3>:
 8104ff8:	deffff04 	addi	sp,sp,-4
 8104ffc:	dfc00015 	stw	ra,0(sp)
 8105000:	01800044 	movi	r6,1
 8105004:	2807883a 	mov	r3,r5
 8105008:	20000416 	blt	r4,zero,810501c <__modsi3+0x24>
 810500c:	28000c16 	blt	r5,zero,8105040 <__modsi3+0x48>
 8105010:	dfc00017 	ldw	ra,0(sp)
 8105014:	dec00104 	addi	sp,sp,4
 8105018:	8104f1c1 	jmpi	8104f1c <udivmodsi4>
 810501c:	0109c83a 	sub	r4,zero,r4
 8105020:	28000b16 	blt	r5,zero,8105050 <__modsi3+0x58>
 8105024:	180b883a 	mov	r5,r3
 8105028:	01800044 	movi	r6,1
 810502c:	8104f1c0 	call	8104f1c <udivmodsi4>
 8105030:	0085c83a 	sub	r2,zero,r2
 8105034:	dfc00017 	ldw	ra,0(sp)
 8105038:	dec00104 	addi	sp,sp,4
 810503c:	f800283a 	ret
 8105040:	014bc83a 	sub	r5,zero,r5
 8105044:	dfc00017 	ldw	ra,0(sp)
 8105048:	dec00104 	addi	sp,sp,4
 810504c:	8104f1c1 	jmpi	8104f1c <udivmodsi4>
 8105050:	0147c83a 	sub	r3,zero,r5
 8105054:	003ff306 	br	8105024 <__modsi3+0x2c>

08105058 <__udivsi3>:
 8105058:	000d883a 	mov	r6,zero
 810505c:	8104f1c1 	jmpi	8104f1c <udivmodsi4>

08105060 <__umodsi3>:
 8105060:	01800044 	movi	r6,1
 8105064:	8104f1c1 	jmpi	8104f1c <udivmodsi4>

08105068 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8105068:	defffe04 	addi	sp,sp,-8
 810506c:	dfc00115 	stw	ra,4(sp)
 8105070:	df000015 	stw	fp,0(sp)
 8105074:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8105078:	01020434 	movhi	r4,2064
 810507c:	211a2a04 	addi	r4,r4,26792
 8105080:	01420434 	movhi	r5,2064
 8105084:	29597204 	addi	r5,r5,26056
 8105088:	01820434 	movhi	r6,2064
 810508c:	319a2a04 	addi	r6,r6,26792
 8105090:	81050e80 	call	81050e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8105094:	01020434 	movhi	r4,2064
 8105098:	21100804 	addi	r4,r4,16416
 810509c:	01420434 	movhi	r5,2064
 81050a0:	29500804 	addi	r5,r5,16416
 81050a4:	01820434 	movhi	r6,2064
 81050a8:	31900804 	addi	r6,r6,16416
 81050ac:	81050e80 	call	81050e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 81050b0:	01020434 	movhi	r4,2064
 81050b4:	21194a04 	addi	r4,r4,25896
 81050b8:	01420434 	movhi	r5,2064
 81050bc:	29594a04 	addi	r5,r5,25896
 81050c0:	01820434 	movhi	r6,2064
 81050c4:	31997204 	addi	r6,r6,26056
 81050c8:	81050e80 	call	81050e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 81050cc:	81057980 	call	8105798 <alt_dcache_flush_all>
  alt_icache_flush_all();
 81050d0:	81059bc0 	call	81059bc <alt_icache_flush_all>
}
 81050d4:	e037883a 	mov	sp,fp
 81050d8:	dfc00117 	ldw	ra,4(sp)
 81050dc:	df000017 	ldw	fp,0(sp)
 81050e0:	dec00204 	addi	sp,sp,8
 81050e4:	f800283a 	ret

081050e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 81050e8:	defffc04 	addi	sp,sp,-16
 81050ec:	df000315 	stw	fp,12(sp)
 81050f0:	df000304 	addi	fp,sp,12
 81050f4:	e13ffd15 	stw	r4,-12(fp)
 81050f8:	e17ffe15 	stw	r5,-8(fp)
 81050fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8105100:	e0fffe17 	ldw	r3,-8(fp)
 8105104:	e0bffd17 	ldw	r2,-12(fp)
 8105108:	18800e26 	beq	r3,r2,8105144 <alt_load_section+0x5c>
  {
    while( to != end )
 810510c:	00000a06 	br	8105138 <alt_load_section+0x50>
    {
      *to++ = *from++;
 8105110:	e0bffd17 	ldw	r2,-12(fp)
 8105114:	10c00017 	ldw	r3,0(r2)
 8105118:	e0bffe17 	ldw	r2,-8(fp)
 810511c:	10c00015 	stw	r3,0(r2)
 8105120:	e0bffe17 	ldw	r2,-8(fp)
 8105124:	10800104 	addi	r2,r2,4
 8105128:	e0bffe15 	stw	r2,-8(fp)
 810512c:	e0bffd17 	ldw	r2,-12(fp)
 8105130:	10800104 	addi	r2,r2,4
 8105134:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8105138:	e0fffe17 	ldw	r3,-8(fp)
 810513c:	e0bfff17 	ldw	r2,-4(fp)
 8105140:	18bff31e 	bne	r3,r2,8105110 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8105144:	e037883a 	mov	sp,fp
 8105148:	df000017 	ldw	fp,0(sp)
 810514c:	dec00104 	addi	sp,sp,4
 8105150:	f800283a 	ret

08105154 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8105154:	defffd04 	addi	sp,sp,-12
 8105158:	dfc00215 	stw	ra,8(sp)
 810515c:	df000115 	stw	fp,4(sp)
 8105160:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8105164:	0009883a 	mov	r4,zero
 8105168:	81053440 	call	8105344 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 810516c:	81053780 	call	8105378 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8105170:	01020434 	movhi	r4,2064
 8105174:	21196704 	addi	r4,r4,26012
 8105178:	01420434 	movhi	r5,2064
 810517c:	29596704 	addi	r5,r5,26012
 8105180:	01820434 	movhi	r6,2064
 8105184:	31996704 	addi	r6,r6,26012
 8105188:	8105ab00 	call	8105ab0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 810518c:	81058f40 	call	81058f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8105190:	01020434 	movhi	r4,2064
 8105194:	21165604 	addi	r4,r4,22872
 8105198:	81061280 	call	8106128 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 810519c:	d120c417 	ldw	r4,-31984(gp)
 81051a0:	d160c517 	ldw	r5,-31980(gp)
 81051a4:	d1a0c617 	ldw	r6,-31976(gp)
 81051a8:	81041ec0 	call	81041ec <main>
 81051ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 81051b0:	01000044 	movi	r4,1
 81051b4:	81056380 	call	8105638 <close>
  exit (result);
 81051b8:	e13fff17 	ldw	r4,-4(fp)
 81051bc:	810613c0 	call	810613c <exit>

081051c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 81051c0:	defff704 	addi	sp,sp,-36
 81051c4:	dfc00815 	stw	ra,32(sp)
 81051c8:	df000715 	stw	fp,28(sp)
 81051cc:	df000704 	addi	fp,sp,28
 81051d0:	e13ffb15 	stw	r4,-20(fp)
 81051d4:	e17ffc15 	stw	r5,-16(fp)
 81051d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 81051dc:	e0bffb17 	ldw	r2,-20(fp)
 81051e0:	1004803a 	cmplt	r2,r2,zero
 81051e4:	1000091e 	bne	r2,zero,810520c <write+0x4c>
 81051e8:	e13ffb17 	ldw	r4,-20(fp)
 81051ec:	01400304 	movi	r5,12
 81051f0:	81045140 	call	8104514 <__mulsi3>
 81051f4:	1007883a 	mov	r3,r2
 81051f8:	00820434 	movhi	r2,2064
 81051fc:	1099bf04 	addi	r2,r2,26364
 8105200:	1887883a 	add	r3,r3,r2
 8105204:	e0ffff15 	stw	r3,-4(fp)
 8105208:	00000106 	br	8105210 <write+0x50>
 810520c:	e03fff15 	stw	zero,-4(fp)
 8105210:	e0bfff17 	ldw	r2,-4(fp)
 8105214:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 8105218:	e0bffa17 	ldw	r2,-24(fp)
 810521c:	1005003a 	cmpeq	r2,r2,zero
 8105220:	1000241e 	bne	r2,zero,81052b4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8105224:	e0bffa17 	ldw	r2,-24(fp)
 8105228:	10800217 	ldw	r2,8(r2)
 810522c:	108000cc 	andi	r2,r2,3
 8105230:	1005003a 	cmpeq	r2,r2,zero
 8105234:	10001a1e 	bne	r2,zero,81052a0 <write+0xe0>
 8105238:	e0bffa17 	ldw	r2,-24(fp)
 810523c:	10800017 	ldw	r2,0(r2)
 8105240:	10800617 	ldw	r2,24(r2)
 8105244:	1005003a 	cmpeq	r2,r2,zero
 8105248:	1000151e 	bne	r2,zero,81052a0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 810524c:	e0bffa17 	ldw	r2,-24(fp)
 8105250:	10800017 	ldw	r2,0(r2)
 8105254:	10800617 	ldw	r2,24(r2)
 8105258:	e17ffc17 	ldw	r5,-16(fp)
 810525c:	e1bffd17 	ldw	r6,-12(fp)
 8105260:	e13ffa17 	ldw	r4,-24(fp)
 8105264:	103ee83a 	callr	r2
 8105268:	e0bff915 	stw	r2,-28(fp)
 810526c:	e0bff917 	ldw	r2,-28(fp)
 8105270:	1004403a 	cmpge	r2,r2,zero
 8105274:	1000071e 	bne	r2,zero,8105294 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 8105278:	81052e40 	call	81052e4 <alt_get_errno>
 810527c:	e0fff917 	ldw	r3,-28(fp)
 8105280:	00c7c83a 	sub	r3,zero,r3
 8105284:	10c00015 	stw	r3,0(r2)
        return -1;
 8105288:	00bfffc4 	movi	r2,-1
 810528c:	e0bffe15 	stw	r2,-8(fp)
 8105290:	00000e06 	br	81052cc <write+0x10c>
      }
      return rval;
 8105294:	e0bff917 	ldw	r2,-28(fp)
 8105298:	e0bffe15 	stw	r2,-8(fp)
 810529c:	00000b06 	br	81052cc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 81052a0:	81052e40 	call	81052e4 <alt_get_errno>
 81052a4:	1007883a 	mov	r3,r2
 81052a8:	00800344 	movi	r2,13
 81052ac:	18800015 	stw	r2,0(r3)
 81052b0:	00000406 	br	81052c4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 81052b4:	81052e40 	call	81052e4 <alt_get_errno>
 81052b8:	1007883a 	mov	r3,r2
 81052bc:	00801444 	movi	r2,81
 81052c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 81052c4:	00bfffc4 	movi	r2,-1
 81052c8:	e0bffe15 	stw	r2,-8(fp)
 81052cc:	e0bffe17 	ldw	r2,-8(fp)
}
 81052d0:	e037883a 	mov	sp,fp
 81052d4:	dfc00117 	ldw	ra,4(sp)
 81052d8:	df000017 	ldw	fp,0(sp)
 81052dc:	dec00204 	addi	sp,sp,8
 81052e0:	f800283a 	ret

081052e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 81052e4:	defffd04 	addi	sp,sp,-12
 81052e8:	dfc00215 	stw	ra,8(sp)
 81052ec:	df000115 	stw	fp,4(sp)
 81052f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 81052f4:	00820434 	movhi	r2,2064
 81052f8:	109a2904 	addi	r2,r2,26788
 81052fc:	10800017 	ldw	r2,0(r2)
 8105300:	1005003a 	cmpeq	r2,r2,zero
 8105304:	1000061e 	bne	r2,zero,8105320 <alt_get_errno+0x3c>
 8105308:	00820434 	movhi	r2,2064
 810530c:	109a2904 	addi	r2,r2,26788
 8105310:	10800017 	ldw	r2,0(r2)
 8105314:	103ee83a 	callr	r2
 8105318:	e0bfff15 	stw	r2,-4(fp)
 810531c:	00000306 	br	810532c <alt_get_errno+0x48>
 8105320:	00820434 	movhi	r2,2064
 8105324:	109ae204 	addi	r2,r2,27528
 8105328:	e0bfff15 	stw	r2,-4(fp)
 810532c:	e0bfff17 	ldw	r2,-4(fp)
}
 8105330:	e037883a 	mov	sp,fp
 8105334:	dfc00117 	ldw	ra,4(sp)
 8105338:	df000017 	ldw	fp,0(sp)
 810533c:	dec00204 	addi	sp,sp,8
 8105340:	f800283a 	ret

08105344 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8105344:	defffd04 	addi	sp,sp,-12
 8105348:	dfc00215 	stw	ra,8(sp)
 810534c:	df000115 	stw	fp,4(sp)
 8105350:	df000104 	addi	fp,sp,4
 8105354:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 8105358:	8105e840 	call	8105e84 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 810535c:	00800044 	movi	r2,1
 8105360:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8105364:	e037883a 	mov	sp,fp
 8105368:	dfc00117 	ldw	ra,4(sp)
 810536c:	df000017 	ldw	fp,0(sp)
 8105370:	dec00204 	addi	sp,sp,8
 8105374:	f800283a 	ret

08105378 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8105378:	defffe04 	addi	sp,sp,-8
 810537c:	dfc00115 	stw	ra,4(sp)
 8105380:	df000015 	stw	fp,0(sp)
 8105384:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
 8105388:	01020434 	movhi	r4,2064
 810538c:	2119aa04 	addi	r4,r4,26280
 8105390:	81053a80 	call	81053a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 8105394:	e037883a 	mov	sp,fp
 8105398:	dfc00117 	ldw	ra,4(sp)
 810539c:	df000017 	ldw	fp,0(sp)
 81053a0:	dec00204 	addi	sp,sp,8
 81053a4:	f800283a 	ret

081053a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 81053a8:	defffd04 	addi	sp,sp,-12
 81053ac:	dfc00215 	stw	ra,8(sp)
 81053b0:	df000115 	stw	fp,4(sp)
 81053b4:	df000104 	addi	fp,sp,4
 81053b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 81053bc:	e13fff17 	ldw	r4,-4(fp)
 81053c0:	01420434 	movhi	r5,2064
 81053c4:	295a2604 	addi	r5,r5,26776
 81053c8:	81057e00 	call	81057e0 <alt_dev_llist_insert>
}
 81053cc:	e037883a 	mov	sp,fp
 81053d0:	dfc00117 	ldw	ra,4(sp)
 81053d4:	df000017 	ldw	fp,0(sp)
 81053d8:	dec00204 	addi	sp,sp,8
 81053dc:	f800283a 	ret

081053e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 81053e0:	defffa04 	addi	sp,sp,-24
 81053e4:	dfc00515 	stw	ra,20(sp)
 81053e8:	df000415 	stw	fp,16(sp)
 81053ec:	df000404 	addi	fp,sp,16
 81053f0:	e13ffd15 	stw	r4,-12(fp)
 81053f4:	e17ffe15 	stw	r5,-8(fp)
 81053f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 81053fc:	e0bffd17 	ldw	r2,-12(fp)
 8105400:	10800017 	ldw	r2,0(r2)
 8105404:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8105408:	e0bffc17 	ldw	r2,-16(fp)
 810540c:	11000a04 	addi	r4,r2,40
 8105410:	e0bffd17 	ldw	r2,-12(fp)
 8105414:	11c00217 	ldw	r7,8(r2)
 8105418:	e17ffe17 	ldw	r5,-8(fp)
 810541c:	e1bfff17 	ldw	r6,-4(fp)
 8105420:	81054900 	call	8105490 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8105424:	e037883a 	mov	sp,fp
 8105428:	dfc00117 	ldw	ra,4(sp)
 810542c:	df000017 	ldw	fp,0(sp)
 8105430:	dec00204 	addi	sp,sp,8
 8105434:	f800283a 	ret

08105438 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8105438:	defffa04 	addi	sp,sp,-24
 810543c:	dfc00515 	stw	ra,20(sp)
 8105440:	df000415 	stw	fp,16(sp)
 8105444:	df000404 	addi	fp,sp,16
 8105448:	e13ffd15 	stw	r4,-12(fp)
 810544c:	e17ffe15 	stw	r5,-8(fp)
 8105450:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8105454:	e0bffd17 	ldw	r2,-12(fp)
 8105458:	10800017 	ldw	r2,0(r2)
 810545c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8105460:	e0bffc17 	ldw	r2,-16(fp)
 8105464:	11000a04 	addi	r4,r2,40
 8105468:	e0bffd17 	ldw	r2,-12(fp)
 810546c:	11c00217 	ldw	r7,8(r2)
 8105470:	e17ffe17 	ldw	r5,-8(fp)
 8105474:	e1bfff17 	ldw	r6,-4(fp)
 8105478:	81055940 	call	8105594 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 810547c:	e037883a 	mov	sp,fp
 8105480:	dfc00117 	ldw	ra,4(sp)
 8105484:	df000017 	ldw	fp,0(sp)
 8105488:	dec00204 	addi	sp,sp,8
 810548c:	f800283a 	ret

08105490 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 8105490:	defff604 	addi	sp,sp,-40
 8105494:	df000915 	stw	fp,36(sp)
 8105498:	df000904 	addi	fp,sp,36
 810549c:	e13ffb15 	stw	r4,-20(fp)
 81054a0:	e17ffc15 	stw	r5,-16(fp)
 81054a4:	e1bffd15 	stw	r6,-12(fp)
 81054a8:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
 81054ac:	e0bffb17 	ldw	r2,-20(fp)
 81054b0:	10800017 	ldw	r2,0(r2)
 81054b4:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
 81054b8:	e0bffc17 	ldw	r2,-16(fp)
 81054bc:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
 81054c0:	e0bffd17 	ldw	r2,-12(fp)
 81054c4:	1007883a 	mov	r3,r2
 81054c8:	e0bffc17 	ldw	r2,-16(fp)
 81054cc:	10c5883a 	add	r2,r2,r3
 81054d0:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
 81054d4:	00001606 	br	8105530 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 81054d8:	e0bffa17 	ldw	r2,-24(fp)
 81054dc:	10800037 	ldwio	r2,0(r2)
 81054e0:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 81054e4:	e0bff717 	ldw	r2,-36(fp)
 81054e8:	10a0000c 	andi	r2,r2,32768
 81054ec:	1005003a 	cmpeq	r2,r2,zero
 81054f0:	1000081e 	bne	r2,zero,8105514 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 81054f4:	e0bff717 	ldw	r2,-36(fp)
 81054f8:	1007883a 	mov	r3,r2
 81054fc:	e0bff917 	ldw	r2,-28(fp)
 8105500:	10c00005 	stb	r3,0(r2)
 8105504:	e0bff917 	ldw	r2,-28(fp)
 8105508:	10800044 	addi	r2,r2,1
 810550c:	e0bff915 	stw	r2,-28(fp)
 8105510:	00000706 	br	8105530 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 8105514:	e0fff917 	ldw	r3,-28(fp)
 8105518:	e0bffc17 	ldw	r2,-16(fp)
 810551c:	1880071e 	bne	r3,r2,810553c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
 8105520:	e0bffe17 	ldw	r2,-8(fp)
 8105524:	1090000c 	andi	r2,r2,16384
 8105528:	1004c03a 	cmpne	r2,r2,zero
 810552c:	1000031e 	bne	r2,zero,810553c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 8105530:	e0fff917 	ldw	r3,-28(fp)
 8105534:	e0bff817 	ldw	r2,-32(fp)
 8105538:	18bfe736 	bltu	r3,r2,81054d8 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 810553c:	e0fff917 	ldw	r3,-28(fp)
 8105540:	e0bffc17 	ldw	r2,-16(fp)
 8105544:	18800526 	beq	r3,r2,810555c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
 8105548:	e0fff917 	ldw	r3,-28(fp)
 810554c:	e0bffc17 	ldw	r2,-16(fp)
 8105550:	1887c83a 	sub	r3,r3,r2
 8105554:	e0ffff15 	stw	r3,-4(fp)
 8105558:	00000906 	br	8105580 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
 810555c:	e0bffe17 	ldw	r2,-8(fp)
 8105560:	1090000c 	andi	r2,r2,16384
 8105564:	1005003a 	cmpeq	r2,r2,zero
 8105568:	1000031e 	bne	r2,zero,8105578 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
 810556c:	00bffd44 	movi	r2,-11
 8105570:	e0bfff15 	stw	r2,-4(fp)
 8105574:	00000206 	br	8105580 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
 8105578:	00bffec4 	movi	r2,-5
 810557c:	e0bfff15 	stw	r2,-4(fp)
 8105580:	e0bfff17 	ldw	r2,-4(fp)
}
 8105584:	e037883a 	mov	sp,fp
 8105588:	df000017 	ldw	fp,0(sp)
 810558c:	dec00104 	addi	sp,sp,4
 8105590:	f800283a 	ret

08105594 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8105594:	defff904 	addi	sp,sp,-28
 8105598:	df000615 	stw	fp,24(sp)
 810559c:	df000604 	addi	fp,sp,24
 81055a0:	e13ffc15 	stw	r4,-16(fp)
 81055a4:	e17ffd15 	stw	r5,-12(fp)
 81055a8:	e1bffe15 	stw	r6,-8(fp)
 81055ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 81055b0:	e0bffc17 	ldw	r2,-16(fp)
 81055b4:	10800017 	ldw	r2,0(r2)
 81055b8:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
 81055bc:	e0bffe17 	ldw	r2,-8(fp)
 81055c0:	1007883a 	mov	r3,r2
 81055c4:	e0bffd17 	ldw	r2,-12(fp)
 81055c8:	10c5883a 	add	r2,r2,r3
 81055cc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 81055d0:	00001106 	br	8105618 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 81055d4:	e0bffb17 	ldw	r2,-20(fp)
 81055d8:	10800104 	addi	r2,r2,4
 81055dc:	10800037 	ldwio	r2,0(r2)
 81055e0:	10bfffec 	andhi	r2,r2,65535
 81055e4:	1005003a 	cmpeq	r2,r2,zero
 81055e8:	10000b1e 	bne	r2,zero,8105618 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 81055ec:	e13ffb17 	ldw	r4,-20(fp)
 81055f0:	e0bffd17 	ldw	r2,-12(fp)
 81055f4:	10800003 	ldbu	r2,0(r2)
 81055f8:	10c03fcc 	andi	r3,r2,255
 81055fc:	18c0201c 	xori	r3,r3,128
 8105600:	18ffe004 	addi	r3,r3,-128
 8105604:	e0bffd17 	ldw	r2,-12(fp)
 8105608:	10800044 	addi	r2,r2,1
 810560c:	e0bffd15 	stw	r2,-12(fp)
 8105610:	2005883a 	mov	r2,r4
 8105614:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8105618:	e0fffd17 	ldw	r3,-12(fp)
 810561c:	e0bffa17 	ldw	r2,-24(fp)
 8105620:	18bfec36 	bltu	r3,r2,81055d4 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 8105624:	e0bffe17 	ldw	r2,-8(fp)
}
 8105628:	e037883a 	mov	sp,fp
 810562c:	df000017 	ldw	fp,0(sp)
 8105630:	dec00104 	addi	sp,sp,4
 8105634:	f800283a 	ret

08105638 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8105638:	defff804 	addi	sp,sp,-32
 810563c:	dfc00715 	stw	ra,28(sp)
 8105640:	df000615 	stw	fp,24(sp)
 8105644:	df000604 	addi	fp,sp,24
 8105648:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 810564c:	e0bffc17 	ldw	r2,-16(fp)
 8105650:	1004803a 	cmplt	r2,r2,zero
 8105654:	1000091e 	bne	r2,zero,810567c <close+0x44>
 8105658:	e13ffc17 	ldw	r4,-16(fp)
 810565c:	01400304 	movi	r5,12
 8105660:	81045140 	call	8104514 <__mulsi3>
 8105664:	1007883a 	mov	r3,r2
 8105668:	00820434 	movhi	r2,2064
 810566c:	1099bf04 	addi	r2,r2,26364
 8105670:	1887883a 	add	r3,r3,r2
 8105674:	e0ffff15 	stw	r3,-4(fp)
 8105678:	00000106 	br	8105680 <close+0x48>
 810567c:	e03fff15 	stw	zero,-4(fp)
 8105680:	e0bfff17 	ldw	r2,-4(fp)
 8105684:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8105688:	e0bffb17 	ldw	r2,-20(fp)
 810568c:	1005003a 	cmpeq	r2,r2,zero
 8105690:	10001d1e 	bne	r2,zero,8105708 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8105694:	e0bffb17 	ldw	r2,-20(fp)
 8105698:	10800017 	ldw	r2,0(r2)
 810569c:	10800417 	ldw	r2,16(r2)
 81056a0:	1005003a 	cmpeq	r2,r2,zero
 81056a4:	1000071e 	bne	r2,zero,81056c4 <close+0x8c>
 81056a8:	e0bffb17 	ldw	r2,-20(fp)
 81056ac:	10800017 	ldw	r2,0(r2)
 81056b0:	10800417 	ldw	r2,16(r2)
 81056b4:	e13ffb17 	ldw	r4,-20(fp)
 81056b8:	103ee83a 	callr	r2
 81056bc:	e0bffe15 	stw	r2,-8(fp)
 81056c0:	00000106 	br	81056c8 <close+0x90>
 81056c4:	e03ffe15 	stw	zero,-8(fp)
 81056c8:	e0bffe17 	ldw	r2,-8(fp)
 81056cc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 81056d0:	e13ffc17 	ldw	r4,-16(fp)
 81056d4:	8105e0c0 	call	8105e0c <alt_release_fd>
    if (rval < 0)
 81056d8:	e0bffa17 	ldw	r2,-24(fp)
 81056dc:	1004403a 	cmpge	r2,r2,zero
 81056e0:	1000071e 	bne	r2,zero,8105700 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 81056e4:	81057380 	call	8105738 <alt_get_errno>
 81056e8:	e0fffa17 	ldw	r3,-24(fp)
 81056ec:	00c7c83a 	sub	r3,zero,r3
 81056f0:	10c00015 	stw	r3,0(r2)
      return -1;
 81056f4:	00bfffc4 	movi	r2,-1
 81056f8:	e0bffd15 	stw	r2,-12(fp)
 81056fc:	00000806 	br	8105720 <close+0xe8>
    }
    return 0;
 8105700:	e03ffd15 	stw	zero,-12(fp)
 8105704:	00000606 	br	8105720 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8105708:	81057380 	call	8105738 <alt_get_errno>
 810570c:	1007883a 	mov	r3,r2
 8105710:	00801444 	movi	r2,81
 8105714:	18800015 	stw	r2,0(r3)
    return -1;
 8105718:	00bfffc4 	movi	r2,-1
 810571c:	e0bffd15 	stw	r2,-12(fp)
 8105720:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 8105724:	e037883a 	mov	sp,fp
 8105728:	dfc00117 	ldw	ra,4(sp)
 810572c:	df000017 	ldw	fp,0(sp)
 8105730:	dec00204 	addi	sp,sp,8
 8105734:	f800283a 	ret

08105738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8105738:	defffd04 	addi	sp,sp,-12
 810573c:	dfc00215 	stw	ra,8(sp)
 8105740:	df000115 	stw	fp,4(sp)
 8105744:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8105748:	00820434 	movhi	r2,2064
 810574c:	109a2904 	addi	r2,r2,26788
 8105750:	10800017 	ldw	r2,0(r2)
 8105754:	1005003a 	cmpeq	r2,r2,zero
 8105758:	1000061e 	bne	r2,zero,8105774 <alt_get_errno+0x3c>
 810575c:	00820434 	movhi	r2,2064
 8105760:	109a2904 	addi	r2,r2,26788
 8105764:	10800017 	ldw	r2,0(r2)
 8105768:	103ee83a 	callr	r2
 810576c:	e0bfff15 	stw	r2,-4(fp)
 8105770:	00000306 	br	8105780 <alt_get_errno+0x48>
 8105774:	00820434 	movhi	r2,2064
 8105778:	109ae204 	addi	r2,r2,27528
 810577c:	e0bfff15 	stw	r2,-4(fp)
 8105780:	e0bfff17 	ldw	r2,-4(fp)
}
 8105784:	e037883a 	mov	sp,fp
 8105788:	dfc00117 	ldw	ra,4(sp)
 810578c:	df000017 	ldw	fp,0(sp)
 8105790:	dec00204 	addi	sp,sp,8
 8105794:	f800283a 	ret

08105798 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8105798:	deffff04 	addi	sp,sp,-4
 810579c:	df000015 	stw	fp,0(sp)
 81057a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 81057a4:	e037883a 	mov	sp,fp
 81057a8:	df000017 	ldw	fp,0(sp)
 81057ac:	dec00104 	addi	sp,sp,4
 81057b0:	f800283a 	ret

081057b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 81057b4:	defffc04 	addi	sp,sp,-16
 81057b8:	df000315 	stw	fp,12(sp)
 81057bc:	df000304 	addi	fp,sp,12
 81057c0:	e13ffd15 	stw	r4,-12(fp)
 81057c4:	e17ffe15 	stw	r5,-8(fp)
 81057c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 81057cc:	e0bfff17 	ldw	r2,-4(fp)
}
 81057d0:	e037883a 	mov	sp,fp
 81057d4:	df000017 	ldw	fp,0(sp)
 81057d8:	dec00104 	addi	sp,sp,4
 81057dc:	f800283a 	ret

081057e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 81057e0:	defff904 	addi	sp,sp,-28
 81057e4:	dfc00615 	stw	ra,24(sp)
 81057e8:	df000515 	stw	fp,20(sp)
 81057ec:	df000504 	addi	fp,sp,20
 81057f0:	e13ffd15 	stw	r4,-12(fp)
 81057f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 81057f8:	e0bffd17 	ldw	r2,-12(fp)
 81057fc:	1005003a 	cmpeq	r2,r2,zero
 8105800:	1000041e 	bne	r2,zero,8105814 <alt_dev_llist_insert+0x34>
 8105804:	e0bffd17 	ldw	r2,-12(fp)
 8105808:	10800217 	ldw	r2,8(r2)
 810580c:	1004c03a 	cmpne	r2,r2,zero
 8105810:	1000071e 	bne	r2,zero,8105830 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8105814:	81058940 	call	8105894 <alt_get_errno>
 8105818:	1007883a 	mov	r3,r2
 810581c:	00800584 	movi	r2,22
 8105820:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8105824:	00bffa84 	movi	r2,-22
 8105828:	e0bfff15 	stw	r2,-4(fp)
 810582c:	00001306 	br	810587c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8105830:	e0fffd17 	ldw	r3,-12(fp)
 8105834:	e0bffe17 	ldw	r2,-8(fp)
 8105838:	e0bffb15 	stw	r2,-20(fp)
 810583c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8105840:	e0fffc17 	ldw	r3,-16(fp)
 8105844:	e0bffb17 	ldw	r2,-20(fp)
 8105848:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 810584c:	e0bffb17 	ldw	r2,-20(fp)
 8105850:	10c00017 	ldw	r3,0(r2)
 8105854:	e0bffc17 	ldw	r2,-16(fp)
 8105858:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 810585c:	e0bffb17 	ldw	r2,-20(fp)
 8105860:	10c00017 	ldw	r3,0(r2)
 8105864:	e0bffc17 	ldw	r2,-16(fp)
 8105868:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 810586c:	e0fffb17 	ldw	r3,-20(fp)
 8105870:	e0bffc17 	ldw	r2,-16(fp)
 8105874:	18800015 	stw	r2,0(r3)

  return 0;  
 8105878:	e03fff15 	stw	zero,-4(fp)
 810587c:	e0bfff17 	ldw	r2,-4(fp)
}
 8105880:	e037883a 	mov	sp,fp
 8105884:	dfc00117 	ldw	ra,4(sp)
 8105888:	df000017 	ldw	fp,0(sp)
 810588c:	dec00204 	addi	sp,sp,8
 8105890:	f800283a 	ret

08105894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8105894:	defffd04 	addi	sp,sp,-12
 8105898:	dfc00215 	stw	ra,8(sp)
 810589c:	df000115 	stw	fp,4(sp)
 81058a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 81058a4:	00820434 	movhi	r2,2064
 81058a8:	109a2904 	addi	r2,r2,26788
 81058ac:	10800017 	ldw	r2,0(r2)
 81058b0:	1005003a 	cmpeq	r2,r2,zero
 81058b4:	1000061e 	bne	r2,zero,81058d0 <alt_get_errno+0x3c>
 81058b8:	00820434 	movhi	r2,2064
 81058bc:	109a2904 	addi	r2,r2,26788
 81058c0:	10800017 	ldw	r2,0(r2)
 81058c4:	103ee83a 	callr	r2
 81058c8:	e0bfff15 	stw	r2,-4(fp)
 81058cc:	00000306 	br	81058dc <alt_get_errno+0x48>
 81058d0:	00820434 	movhi	r2,2064
 81058d4:	109ae204 	addi	r2,r2,27528
 81058d8:	e0bfff15 	stw	r2,-4(fp)
 81058dc:	e0bfff17 	ldw	r2,-4(fp)
}
 81058e0:	e037883a 	mov	sp,fp
 81058e4:	dfc00117 	ldw	ra,4(sp)
 81058e8:	df000017 	ldw	fp,0(sp)
 81058ec:	dec00204 	addi	sp,sp,8
 81058f0:	f800283a 	ret

081058f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 81058f4:	defffd04 	addi	sp,sp,-12
 81058f8:	dfc00215 	stw	ra,8(sp)
 81058fc:	df000115 	stw	fp,4(sp)
 8105900:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8105904:	00bfff04 	movi	r2,-4
 8105908:	00c20434 	movhi	r3,2064
 810590c:	18d94a04 	addi	r3,r3,25896
 8105910:	1885883a 	add	r2,r3,r2
 8105914:	e0bfff15 	stw	r2,-4(fp)
 8105918:	00000606 	br	8105934 <_do_ctors+0x40>
        (*ctor) (); 
 810591c:	e0bfff17 	ldw	r2,-4(fp)
 8105920:	10800017 	ldw	r2,0(r2)
 8105924:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8105928:	e0bfff17 	ldw	r2,-4(fp)
 810592c:	10bfff04 	addi	r2,r2,-4
 8105930:	e0bfff15 	stw	r2,-4(fp)
 8105934:	e0ffff17 	ldw	r3,-4(fp)
 8105938:	00820434 	movhi	r2,2064
 810593c:	10994904 	addi	r2,r2,25892
 8105940:	18bff62e 	bgeu	r3,r2,810591c <_do_ctors+0x28>
        (*ctor) (); 
}
 8105944:	e037883a 	mov	sp,fp
 8105948:	dfc00117 	ldw	ra,4(sp)
 810594c:	df000017 	ldw	fp,0(sp)
 8105950:	dec00204 	addi	sp,sp,8
 8105954:	f800283a 	ret

08105958 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8105958:	defffd04 	addi	sp,sp,-12
 810595c:	dfc00215 	stw	ra,8(sp)
 8105960:	df000115 	stw	fp,4(sp)
 8105964:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8105968:	00bfff04 	movi	r2,-4
 810596c:	00c20434 	movhi	r3,2064
 8105970:	18d94a04 	addi	r3,r3,25896
 8105974:	1885883a 	add	r2,r3,r2
 8105978:	e0bfff15 	stw	r2,-4(fp)
 810597c:	00000606 	br	8105998 <_do_dtors+0x40>
        (*dtor) (); 
 8105980:	e0bfff17 	ldw	r2,-4(fp)
 8105984:	10800017 	ldw	r2,0(r2)
 8105988:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 810598c:	e0bfff17 	ldw	r2,-4(fp)
 8105990:	10bfff04 	addi	r2,r2,-4
 8105994:	e0bfff15 	stw	r2,-4(fp)
 8105998:	e0ffff17 	ldw	r3,-4(fp)
 810599c:	00820434 	movhi	r2,2064
 81059a0:	10994a04 	addi	r2,r2,25896
 81059a4:	18bff62e 	bgeu	r3,r2,8105980 <_do_dtors+0x28>
        (*dtor) (); 
}
 81059a8:	e037883a 	mov	sp,fp
 81059ac:	dfc00117 	ldw	ra,4(sp)
 81059b0:	df000017 	ldw	fp,0(sp)
 81059b4:	dec00204 	addi	sp,sp,8
 81059b8:	f800283a 	ret

081059bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 81059bc:	deffff04 	addi	sp,sp,-4
 81059c0:	df000015 	stw	fp,0(sp)
 81059c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 81059c8:	e037883a 	mov	sp,fp
 81059cc:	df000017 	ldw	fp,0(sp)
 81059d0:	dec00104 	addi	sp,sp,4
 81059d4:	f800283a 	ret

081059d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 81059d8:	defff804 	addi	sp,sp,-32
 81059dc:	dfc00715 	stw	ra,28(sp)
 81059e0:	df000615 	stw	fp,24(sp)
 81059e4:	dc000515 	stw	r16,20(sp)
 81059e8:	df000504 	addi	fp,sp,20
 81059ec:	e13ffc15 	stw	r4,-16(fp)
 81059f0:	e17ffd15 	stw	r5,-12(fp)
 81059f4:	e1bffe15 	stw	r6,-8(fp)
 81059f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 81059fc:	e13ffd17 	ldw	r4,-12(fp)
 8105a00:	e17ffe17 	ldw	r5,-8(fp)
 8105a04:	e1bfff17 	ldw	r6,-4(fp)
 8105a08:	8105c200 	call	8105c20 <open>
 8105a0c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8105a10:	e0bffb17 	ldw	r2,-20(fp)
 8105a14:	1004803a 	cmplt	r2,r2,zero
 8105a18:	10001f1e 	bne	r2,zero,8105a98 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8105a1c:	e13ffb17 	ldw	r4,-20(fp)
 8105a20:	04020434 	movhi	r16,2064
 8105a24:	8419bf04 	addi	r16,r16,26364
 8105a28:	01400304 	movi	r5,12
 8105a2c:	81045140 	call	8104514 <__mulsi3>
 8105a30:	1405883a 	add	r2,r2,r16
 8105a34:	10c00017 	ldw	r3,0(r2)
 8105a38:	e0bffc17 	ldw	r2,-16(fp)
 8105a3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8105a40:	e13ffb17 	ldw	r4,-20(fp)
 8105a44:	04020434 	movhi	r16,2064
 8105a48:	8419bf04 	addi	r16,r16,26364
 8105a4c:	01400304 	movi	r5,12
 8105a50:	81045140 	call	8104514 <__mulsi3>
 8105a54:	1405883a 	add	r2,r2,r16
 8105a58:	10800104 	addi	r2,r2,4
 8105a5c:	10c00017 	ldw	r3,0(r2)
 8105a60:	e0bffc17 	ldw	r2,-16(fp)
 8105a64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8105a68:	e13ffb17 	ldw	r4,-20(fp)
 8105a6c:	04020434 	movhi	r16,2064
 8105a70:	8419bf04 	addi	r16,r16,26364
 8105a74:	01400304 	movi	r5,12
 8105a78:	81045140 	call	8104514 <__mulsi3>
 8105a7c:	1405883a 	add	r2,r2,r16
 8105a80:	10800204 	addi	r2,r2,8
 8105a84:	10c00017 	ldw	r3,0(r2)
 8105a88:	e0bffc17 	ldw	r2,-16(fp)
 8105a8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8105a90:	e13ffb17 	ldw	r4,-20(fp)
 8105a94:	8105e0c0 	call	8105e0c <alt_release_fd>
  }
} 
 8105a98:	e037883a 	mov	sp,fp
 8105a9c:	dfc00217 	ldw	ra,8(sp)
 8105aa0:	df000117 	ldw	fp,4(sp)
 8105aa4:	dc000017 	ldw	r16,0(sp)
 8105aa8:	dec00304 	addi	sp,sp,12
 8105aac:	f800283a 	ret

08105ab0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8105ab0:	defffb04 	addi	sp,sp,-20
 8105ab4:	dfc00415 	stw	ra,16(sp)
 8105ab8:	df000315 	stw	fp,12(sp)
 8105abc:	df000304 	addi	fp,sp,12
 8105ac0:	e13ffd15 	stw	r4,-12(fp)
 8105ac4:	e17ffe15 	stw	r5,-8(fp)
 8105ac8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8105acc:	01020434 	movhi	r4,2064
 8105ad0:	2119c204 	addi	r4,r4,26376
 8105ad4:	e17ffd17 	ldw	r5,-12(fp)
 8105ad8:	01800044 	movi	r6,1
 8105adc:	01c07fc4 	movi	r7,511
 8105ae0:	81059d80 	call	81059d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8105ae4:	01020434 	movhi	r4,2064
 8105ae8:	2119bf04 	addi	r4,r4,26364
 8105aec:	e17ffe17 	ldw	r5,-8(fp)
 8105af0:	000d883a 	mov	r6,zero
 8105af4:	01c07fc4 	movi	r7,511
 8105af8:	81059d80 	call	81059d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8105afc:	01020434 	movhi	r4,2064
 8105b00:	2119c504 	addi	r4,r4,26388
 8105b04:	e17fff17 	ldw	r5,-4(fp)
 8105b08:	01800044 	movi	r6,1
 8105b0c:	01c07fc4 	movi	r7,511
 8105b10:	81059d80 	call	81059d8 <alt_open_fd>
}  
 8105b14:	e037883a 	mov	sp,fp
 8105b18:	dfc00117 	ldw	ra,4(sp)
 8105b1c:	df000017 	ldw	fp,0(sp)
 8105b20:	dec00204 	addi	sp,sp,8
 8105b24:	f800283a 	ret

08105b28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8105b28:	defffa04 	addi	sp,sp,-24
 8105b2c:	dfc00515 	stw	ra,20(sp)
 8105b30:	df000415 	stw	fp,16(sp)
 8105b34:	dc000315 	stw	r16,12(sp)
 8105b38:	df000304 	addi	fp,sp,12
 8105b3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8105b40:	e0bffe17 	ldw	r2,-8(fp)
 8105b44:	10800217 	ldw	r2,8(r2)
 8105b48:	10d00034 	orhi	r3,r2,16384
 8105b4c:	e0bffe17 	ldw	r2,-8(fp)
 8105b50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8105b54:	e03ffd15 	stw	zero,-12(fp)
 8105b58:	00002306 	br	8105be8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8105b5c:	e13ffd17 	ldw	r4,-12(fp)
 8105b60:	04020434 	movhi	r16,2064
 8105b64:	8419bf04 	addi	r16,r16,26364
 8105b68:	01400304 	movi	r5,12
 8105b6c:	81045140 	call	8104514 <__mulsi3>
 8105b70:	1405883a 	add	r2,r2,r16
 8105b74:	10c00017 	ldw	r3,0(r2)
 8105b78:	e0bffe17 	ldw	r2,-8(fp)
 8105b7c:	10800017 	ldw	r2,0(r2)
 8105b80:	1880161e 	bne	r3,r2,8105bdc <alt_file_locked+0xb4>
 8105b84:	e13ffd17 	ldw	r4,-12(fp)
 8105b88:	04020434 	movhi	r16,2064
 8105b8c:	8419bf04 	addi	r16,r16,26364
 8105b90:	01400304 	movi	r5,12
 8105b94:	81045140 	call	8104514 <__mulsi3>
 8105b98:	1405883a 	add	r2,r2,r16
 8105b9c:	10800204 	addi	r2,r2,8
 8105ba0:	10800017 	ldw	r2,0(r2)
 8105ba4:	1004403a 	cmpge	r2,r2,zero
 8105ba8:	10000c1e 	bne	r2,zero,8105bdc <alt_file_locked+0xb4>
 8105bac:	e13ffd17 	ldw	r4,-12(fp)
 8105bb0:	01400304 	movi	r5,12
 8105bb4:	81045140 	call	8104514 <__mulsi3>
 8105bb8:	1007883a 	mov	r3,r2
 8105bbc:	00820434 	movhi	r2,2064
 8105bc0:	1099bf04 	addi	r2,r2,26364
 8105bc4:	1887883a 	add	r3,r3,r2
 8105bc8:	e0bffe17 	ldw	r2,-8(fp)
 8105bcc:	18800326 	beq	r3,r2,8105bdc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8105bd0:	00bffcc4 	movi	r2,-13
 8105bd4:	e0bfff15 	stw	r2,-4(fp)
 8105bd8:	00000a06 	br	8105c04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8105bdc:	e0bffd17 	ldw	r2,-12(fp)
 8105be0:	10800044 	addi	r2,r2,1
 8105be4:	e0bffd15 	stw	r2,-12(fp)
 8105be8:	00820434 	movhi	r2,2064
 8105bec:	109a2804 	addi	r2,r2,26784
 8105bf0:	10800017 	ldw	r2,0(r2)
 8105bf4:	1007883a 	mov	r3,r2
 8105bf8:	e0bffd17 	ldw	r2,-12(fp)
 8105bfc:	18bfd72e 	bgeu	r3,r2,8105b5c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8105c00:	e03fff15 	stw	zero,-4(fp)
 8105c04:	e0bfff17 	ldw	r2,-4(fp)
}
 8105c08:	e037883a 	mov	sp,fp
 8105c0c:	dfc00217 	ldw	ra,8(sp)
 8105c10:	df000117 	ldw	fp,4(sp)
 8105c14:	dc000017 	ldw	r16,0(sp)
 8105c18:	dec00304 	addi	sp,sp,12
 8105c1c:	f800283a 	ret

08105c20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8105c20:	defff404 	addi	sp,sp,-48
 8105c24:	dfc00b15 	stw	ra,44(sp)
 8105c28:	df000a15 	stw	fp,40(sp)
 8105c2c:	df000a04 	addi	fp,sp,40
 8105c30:	e13ffb15 	stw	r4,-20(fp)
 8105c34:	e17ffc15 	stw	r5,-16(fp)
 8105c38:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8105c3c:	00bfffc4 	movi	r2,-1
 8105c40:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8105c44:	00bffb44 	movi	r2,-19
 8105c48:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8105c4c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8105c50:	e13ffb17 	ldw	r4,-20(fp)
 8105c54:	01420434 	movhi	r5,2064
 8105c58:	295a2604 	addi	r5,r5,26776
 8105c5c:	8105ea40 	call	8105ea4 <alt_find_dev>
 8105c60:	e0bffa15 	stw	r2,-24(fp)
 8105c64:	e0bffa17 	ldw	r2,-24(fp)
 8105c68:	1004c03a 	cmpne	r2,r2,zero
 8105c6c:	1000051e 	bne	r2,zero,8105c84 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8105c70:	e13ffb17 	ldw	r4,-20(fp)
 8105c74:	8105f380 	call	8105f38 <alt_find_file>
 8105c78:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8105c7c:	00800044 	movi	r2,1
 8105c80:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8105c84:	e0bffa17 	ldw	r2,-24(fp)
 8105c88:	1005003a 	cmpeq	r2,r2,zero
 8105c8c:	1000311e 	bne	r2,zero,8105d54 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8105c90:	e13ffa17 	ldw	r4,-24(fp)
 8105c94:	81060580 	call	8106058 <alt_get_fd>
 8105c98:	e0bff815 	stw	r2,-32(fp)
 8105c9c:	e0bff817 	ldw	r2,-32(fp)
 8105ca0:	1004403a 	cmpge	r2,r2,zero
 8105ca4:	1000031e 	bne	r2,zero,8105cb4 <open+0x94>
    {
      status = index;
 8105ca8:	e0bff817 	ldw	r2,-32(fp)
 8105cac:	e0bff715 	stw	r2,-36(fp)
 8105cb0:	00002a06 	br	8105d5c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8105cb4:	e13ff817 	ldw	r4,-32(fp)
 8105cb8:	01400304 	movi	r5,12
 8105cbc:	81045140 	call	8104514 <__mulsi3>
 8105cc0:	1007883a 	mov	r3,r2
 8105cc4:	00820434 	movhi	r2,2064
 8105cc8:	1099bf04 	addi	r2,r2,26364
 8105ccc:	1885883a 	add	r2,r3,r2
 8105cd0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8105cd4:	e0fffc17 	ldw	r3,-16(fp)
 8105cd8:	00900034 	movhi	r2,16384
 8105cdc:	10bfffc4 	addi	r2,r2,-1
 8105ce0:	1886703a 	and	r3,r3,r2
 8105ce4:	e0bff917 	ldw	r2,-28(fp)
 8105ce8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8105cec:	e0bff617 	ldw	r2,-40(fp)
 8105cf0:	1004c03a 	cmpne	r2,r2,zero
 8105cf4:	1000061e 	bne	r2,zero,8105d10 <open+0xf0>
 8105cf8:	e13ff917 	ldw	r4,-28(fp)
 8105cfc:	8105b280 	call	8105b28 <alt_file_locked>
 8105d00:	e0bff715 	stw	r2,-36(fp)
 8105d04:	e0bff717 	ldw	r2,-36(fp)
 8105d08:	1004803a 	cmplt	r2,r2,zero
 8105d0c:	1000131e 	bne	r2,zero,8105d5c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8105d10:	e0bffa17 	ldw	r2,-24(fp)
 8105d14:	10800317 	ldw	r2,12(r2)
 8105d18:	1005003a 	cmpeq	r2,r2,zero
 8105d1c:	1000091e 	bne	r2,zero,8105d44 <open+0x124>
 8105d20:	e0bffa17 	ldw	r2,-24(fp)
 8105d24:	10800317 	ldw	r2,12(r2)
 8105d28:	e13ff917 	ldw	r4,-28(fp)
 8105d2c:	e17ffb17 	ldw	r5,-20(fp)
 8105d30:	e1bffc17 	ldw	r6,-16(fp)
 8105d34:	e1fffd17 	ldw	r7,-12(fp)
 8105d38:	103ee83a 	callr	r2
 8105d3c:	e0bfff15 	stw	r2,-4(fp)
 8105d40:	00000106 	br	8105d48 <open+0x128>
 8105d44:	e03fff15 	stw	zero,-4(fp)
 8105d48:	e0bfff17 	ldw	r2,-4(fp)
 8105d4c:	e0bff715 	stw	r2,-36(fp)
 8105d50:	00000206 	br	8105d5c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8105d54:	00bffb44 	movi	r2,-19
 8105d58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8105d5c:	e0bff717 	ldw	r2,-36(fp)
 8105d60:	1004403a 	cmpge	r2,r2,zero
 8105d64:	1000091e 	bne	r2,zero,8105d8c <open+0x16c>
  {
    alt_release_fd (index);  
 8105d68:	e13ff817 	ldw	r4,-32(fp)
 8105d6c:	8105e0c0 	call	8105e0c <alt_release_fd>
    ALT_ERRNO = -status;
 8105d70:	8105dac0 	call	8105dac <alt_get_errno>
 8105d74:	e0fff717 	ldw	r3,-36(fp)
 8105d78:	00c7c83a 	sub	r3,zero,r3
 8105d7c:	10c00015 	stw	r3,0(r2)
    return -1;
 8105d80:	00bfffc4 	movi	r2,-1
 8105d84:	e0bffe15 	stw	r2,-8(fp)
 8105d88:	00000206 	br	8105d94 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 8105d8c:	e0bff817 	ldw	r2,-32(fp)
 8105d90:	e0bffe15 	stw	r2,-8(fp)
 8105d94:	e0bffe17 	ldw	r2,-8(fp)
}
 8105d98:	e037883a 	mov	sp,fp
 8105d9c:	dfc00117 	ldw	ra,4(sp)
 8105da0:	df000017 	ldw	fp,0(sp)
 8105da4:	dec00204 	addi	sp,sp,8
 8105da8:	f800283a 	ret

08105dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8105dac:	defffd04 	addi	sp,sp,-12
 8105db0:	dfc00215 	stw	ra,8(sp)
 8105db4:	df000115 	stw	fp,4(sp)
 8105db8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8105dbc:	00820434 	movhi	r2,2064
 8105dc0:	109a2904 	addi	r2,r2,26788
 8105dc4:	10800017 	ldw	r2,0(r2)
 8105dc8:	1005003a 	cmpeq	r2,r2,zero
 8105dcc:	1000061e 	bne	r2,zero,8105de8 <alt_get_errno+0x3c>
 8105dd0:	00820434 	movhi	r2,2064
 8105dd4:	109a2904 	addi	r2,r2,26788
 8105dd8:	10800017 	ldw	r2,0(r2)
 8105ddc:	103ee83a 	callr	r2
 8105de0:	e0bfff15 	stw	r2,-4(fp)
 8105de4:	00000306 	br	8105df4 <alt_get_errno+0x48>
 8105de8:	00820434 	movhi	r2,2064
 8105dec:	109ae204 	addi	r2,r2,27528
 8105df0:	e0bfff15 	stw	r2,-4(fp)
 8105df4:	e0bfff17 	ldw	r2,-4(fp)
}
 8105df8:	e037883a 	mov	sp,fp
 8105dfc:	dfc00117 	ldw	ra,4(sp)
 8105e00:	df000017 	ldw	fp,0(sp)
 8105e04:	dec00204 	addi	sp,sp,8
 8105e08:	f800283a 	ret

08105e0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8105e0c:	defffc04 	addi	sp,sp,-16
 8105e10:	dfc00315 	stw	ra,12(sp)
 8105e14:	df000215 	stw	fp,8(sp)
 8105e18:	dc000115 	stw	r16,4(sp)
 8105e1c:	df000104 	addi	fp,sp,4
 8105e20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8105e24:	e0bfff17 	ldw	r2,-4(fp)
 8105e28:	108000d0 	cmplti	r2,r2,3
 8105e2c:	10000f1e 	bne	r2,zero,8105e6c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 8105e30:	e13fff17 	ldw	r4,-4(fp)
 8105e34:	04020434 	movhi	r16,2064
 8105e38:	8419bf04 	addi	r16,r16,26364
 8105e3c:	01400304 	movi	r5,12
 8105e40:	81045140 	call	8104514 <__mulsi3>
 8105e44:	1405883a 	add	r2,r2,r16
 8105e48:	10800204 	addi	r2,r2,8
 8105e4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8105e50:	e13fff17 	ldw	r4,-4(fp)
 8105e54:	04020434 	movhi	r16,2064
 8105e58:	8419bf04 	addi	r16,r16,26364
 8105e5c:	01400304 	movi	r5,12
 8105e60:	81045140 	call	8104514 <__mulsi3>
 8105e64:	1405883a 	add	r2,r2,r16
 8105e68:	10000015 	stw	zero,0(r2)
  }
}
 8105e6c:	e037883a 	mov	sp,fp
 8105e70:	dfc00217 	ldw	ra,8(sp)
 8105e74:	df000117 	ldw	fp,4(sp)
 8105e78:	dc000017 	ldw	r16,0(sp)
 8105e7c:	dec00304 	addi	sp,sp,12
 8105e80:	f800283a 	ret

08105e84 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8105e84:	deffff04 	addi	sp,sp,-4
 8105e88:	df000015 	stw	fp,0(sp)
 8105e8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8105e90:	000170fa 	wrctl	ienable,zero
}
 8105e94:	e037883a 	mov	sp,fp
 8105e98:	df000017 	ldw	fp,0(sp)
 8105e9c:	dec00104 	addi	sp,sp,4
 8105ea0:	f800283a 	ret

08105ea4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8105ea4:	defff904 	addi	sp,sp,-28
 8105ea8:	dfc00615 	stw	ra,24(sp)
 8105eac:	df000515 	stw	fp,20(sp)
 8105eb0:	df000504 	addi	fp,sp,20
 8105eb4:	e13ffd15 	stw	r4,-12(fp)
 8105eb8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8105ebc:	e0bffe17 	ldw	r2,-8(fp)
 8105ec0:	10800017 	ldw	r2,0(r2)
 8105ec4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8105ec8:	e13ffd17 	ldw	r4,-12(fp)
 8105ecc:	81046880 	call	8104688 <strlen>
 8105ed0:	10800044 	addi	r2,r2,1
 8105ed4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8105ed8:	00000d06 	br	8105f10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8105edc:	e0bffc17 	ldw	r2,-16(fp)
 8105ee0:	11000217 	ldw	r4,8(r2)
 8105ee4:	e1bffb17 	ldw	r6,-20(fp)
 8105ee8:	e17ffd17 	ldw	r5,-12(fp)
 8105eec:	810615c0 	call	810615c <memcmp>
 8105ef0:	1004c03a 	cmpne	r2,r2,zero
 8105ef4:	1000031e 	bne	r2,zero,8105f04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8105ef8:	e0bffc17 	ldw	r2,-16(fp)
 8105efc:	e0bfff15 	stw	r2,-4(fp)
 8105f00:	00000706 	br	8105f20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8105f04:	e0bffc17 	ldw	r2,-16(fp)
 8105f08:	10800017 	ldw	r2,0(r2)
 8105f0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8105f10:	e0fffe17 	ldw	r3,-8(fp)
 8105f14:	e0bffc17 	ldw	r2,-16(fp)
 8105f18:	10fff01e 	bne	r2,r3,8105edc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8105f1c:	e03fff15 	stw	zero,-4(fp)
 8105f20:	e0bfff17 	ldw	r2,-4(fp)
}
 8105f24:	e037883a 	mov	sp,fp
 8105f28:	dfc00117 	ldw	ra,4(sp)
 8105f2c:	df000017 	ldw	fp,0(sp)
 8105f30:	dec00204 	addi	sp,sp,8
 8105f34:	f800283a 	ret

08105f38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8105f38:	defffa04 	addi	sp,sp,-24
 8105f3c:	dfc00515 	stw	ra,20(sp)
 8105f40:	df000415 	stw	fp,16(sp)
 8105f44:	df000404 	addi	fp,sp,16
 8105f48:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8105f4c:	00820434 	movhi	r2,2064
 8105f50:	109a2404 	addi	r2,r2,26768
 8105f54:	10800017 	ldw	r2,0(r2)
 8105f58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8105f5c:	00003306 	br	810602c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8105f60:	e0bffd17 	ldw	r2,-12(fp)
 8105f64:	11000217 	ldw	r4,8(r2)
 8105f68:	81046880 	call	8104688 <strlen>
 8105f6c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8105f70:	e0bffd17 	ldw	r2,-12(fp)
 8105f74:	10c00217 	ldw	r3,8(r2)
 8105f78:	e0bffc17 	ldw	r2,-16(fp)
 8105f7c:	1885883a 	add	r2,r3,r2
 8105f80:	10bfffc4 	addi	r2,r2,-1
 8105f84:	10800003 	ldbu	r2,0(r2)
 8105f88:	10803fcc 	andi	r2,r2,255
 8105f8c:	1080201c 	xori	r2,r2,128
 8105f90:	10bfe004 	addi	r2,r2,-128
 8105f94:	10800bd8 	cmpnei	r2,r2,47
 8105f98:	1000031e 	bne	r2,zero,8105fa8 <alt_find_file+0x70>
    {
      len -= 1;
 8105f9c:	e0bffc17 	ldw	r2,-16(fp)
 8105fa0:	10bfffc4 	addi	r2,r2,-1
 8105fa4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8105fa8:	e0bffc17 	ldw	r2,-16(fp)
 8105fac:	1007883a 	mov	r3,r2
 8105fb0:	e0bffe17 	ldw	r2,-8(fp)
 8105fb4:	1885883a 	add	r2,r3,r2
 8105fb8:	10800003 	ldbu	r2,0(r2)
 8105fbc:	10803fcc 	andi	r2,r2,255
 8105fc0:	1080201c 	xori	r2,r2,128
 8105fc4:	10bfe004 	addi	r2,r2,-128
 8105fc8:	10800be0 	cmpeqi	r2,r2,47
 8105fcc:	10000a1e 	bne	r2,zero,8105ff8 <alt_find_file+0xc0>
 8105fd0:	e0bffc17 	ldw	r2,-16(fp)
 8105fd4:	1007883a 	mov	r3,r2
 8105fd8:	e0bffe17 	ldw	r2,-8(fp)
 8105fdc:	1885883a 	add	r2,r3,r2
 8105fe0:	10800003 	ldbu	r2,0(r2)
 8105fe4:	10803fcc 	andi	r2,r2,255
 8105fe8:	1080201c 	xori	r2,r2,128
 8105fec:	10bfe004 	addi	r2,r2,-128
 8105ff0:	1004c03a 	cmpne	r2,r2,zero
 8105ff4:	10000a1e 	bne	r2,zero,8106020 <alt_find_file+0xe8>
 8105ff8:	e0bffd17 	ldw	r2,-12(fp)
 8105ffc:	11000217 	ldw	r4,8(r2)
 8106000:	e1bffc17 	ldw	r6,-16(fp)
 8106004:	e17ffe17 	ldw	r5,-8(fp)
 8106008:	810615c0 	call	810615c <memcmp>
 810600c:	1004c03a 	cmpne	r2,r2,zero
 8106010:	1000031e 	bne	r2,zero,8106020 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8106014:	e0bffd17 	ldw	r2,-12(fp)
 8106018:	e0bfff15 	stw	r2,-4(fp)
 810601c:	00000806 	br	8106040 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8106020:	e0bffd17 	ldw	r2,-12(fp)
 8106024:	10800017 	ldw	r2,0(r2)
 8106028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 810602c:	00c20434 	movhi	r3,2064
 8106030:	18da2404 	addi	r3,r3,26768
 8106034:	e0bffd17 	ldw	r2,-12(fp)
 8106038:	10ffc91e 	bne	r2,r3,8105f60 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 810603c:	e03fff15 	stw	zero,-4(fp)
 8106040:	e0bfff17 	ldw	r2,-4(fp)
}
 8106044:	e037883a 	mov	sp,fp
 8106048:	dfc00117 	ldw	ra,4(sp)
 810604c:	df000017 	ldw	fp,0(sp)
 8106050:	dec00204 	addi	sp,sp,8
 8106054:	f800283a 	ret

08106058 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8106058:	defffa04 	addi	sp,sp,-24
 810605c:	dfc00515 	stw	ra,20(sp)
 8106060:	df000415 	stw	fp,16(sp)
 8106064:	dc000315 	stw	r16,12(sp)
 8106068:	df000304 	addi	fp,sp,12
 810606c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8106070:	00bffa04 	movi	r2,-24
 8106074:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8106078:	e03ffe15 	stw	zero,-8(fp)
 810607c:	00002006 	br	8106100 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 8106080:	e13ffe17 	ldw	r4,-8(fp)
 8106084:	04020434 	movhi	r16,2064
 8106088:	8419bf04 	addi	r16,r16,26364
 810608c:	01400304 	movi	r5,12
 8106090:	81045140 	call	8104514 <__mulsi3>
 8106094:	1405883a 	add	r2,r2,r16
 8106098:	10800017 	ldw	r2,0(r2)
 810609c:	1004c03a 	cmpne	r2,r2,zero
 81060a0:	1000141e 	bne	r2,zero,81060f4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 81060a4:	e13ffe17 	ldw	r4,-8(fp)
 81060a8:	04020434 	movhi	r16,2064
 81060ac:	8419bf04 	addi	r16,r16,26364
 81060b0:	01400304 	movi	r5,12
 81060b4:	81045140 	call	8104514 <__mulsi3>
 81060b8:	1407883a 	add	r3,r2,r16
 81060bc:	e0bfff17 	ldw	r2,-4(fp)
 81060c0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 81060c4:	00820434 	movhi	r2,2064
 81060c8:	109a2804 	addi	r2,r2,26784
 81060cc:	10c00017 	ldw	r3,0(r2)
 81060d0:	e0bffe17 	ldw	r2,-8(fp)
 81060d4:	1880040e 	bge	r3,r2,81060e8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 81060d8:	00c20434 	movhi	r3,2064
 81060dc:	18da2804 	addi	r3,r3,26784
 81060e0:	e0bffe17 	ldw	r2,-8(fp)
 81060e4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 81060e8:	e0bffe17 	ldw	r2,-8(fp)
 81060ec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 81060f0:	00000606 	br	810610c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 81060f4:	e0bffe17 	ldw	r2,-8(fp)
 81060f8:	10800044 	addi	r2,r2,1
 81060fc:	e0bffe15 	stw	r2,-8(fp)
 8106100:	e0bffe17 	ldw	r2,-8(fp)
 8106104:	10800810 	cmplti	r2,r2,32
 8106108:	103fdd1e 	bne	r2,zero,8106080 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 810610c:	e0bffd17 	ldw	r2,-12(fp)
}
 8106110:	e037883a 	mov	sp,fp
 8106114:	dfc00217 	ldw	ra,8(sp)
 8106118:	df000117 	ldw	fp,4(sp)
 810611c:	dc000017 	ldw	r16,0(sp)
 8106120:	dec00304 	addi	sp,sp,12
 8106124:	f800283a 	ret

08106128 <atexit>:
 8106128:	200b883a 	mov	r5,r4
 810612c:	000d883a 	mov	r6,zero
 8106130:	0009883a 	mov	r4,zero
 8106134:	000f883a 	mov	r7,zero
 8106138:	81061981 	jmpi	8106198 <__register_exitproc>

0810613c <exit>:
 810613c:	defffe04 	addi	sp,sp,-8
 8106140:	dc400015 	stw	r17,0(sp)
 8106144:	000b883a 	mov	r5,zero
 8106148:	2023883a 	mov	r17,r4
 810614c:	dfc00115 	stw	ra,4(sp)
 8106150:	81063080 	call	8106308 <__call_exitprocs>
 8106154:	8809883a 	mov	r4,r17
 8106158:	81065040 	call	8106504 <_exit>

0810615c <memcmp>:
 810615c:	31ffffc4 	addi	r7,r6,-1
 8106160:	3000061e 	bne	r6,zero,810617c <memcmp+0x20>
 8106164:	00000a06 	br	8106190 <memcmp+0x34>
 8106168:	39ffffc4 	addi	r7,r7,-1
 810616c:	00bfffc4 	movi	r2,-1
 8106170:	21000044 	addi	r4,r4,1
 8106174:	29400044 	addi	r5,r5,1
 8106178:	38800526 	beq	r7,r2,8106190 <memcmp+0x34>
 810617c:	20c00003 	ldbu	r3,0(r4)
 8106180:	28800003 	ldbu	r2,0(r5)
 8106184:	18bff826 	beq	r3,r2,8106168 <memcmp+0xc>
 8106188:	1885c83a 	sub	r2,r3,r2
 810618c:	f800283a 	ret
 8106190:	0005883a 	mov	r2,zero
 8106194:	f800283a 	ret

08106198 <__register_exitproc>:
 8106198:	defff904 	addi	sp,sp,-28
 810619c:	00820434 	movhi	r2,2064
 81061a0:	109a2304 	addi	r2,r2,26764
 81061a4:	dc400115 	stw	r17,4(sp)
 81061a8:	14400017 	ldw	r17,0(r2)
 81061ac:	dc000015 	stw	r16,0(sp)
 81061b0:	dd400515 	stw	r21,20(sp)
 81061b4:	8c000c17 	ldw	r16,48(r17)
 81061b8:	dd000415 	stw	r20,16(sp)
 81061bc:	dcc00315 	stw	r19,12(sp)
 81061c0:	dc800215 	stw	r18,8(sp)
 81061c4:	dfc00615 	stw	ra,24(sp)
 81061c8:	2025883a 	mov	r18,r4
 81061cc:	282b883a 	mov	r21,r5
 81061d0:	3029883a 	mov	r20,r6
 81061d4:	3827883a 	mov	r19,r7
 81061d8:	80002626 	beq	r16,zero,8106274 <__register_exitproc+0xdc>
 81061dc:	81400117 	ldw	r5,4(r16)
 81061e0:	008007c4 	movi	r2,31
 81061e4:	11403716 	blt	r2,r5,81062c4 <__register_exitproc+0x12c>
 81061e8:	90002026 	beq	r18,zero,810626c <__register_exitproc+0xd4>
 81061ec:	81802217 	ldw	r6,136(r16)
 81061f0:	30002926 	beq	r6,zero,8106298 <__register_exitproc+0x100>
 81061f4:	81400117 	ldw	r5,4(r16)
 81061f8:	00c00044 	movi	r3,1
 81061fc:	31004017 	ldw	r4,256(r6)
 8106200:	1946983a 	sll	r3,r3,r5
 8106204:	2945883a 	add	r2,r5,r5
 8106208:	1085883a 	add	r2,r2,r2
 810620c:	1185883a 	add	r2,r2,r6
 8106210:	20c8b03a 	or	r4,r4,r3
 8106214:	14c02015 	stw	r19,128(r2)
 8106218:	15000015 	stw	r20,0(r2)
 810621c:	00800084 	movi	r2,2
 8106220:	31004015 	stw	r4,256(r6)
 8106224:	90801826 	beq	r18,r2,8106288 <__register_exitproc+0xf0>
 8106228:	2945883a 	add	r2,r5,r5
 810622c:	1085883a 	add	r2,r2,r2
 8106230:	1405883a 	add	r2,r2,r16
 8106234:	28c00044 	addi	r3,r5,1
 8106238:	0009883a 	mov	r4,zero
 810623c:	15400215 	stw	r21,8(r2)
 8106240:	80c00115 	stw	r3,4(r16)
 8106244:	2005883a 	mov	r2,r4
 8106248:	dfc00617 	ldw	ra,24(sp)
 810624c:	dd400517 	ldw	r21,20(sp)
 8106250:	dd000417 	ldw	r20,16(sp)
 8106254:	dcc00317 	ldw	r19,12(sp)
 8106258:	dc800217 	ldw	r18,8(sp)
 810625c:	dc400117 	ldw	r17,4(sp)
 8106260:	dc000017 	ldw	r16,0(sp)
 8106264:	dec00704 	addi	sp,sp,28
 8106268:	f800283a 	ret
 810626c:	81400117 	ldw	r5,4(r16)
 8106270:	003fed06 	br	8106228 <__register_exitproc+0x90>
 8106274:	00820434 	movhi	r2,2064
 8106278:	109ae604 	addi	r2,r2,27544
 810627c:	1021883a 	mov	r16,r2
 8106280:	88800c15 	stw	r2,48(r17)
 8106284:	003fd506 	br	81061dc <__register_exitproc+0x44>
 8106288:	30804117 	ldw	r2,260(r6)
 810628c:	10c4b03a 	or	r2,r2,r3
 8106290:	30804115 	stw	r2,260(r6)
 8106294:	003fe406 	br	8106228 <__register_exitproc+0x90>
 8106298:	00800034 	movhi	r2,0
 810629c:	10800004 	addi	r2,r2,0
 81062a0:	10000b26 	beq	r2,zero,81062d0 <__register_exitproc+0x138>
 81062a4:	01004204 	movi	r4,264
 81062a8:	103ee83a 	callr	r2
 81062ac:	10000826 	beq	r2,zero,81062d0 <__register_exitproc+0x138>
 81062b0:	100d883a 	mov	r6,r2
 81062b4:	10004015 	stw	zero,256(r2)
 81062b8:	10004115 	stw	zero,260(r2)
 81062bc:	80802215 	stw	r2,136(r16)
 81062c0:	003fcc06 	br	81061f4 <__register_exitproc+0x5c>
 81062c4:	00800034 	movhi	r2,0
 81062c8:	10800004 	addi	r2,r2,0
 81062cc:	1000021e 	bne	r2,zero,81062d8 <__register_exitproc+0x140>
 81062d0:	013fffc4 	movi	r4,-1
 81062d4:	003fdb06 	br	8106244 <__register_exitproc+0xac>
 81062d8:	01002304 	movi	r4,140
 81062dc:	103ee83a 	callr	r2
 81062e0:	1007883a 	mov	r3,r2
 81062e4:	103ffa26 	beq	r2,zero,81062d0 <__register_exitproc+0x138>
 81062e8:	88800c17 	ldw	r2,48(r17)
 81062ec:	1821883a 	mov	r16,r3
 81062f0:	18000115 	stw	zero,4(r3)
 81062f4:	18800015 	stw	r2,0(r3)
 81062f8:	88c00c15 	stw	r3,48(r17)
 81062fc:	903fdb26 	beq	r18,zero,810626c <__register_exitproc+0xd4>
 8106300:	003fba06 	br	81061ec <__register_exitproc+0x54>

08106304 <register_fini>:
 8106304:	f800283a 	ret

08106308 <__call_exitprocs>:
 8106308:	defff304 	addi	sp,sp,-52
 810630c:	00820434 	movhi	r2,2064
 8106310:	109a2304 	addi	r2,r2,26764
 8106314:	df000b15 	stw	fp,44(sp)
 8106318:	17000017 	ldw	fp,0(r2)
 810631c:	00800034 	movhi	r2,0
 8106320:	10800004 	addi	r2,r2,0
 8106324:	1005003a 	cmpeq	r2,r2,zero
 8106328:	d8800215 	stw	r2,8(sp)
 810632c:	e0800c04 	addi	r2,fp,48
 8106330:	dd800915 	stw	r22,36(sp)
 8106334:	dd400815 	stw	r21,32(sp)
 8106338:	dfc00c15 	stw	ra,48(sp)
 810633c:	ddc00a15 	stw	r23,40(sp)
 8106340:	dd000715 	stw	r20,28(sp)
 8106344:	dcc00615 	stw	r19,24(sp)
 8106348:	dc800515 	stw	r18,20(sp)
 810634c:	dc400415 	stw	r17,16(sp)
 8106350:	dc000315 	stw	r16,12(sp)
 8106354:	282d883a 	mov	r22,r5
 8106358:	d9000115 	stw	r4,4(sp)
 810635c:	d8800015 	stw	r2,0(sp)
 8106360:	282b003a 	cmpeq	r21,r5,zero
 8106364:	e4400c17 	ldw	r17,48(fp)
 8106368:	88001226 	beq	r17,zero,81063b4 <__call_exitprocs+0xac>
 810636c:	ddc00017 	ldw	r23,0(sp)
 8106370:	88800117 	ldw	r2,4(r17)
 8106374:	8c802217 	ldw	r18,136(r17)
 8106378:	143fffc4 	addi	r16,r2,-1
 810637c:	80000b16 	blt	r16,zero,81063ac <__call_exitprocs+0xa4>
 8106380:	9027003a 	cmpeq	r19,r18,zero
 8106384:	a800171e 	bne	r21,zero,81063e4 <__call_exitprocs+0xdc>
 8106388:	9800051e 	bne	r19,zero,81063a0 <__call_exitprocs+0x98>
 810638c:	8409883a 	add	r4,r16,r16
 8106390:	2105883a 	add	r2,r4,r4
 8106394:	1485883a 	add	r2,r2,r18
 8106398:	10c02017 	ldw	r3,128(r2)
 810639c:	b0c01226 	beq	r22,r3,81063e8 <__call_exitprocs+0xe0>
 81063a0:	843fffc4 	addi	r16,r16,-1
 81063a4:	00bfffc4 	movi	r2,-1
 81063a8:	80bff61e 	bne	r16,r2,8106384 <__call_exitprocs+0x7c>
 81063ac:	d8800217 	ldw	r2,8(sp)
 81063b0:	10003226 	beq	r2,zero,810647c <__call_exitprocs+0x174>
 81063b4:	dfc00c17 	ldw	ra,48(sp)
 81063b8:	df000b17 	ldw	fp,44(sp)
 81063bc:	ddc00a17 	ldw	r23,40(sp)
 81063c0:	dd800917 	ldw	r22,36(sp)
 81063c4:	dd400817 	ldw	r21,32(sp)
 81063c8:	dd000717 	ldw	r20,28(sp)
 81063cc:	dcc00617 	ldw	r19,24(sp)
 81063d0:	dc800517 	ldw	r18,20(sp)
 81063d4:	dc400417 	ldw	r17,16(sp)
 81063d8:	dc000317 	ldw	r16,12(sp)
 81063dc:	dec00d04 	addi	sp,sp,52
 81063e0:	f800283a 	ret
 81063e4:	8409883a 	add	r4,r16,r16
 81063e8:	88c00117 	ldw	r3,4(r17)
 81063ec:	2105883a 	add	r2,r4,r4
 81063f0:	1445883a 	add	r2,r2,r17
 81063f4:	18ffffc4 	addi	r3,r3,-1
 81063f8:	11800217 	ldw	r6,8(r2)
 81063fc:	1c001826 	beq	r3,r16,8106460 <__call_exitprocs+0x158>
 8106400:	10000215 	stw	zero,8(r2)
 8106404:	303fe626 	beq	r6,zero,81063a0 <__call_exitprocs+0x98>
 8106408:	8d000117 	ldw	r20,4(r17)
 810640c:	9800121e 	bne	r19,zero,8106458 <__call_exitprocs+0x150>
 8106410:	00c00044 	movi	r3,1
 8106414:	1c06983a 	sll	r3,r3,r16
 8106418:	90804017 	ldw	r2,256(r18)
 810641c:	1884703a 	and	r2,r3,r2
 8106420:	10000d26 	beq	r2,zero,8106458 <__call_exitprocs+0x150>
 8106424:	90804117 	ldw	r2,260(r18)
 8106428:	1884703a 	and	r2,r3,r2
 810642c:	10000e1e 	bne	r2,zero,8106468 <__call_exitprocs+0x160>
 8106430:	2105883a 	add	r2,r4,r4
 8106434:	1485883a 	add	r2,r2,r18
 8106438:	11400017 	ldw	r5,0(r2)
 810643c:	d9000117 	ldw	r4,4(sp)
 8106440:	303ee83a 	callr	r6
 8106444:	88800117 	ldw	r2,4(r17)
 8106448:	a0bfc61e 	bne	r20,r2,8106364 <__call_exitprocs+0x5c>
 810644c:	b8800017 	ldw	r2,0(r23)
 8106450:	147fd326 	beq	r2,r17,81063a0 <__call_exitprocs+0x98>
 8106454:	003fc306 	br	8106364 <__call_exitprocs+0x5c>
 8106458:	303ee83a 	callr	r6
 810645c:	003ff906 	br	8106444 <__call_exitprocs+0x13c>
 8106460:	8c000115 	stw	r16,4(r17)
 8106464:	003fe706 	br	8106404 <__call_exitprocs+0xfc>
 8106468:	2105883a 	add	r2,r4,r4
 810646c:	1485883a 	add	r2,r2,r18
 8106470:	11000017 	ldw	r4,0(r2)
 8106474:	303ee83a 	callr	r6
 8106478:	003ff206 	br	8106444 <__call_exitprocs+0x13c>
 810647c:	88800117 	ldw	r2,4(r17)
 8106480:	10000b1e 	bne	r2,zero,81064b0 <__call_exitprocs+0x1a8>
 8106484:	89000017 	ldw	r4,0(r17)
 8106488:	20000a26 	beq	r4,zero,81064b4 <__call_exitprocs+0x1ac>
 810648c:	b9000015 	stw	r4,0(r23)
 8106490:	90000226 	beq	r18,zero,810649c <__call_exitprocs+0x194>
 8106494:	9009883a 	mov	r4,r18
 8106498:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>
 810649c:	8809883a 	mov	r4,r17
 81064a0:	00000000 	call	0 <__alt_mem_SDRAM_CONTROLLER-0x4000000>
 81064a4:	bc400017 	ldw	r17,0(r23)
 81064a8:	883fb11e 	bne	r17,zero,8106370 <__call_exitprocs+0x68>
 81064ac:	003fc106 	br	81063b4 <__call_exitprocs+0xac>
 81064b0:	89000017 	ldw	r4,0(r17)
 81064b4:	882f883a 	mov	r23,r17
 81064b8:	2023883a 	mov	r17,r4
 81064bc:	883fac1e 	bne	r17,zero,8106370 <__call_exitprocs+0x68>
 81064c0:	003fbc06 	br	81063b4 <__call_exitprocs+0xac>

081064c4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 81064c4:	defffd04 	addi	sp,sp,-12
 81064c8:	df000215 	stw	fp,8(sp)
 81064cc:	df000204 	addi	fp,sp,8
 81064d0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 81064d4:	e0bfff17 	ldw	r2,-4(fp)
 81064d8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 81064dc:	e0bffe17 	ldw	r2,-8(fp)
 81064e0:	1005003a 	cmpeq	r2,r2,zero
 81064e4:	1000021e 	bne	r2,zero,81064f0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 81064e8:	002af070 	cmpltui	zero,zero,43969
 81064ec:	00000106 	br	81064f4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 81064f0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 81064f4:	e037883a 	mov	sp,fp
 81064f8:	df000017 	ldw	fp,0(sp)
 81064fc:	dec00104 	addi	sp,sp,4
 8106500:	f800283a 	ret

08106504 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8106504:	defffd04 	addi	sp,sp,-12
 8106508:	dfc00215 	stw	ra,8(sp)
 810650c:	df000115 	stw	fp,4(sp)
 8106510:	df000104 	addi	fp,sp,4
 8106514:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8106518:	e13fff17 	ldw	r4,-4(fp)
 810651c:	81064c40 	call	81064c4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8106520:	003fff06 	br	8106520 <_exit+0x1c>
 8106524:	08106304 	addi	zero,at,16780
